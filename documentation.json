{
    "pipes": [
        {
            "name": "PhonePipe",
            "id": "pipe-PhonePipe-61f2342f3d401e6985afefbfc352ef78e36212c25fc526ac8abc4ac1fc8c693a4801434e6a5bbdd5465c987a417808b0a0fcc9ec8f54a6552fa22aa349f9bba8",
            "file": "src/app/pipes/phone/phone.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "phone",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\n\n@Pipe({\n  name: 'phone',\n})\nexport class PhonePipe implements PipeTransform {\n  transform(value: string | null): string {\n    if (!value) {\n      return ''\n    }\n\n    if (value.length === 11) {\n      return value.replace(/(\\d{2})?(\\d{5})?(\\d{4})/, '($1) $2-$3')\n    }\n\n    if (value.length === 10) {\n      return value.replace(/(\\d{2})?(\\d{4})?(\\d{4})/, '($1) $2-$3')\n    }\n\n    return ''\n  }\n}\n"
        },
        {
            "name": "RemoveHttpUrlPipe",
            "id": "pipe-RemoveHttpUrlPipe-094d26036c31b403fa5e69ef474b5d250d4711225604b098c9c551a4bb529121a0ff137f19930b9561407c2a6c6efc837bbed49b80e6ef8c0c93e6d6228a89a8",
            "file": "src/app/pipes/remove-http-url/remove-http-url.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "removeHttpUrl",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core'\n\n@Pipe({\n  name: 'removeHttpUrl',\n})\nexport class RemoveHttpUrlPipe implements PipeTransform {\n  transform(value: string | null): string {\n    if (!value) {\n      return ''\n    }\n\n    return value.replace(/(^\\w+:|^)\\/\\//, '')\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "IAddress",
            "id": "interface-IAddress-e800b8bf2d0cecdb4009dd7bb561d4dd117f326e98caebf73e947d89e2bdccbec7fe3ef76b11f1547dd24444b9b05b061924116e27c284318cff4ff82b344d70",
            "file": "src/app/modules/user/services/user.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { environment } from './../../../../environments/environment'\n\ninterface IEvents {\n  title: string\n  description: string\n  date: Date\n}\ninterface ISocialMedias {\n  facebook: string\n  instagram: string\n  linkedin: string\n  twitter: string\n}\n\ninterface IAddress {\n  number: number\n  street: string\n  state: string\n  city: string\n  cep: string\n}\n\ninterface IContact {\n  phone: string\n  address: IAddress\n}\n\ninterface IHistory {\n  lastVisit: Date\n}\n\nexport interface IProfile {\n  name: string\n  age: number\n  gender: 'MALE' | 'FEMALE'\n  profileBackgroundImage: string\n  photo: string\n  description: string\n  contact: IContact\n  socialMedias: ISocialMedias\n  events: IEvents[]\n  healthProblems: string[]\n  status: 'APPROVED' | 'PENDING'\n  history: IHistory[]\n}\n\nexport interface IMe {\n  name: string\n  email: string\n  photo: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  getProfile(): Observable<IProfile> {\n    return this.http.get<IProfile>(`${environment.BASE_URL}/user/profile`)\n  }\n\n  getMe(): Observable<IMe> {\n    return this.http.get<IMe>(`${environment.BASE_URL}/user/me`)\n  }\n}\n",
            "properties": [
                {
                    "name": "cep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "street",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IBreadcrumbItem",
            "id": "interface-IBreadcrumbItem-1bec5631b53f020e7002a139a2cb15947fdd74a67b9070dd431ff4abc04caec9f26917531201ca03eed18924e1ecfcbda05be07c34cc55ae962b962a4ac4fcf8",
            "file": "src/app/components/breadcrumb/breadcrumb.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nexport interface IBreadcrumbItem {\n  label: string\n  routerLink: string\n}\n\n@Component({\n  selector: 'hc-breadcrumb',\n  template: `\n    <div class=\"hc-breadcrumb\">\n      <ul>\n        <ng-template ngFor let-item let-end=\"last\" [ngForOf]=\"model\">\n          <li>\n            <a [routerLink]=\"item.routerLink\" class=\"hc-breadcrumb-link\">\n              <span class=\"hc-breadcrumb-text\">{{ item.label }}</span>\n            </a>\n          </li>\n          <li class=\"material-symbols-outlined\" *ngIf=\"!end\">chevron_right</li>\n        </ng-template>\n      </ul>\n    </div>\n  `,\n  styleUrls: ['breadcrumb.component.scss'],\n})\nexport class BreadcrumbComponent {\n  @Input() model?: IBreadcrumbItem[] | null\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICity",
            "id": "interface-ICity-6e4b4044c96833151b325b0b0d56f2c2137c6997bef983c56ae7b18668cc99d67149d7e2b4925e0c0bd8519b545be44344f94f89b44f519733e24f88baeffa9a",
            "file": "src/app/modules/docs/form/page-select/page-select.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormBuilder, FormGroup } from '@angular/forms'\n\nimport { Component } from '@angular/core'\n\ninterface ICity {\n  name: string\n  code: string\n}\n\n@Component({\n  selector: 'app-page-select',\n  template: `\n    <hc-card>\n      <div>\n        <h6 style=\"margin-bottom: 1rem;\">Empty</h6>\n        <hc-select\n          optionLabel=\"name\"\n          [options]=\"cities\"\n          [showClear]=\"true\"\n          [style]=\"{ width: '256px' }\"\n          [(ngModel)]=\"selectedCity\"\n        ></hc-select>\n      </div>\n      <div style=\"margin-top: 1.5rem\">\n        <h6 style=\"margin-bottom: 1rem\">Placeholder</h6>\n        <hc-select\n          placeholder=\"Select city\"\n          optionLabel=\"name\"\n          [options]=\"cities\"\n          [showClear]=\"true\"\n          [style]=\"{ width: '256px' }\"\n          [(ngModel)]=\"selectedCity\"\n        ></hc-select>\n      </div>\n      <div style=\"margin-top: 1.5rem;\">\n        <h6 style=\"margin-bottom: 1rem;\">Disabled</h6>\n        <hc-select\n          placeholder=\"Select\"\n          optionLabel=\"name\"\n          [disabled]=\"true\"\n          [options]=\"cities\"\n          [showClear]=\"true\"\n          [style]=\"{ width: '256px' }\"\n          [(ngModel)]=\"selectedCity\"\n        ></hc-select>\n      </div>\n      <div style=\"margin-top: 1.5rem;\">\n        <h6 style=\"margin-bottom: 1rem;\">ngModel Initial Value</h6>\n        <hc-select\n          placeholder=\"Select\"\n          optionLabel=\"name\"\n          [options]=\"cities\"\n          [showClear]=\"true\"\n          [style]=\"{ width: '256px' }\"\n          [(ngModel)]=\"selectedInitialValue\"\n        ></hc-select>\n      </div>\n      <div style=\"margin-top: 1.5rem;\">\n        <h6 style=\"margin-bottom: 1rem;\">formControlName Initial Value</h6>\n        <form [formGroup]=\"form\" (submit)=\"onShow()\">\n          <hc-select\n            placeholder=\"Select\"\n            optionLabel=\"name\"\n            formControlName=\"city\"\n            [options]=\"cities\"\n            [showClear]=\"true\"\n            [style]=\"{ width: '256px' }\"\n          ></hc-select>\n        </form>\n      </div>\n    </hc-card>\n  `,\n  styles: [],\n})\nexport class PageSelectComponent {\n  cities: ICity[]\n  selectedCity!: ICity\n  selectedInitialValue = { name: 'São Paulo', code: 'SP' }\n  form: FormGroup = this.fb.group({\n    city: [{ name: 'São Paulo', code: 'SP' }],\n  })\n\n  constructor(private fb: FormBuilder) {\n    this.cities = [\n      { name: 'New York', code: 'NY' },\n      { name: 'Rome', code: 'RM' },\n      { name: 'London', code: 'EDN' },\n      { name: 'Istanbul', code: 'IST' },\n      { name: 'Paris', code: 'PRS' },\n      { name: 'San Francisco', code: 'SF' },\n      { name: 'São Paulo', code: 'SP' },\n      { name: 'Ceara', code: 'CE' },\n      { name: 'Minas Gerais', code: 'MG' },\n    ]\n  }\n\n  onShow() {\n    console.log(this.selectedInitialValue)\n    console.log(this.form.value)\n  }\n}\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IColumn",
            "id": "interface-IColumn-a8d6f7ef72eb81baaba784e76cb7bd8c054ffae4d16ac403ac49709f7eac5519a2981f10f04b95c74a9336e6b3dbb79933c1a42d7235b03041e9df8bb481aae3",
            "file": "src/app/components/table/table.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Input,\n  OnChanges,\n  Optional,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core'\n\nimport { ElementRef } from '@angular/core'\nimport { IStyle } from './../../common/models/style.model'\nimport { PaginationDirective } from './pagination.directive'\nimport { TemplateDirective } from 'src/app/directives/template/template.directive'\nimport { DataService } from './data.service'\nimport { TableService } from 'src/app/components/table/table.service'\nimport { SimpleChanges } from '@angular/core'\n\nexport interface IColumn {\n  header: string\n  field: string\n}\n\n@Component({\n  selector: 'hc-table',\n  template: `\n    <div [ngClass]=\"containerClasses\">\n      <div\n        *ngIf=\"paginator.paginator\"\n        class=\"hc-table-options-header\"\n        style=\"margin-bottom: 1rem;\"\n      >\n        <div class=\"hc-table-limit\">\n          <ng-select\n            style=\"width: 80px;\"\n            [searchable]=\"false\"\n            [items]=\"paginator.rowsPerPageOptions\"\n            [clearable]=\"false\"\n            [(ngModel)]=\"paginator.selectedLimit\"\n            (change)=\"paginator.onLimitChange.emit($event)\"\n          ></ng-select>\n          <span style=\"margin-left: 0.5rem\">{{ paginator.limitLabel }}</span>\n        </div>\n        <div *ngIf=\"optionsHeaderTemplate\">\n          <ng-container *ngTemplateOutlet=\"optionsHeaderTemplate\"></ng-container>\n        </div>\n      </div>\n      <div class=\"hc-datatable-header\" *ngIf=\"captionTemplate\">\n        <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n      </div>\n\n      <div class=\"hc-datatable-wrapper\" [ngStyle]=\"{ maxHeight: scrollHeight }\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            buildInTable;\n            context: { $implicit: data.processedData, options: { columns } }\n          \"\n        ></ng-container>\n\n        <ng-template #buildInTable let-items let-options=\"options\">\n          <table\n            class=\"hc-datatable-table\"\n            *ngIf=\"data.value\"\n            #table\n            role=\"table\"\n            [ngStyle]=\"style\"\n          >\n            <thead *ngIf=\"headerTemplate\" class=\"hc-datatable-thead\">\n              <ng-container\n                *ngTemplateOutlet=\"\n                  headerTemplate;\n                  context: { $implicit: options.columns }\n                \"\n              ></ng-container>\n            </thead>\n            <tbody\n              class=\"hc-datatable-tbody\"\n              *ngIf=\"bodyTemplate\"\n              [hc-table-body]=\"options.columns\"\n              [template]=\"bodyTemplate\"\n              [expandedRowTemplate]=\"expandedRowTemplate\"\n            ></tbody>\n          </table>\n        </ng-template>\n      </div>\n\n      <div class=\"hc-datatable-footer\" *ngIf=\"summaryTemplate\">\n        <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n      </div>\n\n      <div style=\"margin-top: 20px\" *ngIf=\"paginator.paginator\">\n        <hc-pagination\n          [rows]=\"paginator.rows\"\n          [pagination]=\"paginator.pagination\"\n          [totalRecords]=\"paginator.totalRecords\"\n          (pageChangeEvent)=\"paginator.onPageChange($event)\"\n          [showCurrentPageReport]=\"paginator.showCurrentPageReport\"\n          [currentPageReportTemplate]=\"paginator.currentPageReportTemplate\"\n        ></hc-pagination>\n      </div>\n    </div>\n  `,\n  styleUrls: ['table.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [DataService],\n})\nexport class TableComponent implements AfterContentInit, OnChanges {\n  bodyTemplate!: TemplateRef<TemplateDirective>\n  headerTemplate!: TemplateRef<TemplateDirective>\n  captionTemplate!: TemplateRef<TemplateDirective>\n  summaryTemplate!: TemplateRef<TemplateDirective>\n  optionsHeaderTemplate!: TemplateRef<TemplateDirective>\n  expandedRowTemplate!: TemplateRef<TemplateDirective>\n\n  @Input() columns: IColumn[] = []\n  @Input() responsiveLayout: 'stack' | 'scroll' = 'stack'\n  @Input() responsive = false\n  @Input() gridlines = false\n  @Input() style?: IStyle\n  @Input() scrollable = false\n  @Input() scrollDirection: 'vertical' | 'horizontal' | 'both' = 'both'\n  @Input() scrollHeight?: string\n\n  @ContentChildren(TemplateDirective) templates!: QueryList<TemplateDirective>\n  @ViewChild('table') tableViewChild!: ElementRef\n\n  @Input() get value(): any[] {\n    return this.data.value\n  }\n\n  set value(val: any[]) {\n    this.data.value = val\n  }\n\n  constructor(\n    public data: DataService,\n    public tableService: TableService,\n    @Optional() public paginator: PaginationDirective\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['value']) {\n      this.value = changes['value'].currentValue\n\n      this.tableService.onValueChange(changes['value'].currentValue)\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.templates.forEach((item) => {\n      switch (item.getType()) {\n        case 'body':\n          this.bodyTemplate = item.template\n          break\n        case 'header':\n          this.headerTemplate = item.template\n          break\n        case 'caption':\n          this.captionTemplate = item.template\n          break\n        case 'summary':\n          this.summaryTemplate = item.template\n          break\n        case 'optionsHeader':\n          this.optionsHeaderTemplate = item.template\n          break\n        case 'rowexpansion':\n          this.expandedRowTemplate = item.template\n          break\n      }\n    })\n  }\n\n  get containerClasses() {\n    return {\n      ['hc-datatable']: true,\n      ['hc-datatable-responsive-scroll']: this.responsiveLayout === 'scroll',\n      ['hc-datatable-gridlines']: this.gridlines,\n      ['hc-datatable-scrollable']: this.scrollable,\n      ['hc-datatable-scrollable-horizontal']:\n        this.scrollable && this.scrollDirection === 'horizontal',\n      ['hc-datatable-scrollable-both']:\n        this.scrollable && this.scrollDirection === 'both',\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICommand",
            "id": "interface-ICommand-a2efbc0040be32354eaf0d4dd9dd7efe67623c6d7a2e2ea8882fac8f19ade274656472801b1278aa3e2710bb1fc0f6eabda1e89da42329e18fad847bb961a316",
            "file": "src/app/components/menu/menu-item.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nimport { IsActiveMatchOptions } from '@angular/router'\nimport { MenuComponent } from './menu.component'\n\ninterface ICommand {\n  originalEvent: Event\n  item: IMenuItem\n}\n\nexport interface IMenuItem {\n  automationId?: any\n  disabled?: boolean\n  command?: (object: ICommand) => void\n  items?: IMenuItem[]\n  icon?: string\n  label?: string\n  queryParams?: { [key: string]: string | number }\n  routerLink?: any\n  routerLinkActiveOptions?: IsActiveMatchOptions\n  separator?: boolean\n  url?: string\n}\n\n@Component({\n  selector: '[hc-menu-item]',\n  template: `\n    <a\n      *ngIf=\"item && !item?.routerLink\"\n      class=\"hc-menu-item-link subtitle2\"\n      role=\"menuitem\"\n      (click)=\"menu.itemClick($event, item)\"\n    >\n      <span *ngIf=\"item.icon\" class=\"material-symbols-outlined hc-menu-item-icon\">\n        {{ item.icon }}\n      </span>\n      <span class=\"hc-menu-item-text\">{{ item.label }}</span>\n    </a>\n    <a\n      *ngIf=\"item && item.routerLink\"\n      class=\"hc-menu-item-link subtitle2\"\n      role=\"menuitem\"\n      routerLinkActive=\"hc-menu-item-link-active\"\n      [routerLink]=\"item.routerLink\"\n      [queryParams]=\"item.queryParams\"\n      [routerLinkActiveOptions]=\"item.routerLinkActiveOptions || { exact: false }\"\n    >\n      <span *ngIf=\"item?.icon\" class=\"material-symbols-outlined hc-menu-item-icon\">\n        {{ item.icon }}\n      </span>\n      <span class=\"hc-menu-item-text\">{{ item.label }}</span>\n    </a>\n  `,\n  styles: [\n    `\n      .hc-menu-item-link {\n        text-decoration: none;\n        color: var(--neutral-gray-dark);\n        padding: 0.75rem 1.25rem;\n        display: flex;\n        align-items: center;\n        font-size: 1rem;\n        border-radius: 0.5rem;\n        cursor: pointer;\n\n        .hc-menu-item-icon {\n          margin-right: 0.5rem;\n          font-size: 20px;\n          color: var(--neutral-gray-lighter);\n        }\n      }\n\n      .hc-menu-item-link:hover {\n        background-color: var(--primary-lightest);\n        color: var(--primary-default);\n\n        .hc-menu-item-icon {\n          color: var(--primary-default);\n        }\n      }\n\n      .hc-menu-item-link-active {\n        background-color: var(--primary-lightest);\n        color: var(--primary-default);\n\n        .hc-menu-item-icon {\n          color: var(--primary-default);\n        }\n      }\n    `,\n  ],\n})\nexport class MenuItemComponent {\n  @Input('hc-menu-item') item?: IMenuItem\n\n  menu: MenuComponent\n\n  constructor(public menuComponent: MenuComponent) {\n    this.menu = menuComponent\n  }\n}\n",
            "properties": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "originalEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IConnectedOverlayScrollHandler",
            "id": "interface-IConnectedOverlayScrollHandler-c53c4ca3775e67f7e631511e0d262514cd1552c128692b96a21c177dcd080dc9faa1ecdd72e690184f298f69cde0d26ff56cb1926d16e35a5419a63a5d621ba7",
            "file": "src/app/common/connected-overlay-scroll-handler/connected-overlay-scroll-handler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DomHandler } from '../dom-handler/dom-handler'\n\nexport interface IConnectedOverlayScrollHandler {\n  bindScrollListener: () => void\n  unbindScrollListener: () => void\n  destroy: () => void\n}\n\nexport class ConnectedOverlayScrollHandler {\n  element: HTMLElement | null\n  listener: null | ((this: HTMLElement, ev: Event) => void)\n  scrollableParents: HTMLElement[] | null = null\n\n  constructor(element: HTMLElement, listener: () => void) {\n    this.element = element\n    this.listener = listener\n  }\n\n  bindScrollListener(): void {\n    this.scrollableParents = DomHandler.getScrollableParents(this.element)\n    for (let i = 0; i < this.scrollableParents.length; i++) {\n      if (this.listener) {\n        this.scrollableParents[i].addEventListener('scroll', this.listener)\n      }\n    }\n  }\n\n  unbindScrollListener() {\n    if (this.scrollableParents) {\n      for (let i = 0; i < this.scrollableParents.length; i++) {\n        if (this.listener) {\n          this.scrollableParents[i].removeEventListener('scroll', this.listener)\n        }\n      }\n    }\n  }\n\n  destroy(): void {\n    this.unbindScrollListener()\n    this.element = null\n    this.listener = null\n    this.scrollableParents = null\n  }\n}\n",
            "properties": [
                {
                    "name": "bindScrollListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "destroy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "unbindScrollListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IContact",
            "id": "interface-IContact-e800b8bf2d0cecdb4009dd7bb561d4dd117f326e98caebf73e947d89e2bdccbec7fe3ef76b11f1547dd24444b9b05b061924116e27c284318cff4ff82b344d70",
            "file": "src/app/modules/user/services/user.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { environment } from './../../../../environments/environment'\n\ninterface IEvents {\n  title: string\n  description: string\n  date: Date\n}\ninterface ISocialMedias {\n  facebook: string\n  instagram: string\n  linkedin: string\n  twitter: string\n}\n\ninterface IAddress {\n  number: number\n  street: string\n  state: string\n  city: string\n  cep: string\n}\n\ninterface IContact {\n  phone: string\n  address: IAddress\n}\n\ninterface IHistory {\n  lastVisit: Date\n}\n\nexport interface IProfile {\n  name: string\n  age: number\n  gender: 'MALE' | 'FEMALE'\n  profileBackgroundImage: string\n  photo: string\n  description: string\n  contact: IContact\n  socialMedias: ISocialMedias\n  events: IEvents[]\n  healthProblems: string[]\n  status: 'APPROVED' | 'PENDING'\n  history: IHistory[]\n}\n\nexport interface IMe {\n  name: string\n  email: string\n  photo: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  getProfile(): Observable<IProfile> {\n    return this.http.get<IProfile>(`${environment.BASE_URL}/user/profile`)\n  }\n\n  getMe(): Observable<IMe> {\n    return this.http.get<IMe>(`${environment.BASE_URL}/user/me`)\n  }\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAddress",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDimensions",
            "id": "interface-IDimensions-9b9b65c631ce8f4d3bf8e16c3f4b2f7d7b15cc3c6360ac39fe1697b85636b2f4e7bcd9be8b51c42e77795e64a7fd1620f51faaba52d34ec1b91693a4d28ae44d",
            "file": "src/app/common/dom-handler/dom-handler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface IDimensions {\n  width: number\n  height: number\n}\n\ninterface IViewport {\n  width: number\n  height: number\n}\n\nexport interface IOffset {\n  top: number\n  left: number\n}\n\nexport class DomHandler {\n  public static isElement(obj: HTMLElement): boolean {\n    return typeof HTMLElement === 'object'\n      ? obj instanceof HTMLElement\n      : obj &&\n          typeof obj === 'object' &&\n          obj !== null &&\n          (obj as HTMLElement).nodeType === 1 &&\n          typeof (obj as HTMLElement).nodeName === 'string'\n  }\n\n  public static appendChild(element: HTMLElement, target: HTMLElement): void {\n    if (this.isElement(target)) {\n      target.appendChild(element)\n    } else {\n      throw `Cannot append ${target} to ${element}`\n    }\n  }\n\n  public static relativePosition(element: HTMLElement, target: HTMLElement): void {\n    const elementDimensions = element.offsetParent\n      ? { width: element.offsetWidth, height: element.offsetHeight }\n      : this.getHiddenElementDimensions(element)\n    const targetHeight = target.offsetHeight\n    const targetOffset = target.getBoundingClientRect()\n    const viewport = this.getViewport()\n\n    let top: number\n    let left: number\n\n    if (targetOffset.top + targetHeight + elementDimensions.height > viewport.height) {\n      top = -1 * elementDimensions.height\n      element.style.transformOrigin = 'bottom'\n      if (targetOffset.top + top < 0) {\n        top = -1 * targetOffset.top\n      }\n    } else {\n      top = targetHeight\n      element.style.transformOrigin = 'top'\n    }\n\n    if (elementDimensions.width > viewport.width) {\n      // element wider then viewport and cannot fit on screen (align at left side of viewpoert)\n      left = targetOffset.left * -1\n    } else if (targetOffset.left + elementDimensions.width > viewport.width) {\n      // element wider then viewport but can be fit on screen (align at right side of viewport)\n      left = (targetOffset.left + elementDimensions.width - viewport.width) * -1\n    } else {\n      // element fits on screen (align with target)\n      left = 0\n    }\n\n    element.style.top = top + 'px'\n    element.style.left = left + 'px'\n  }\n\n  public static absolutePosition(element: HTMLElement, target: HTMLElement): void {\n    const elementDimensions = element.offsetParent\n      ? { width: element.offsetWidth, height: element.offsetHeight }\n      : this.getHiddenElementDimensions(element)\n\n    const elementOuterHeight = elementDimensions.height\n    const elementOuterWidth = elementDimensions.width\n\n    const targetOuterHeight = target.offsetHeight\n    const targetOuterWidth = target.offsetWidth\n    const targetOffset = target.getBoundingClientRect()\n\n    const windowScrollTop = this.getWindowScrollTop()\n    const windowScrollLeft = this.getWindowScrollLeft()\n\n    const viewport = this.getViewport()\n\n    let top: number\n    let left: number\n\n    if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {\n      top = targetOffset.top + windowScrollTop - elementOuterHeight\n      element.style.transformOrigin = 'bottom'\n\n      if (top < 0) {\n        top = windowScrollTop\n      }\n    } else {\n      top = targetOuterHeight + targetOffset.top + windowScrollTop\n      element.style.transformOrigin = 'top'\n    }\n\n    if (targetOffset.left + elementOuterWidth > viewport.width) {\n      left = Math.max(\n        0,\n        targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth\n      )\n    } else {\n      left = targetOffset.left + windowScrollTop\n    }\n\n    element.style.top = top + 'px'\n    element.style.left = left + 'px'\n  }\n\n  public static getHiddenElementDimensions(element: HTMLElement): IDimensions {\n    const dimensions: IDimensions = {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n    }\n\n    element.style.display = 'none'\n    element.style.visibility = 'visibility'\n\n    return dimensions\n  }\n\n  public static getWindowScrollTop(): number {\n    const doc = document.documentElement\n    return (window.scrollY || doc.scrollTop) - (doc.clientLeft - 0)\n  }\n\n  public static getWindowScrollLeft(): number {\n    const doc = document.documentElement\n    return (window.scrollX || doc.scrollLeft) - (doc.clientLeft || 0)\n  }\n\n  public static getViewport(): IViewport {\n    const width =\n      window.innerWidth ||\n      document.documentElement.clientWidth ||\n      document.getElementsByTagName('body')[0].clientWidth\n\n    const height =\n      window.innerHeight ||\n      document.documentElement.clientHeight ||\n      document.getElementsByTagName('body')[0].clientHeight\n\n    return { width, height }\n  }\n\n  public static getOffset(el: HTMLElement): IOffset {\n    const { pageXOffset, pageYOffset } = window\n    const { documentElement, body } = document\n    const rect = el.getBoundingClientRect()\n\n    return {\n      top: rect.top + (pageYOffset || documentElement.scrollTop || body.scrollTop || 0),\n      left:\n        rect.left + (pageXOffset || documentElement.scrollLeft || body.scrollLeft || 0),\n    }\n  }\n\n  public static addClass(element: HTMLElement, className: string): void {\n    if (element.classList) {\n      element.classList.add(className)\n    } else {\n      element.className += ' ' + className\n    }\n  }\n\n  public static isIOS(): boolean {\n    return /iPad|iPhone|iPod/.test(navigator.userAgent)\n  }\n\n  public static isTouchDevice(): boolean {\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n  }\n\n  public static findSingleElement(\n    element: HTMLElement,\n    selector: string\n  ): HTMLElement | HTMLDivElement | null {\n    if (element) {\n      return element.querySelector(selector)\n    }\n\n    return null\n  }\n\n  public static getScrollableParents(element: HTMLElement | null): HTMLElement[] {\n    const scrollableParents = []\n\n    if (element) {\n      const parents = this.getParents(element)\n      const overflowRegex = /(auto|scroll)/\n      const overflowCheck = (node: HTMLElement) => {\n        const styleDeclaration = window['getComputedStyle'](node, null)\n        return (\n          overflowRegex.test(styleDeclaration.getPropertyValue('overflow')) ||\n          overflowRegex.test(styleDeclaration.getPropertyValue('overflowX')) ||\n          overflowRegex.test(styleDeclaration.getPropertyValue('overflowY'))\n        )\n      }\n\n      for (const parent of parents) {\n        const scrollSelectors = parent.nodeType === 1 && parent.dataset['scrollselectors']\n        if (scrollSelectors) {\n          const selectors = scrollSelectors.split(',')\n          for (const selector of selectors) {\n            const el = this.findSingleElement(parent, selector)\n            if (el && overflowCheck(el)) {\n              scrollableParents.push(el)\n            }\n          }\n        }\n\n        if (parent.nodeType !== 9 && overflowCheck(parent)) {\n          scrollableParents.push(parent)\n        }\n      }\n    }\n\n    return scrollableParents\n  }\n\n  public static getParents(\n    element: HTMLElement,\n    parents: HTMLElement[] = []\n  ): HTMLElement[] {\n    return element['parentElement'] === null\n      ? parents\n      : this.getParents(element.parentElement, parents.concat([element.parentElement]))\n  }\n\n  public static hasClass(element: HTMLElement, className: string): boolean {\n    if (element.classList) {\n      return element.classList.contains(className)\n    } else {\n      return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)\n    }\n  }\n\n  public static removeClass(element: HTMLElement, className: string): void {\n    if (element.classList) {\n      element.classList.remove(className)\n    } else {\n      element.className = element.className.replace(\n        new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'),\n        ' '\n      )\n    }\n  }\n\n  public static setAttribute(element: HTMLElement, name: string, value: string): void {\n    element.setAttribute(name, value)\n  }\n}\n",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IEvents",
            "id": "interface-IEvents-e800b8bf2d0cecdb4009dd7bb561d4dd117f326e98caebf73e947d89e2bdccbec7fe3ef76b11f1547dd24444b9b05b061924116e27c284318cff4ff82b344d70",
            "file": "src/app/modules/user/services/user.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { environment } from './../../../../environments/environment'\n\ninterface IEvents {\n  title: string\n  description: string\n  date: Date\n}\ninterface ISocialMedias {\n  facebook: string\n  instagram: string\n  linkedin: string\n  twitter: string\n}\n\ninterface IAddress {\n  number: number\n  street: string\n  state: string\n  city: string\n  cep: string\n}\n\ninterface IContact {\n  phone: string\n  address: IAddress\n}\n\ninterface IHistory {\n  lastVisit: Date\n}\n\nexport interface IProfile {\n  name: string\n  age: number\n  gender: 'MALE' | 'FEMALE'\n  profileBackgroundImage: string\n  photo: string\n  description: string\n  contact: IContact\n  socialMedias: ISocialMedias\n  events: IEvents[]\n  healthProblems: string[]\n  status: 'APPROVED' | 'PENDING'\n  history: IHistory[]\n}\n\nexport interface IMe {\n  name: string\n  email: string\n  photo: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  getProfile(): Observable<IProfile> {\n    return this.http.get<IProfile>(`${environment.BASE_URL}/user/profile`)\n  }\n\n  getMe(): Observable<IMe> {\n    return this.http.get<IMe>(`${environment.BASE_URL}/user/me`)\n  }\n}\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IHeaderCheckboxEvent",
            "id": "interface-IHeaderCheckboxEvent-b596d4e1a18bd303b7a19759ca559662e6015ccb0bf1c3820ff2e4c68444365016c671c9d893c1c9d139096710090995a4bca6ef0a6d97b11f959ce1b4540239",
            "file": "src/app/components/table/select.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core'\n\nimport { DataService } from './data.service'\nimport { ObjectUtils } from 'src/app/common/object-utils/object-utils'\nimport { TableService } from './table.service'\n\ninterface IRowSelectEvent {\n  originalEvent: Event\n  index: number\n  data: any\n  type: 'checkbox'\n}\n\nexport interface IHeaderCheckboxEvent {\n  originalEvent: Event\n  checked: boolean\n}\n\n@Directive({\n  selector: '[hcSelect]',\n})\nexport class SelectDirective implements OnChanges {\n  private _selectAll: boolean | null = null\n\n  private _selection: any\n  private _deselection: any\n\n  selectionKeys: any = {}\n  deselectionKeys: any = {}\n\n  preventSelectionSetterPropagation!: boolean\n\n  @Input() dataKey?: string\n  @Input() rowSelectable?: any\n  @Input() stateKey?: string\n  @Input() selectionPageOnly?: boolean\n  @Input() compareSelectionBy = 'deepEquals'\n\n  @Input() get selection(): any {\n    return this._selection\n  }\n\n  set selection(val: any) {\n    this._selection = val\n  }\n\n  @Input() get deselection(): any {\n    return this._deselection\n  }\n\n  set deselection(val: any) {\n    this._deselection = val\n  }\n\n  @Input() get selectAll(): boolean | null {\n    return this._selectAll\n  }\n\n  set selectAll(val: boolean | null) {\n    this._selectAll = val\n  }\n\n  @Output() selectionChange = new EventEmitter()\n  @Output() deselectionChange = new EventEmitter<any>()\n  @Output() headerCheckboxToggleEvent = new EventEmitter<IHeaderCheckboxEvent>()\n  @Output() rowUnselectEvent = new EventEmitter<IRowSelectEvent>()\n  @Output() rowSelectEvent = new EventEmitter<IRowSelectEvent>()\n  @Output() selectAllChange = new EventEmitter<IHeaderCheckboxEvent>()\n\n  constructor(private tableService: TableService, public data: DataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['selection']) {\n      this.selection = changes['selection'].currentValue\n\n      if (!this.preventSelectionSetterPropagation) {\n        this.updateSelectionKeys()\n        this.tableService.onSelectionChange()\n      }\n\n      this.preventSelectionSetterPropagation = false\n    }\n\n    if (changes['selectAll']) {\n      this.selectAll = changes['selectAll'].currentValue\n\n      if (!this.preventSelectionSetterPropagation || !this.selectAll) {\n        setTimeout(() => {\n          this.deselection = []\n          this.selection = []\n          this.selectionChange.emit(this.selection)\n          this.deselectionChange.emit(this.deselection)\n          this.tableService.onSelectionChange()\n        })\n      }\n\n      this.preventSelectionSetterPropagation = false\n    }\n  }\n\n  isRowSelectable(data: any, index: number): boolean {\n    if (this.rowSelectable && !this.rowSelectable({ data, index })) {\n      return false\n    }\n\n    return true\n  }\n\n  isSelected(rowData: any): boolean {\n    if (rowData && this.selection) {\n      if (this.dataKey) {\n        return (\n          this.selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !==\n          undefined\n        )\n      } else {\n        if (this.selection instanceof Array) {\n          return this.findIndexInSelection(rowData, this.selection) > -1\n        } else {\n          return this.equals(rowData, this.selection)\n        }\n      }\n    }\n\n    return false\n  }\n\n  isDeselected(rowData: any): boolean {\n    if (rowData && this.deselection) {\n      if (this.dataKey) {\n        return (\n          this.deselectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !==\n          undefined\n        )\n      } else {\n        if (this.deselection instanceof Array) {\n          return this.findIndexInSelection(rowData, this.deselection) > -1\n        } else {\n          return this.equals(rowData, this.deselection)\n        }\n      }\n    }\n\n    return false\n  }\n\n  findIndexInSelection(rowData: any, selectionOrDeselection: any) {\n    let index = -1\n    if (selectionOrDeselection && selectionOrDeselection.length) {\n      for (let i = 0; i < selectionOrDeselection.length; i++) {\n        if (this.equals(rowData, selectionOrDeselection[i])) {\n          index = i\n          break\n        }\n      }\n    }\n\n    return index\n  }\n\n  equals(data1: any, data2: any) {\n    return this.compareSelectionBy === 'equals'\n      ? data1 === data2\n      : ObjectUtils.equals(data1, data2, this.dataKey)\n  }\n\n  private verifySelectionOrDesectionAndUpdateKeys(\n    selectKeys: 'selectionKeys' | 'deselectionKeys',\n    selectionOrDeselection: 'selection' | 'deselection'\n  ) {\n    this[selectKeys] = {}\n    if (Array.isArray(this[selectionOrDeselection])) {\n      for (const data of this[selectionOrDeselection]) {\n        this[selectKeys][String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1\n      }\n    } else {\n      this[selectKeys][\n        String(ObjectUtils.resolveFieldData(this[selectionOrDeselection], this.dataKey))\n      ] = 1\n    }\n  }\n\n  updateSelectionKeys() {\n    if (this.dataKey && this.selection?.length !== null && !this.selectAll) {\n      this.verifySelectionOrDesectionAndUpdateKeys('selectionKeys', 'selection')\n    } else if (this.dataKey && this.deselection?.length !== null) {\n      this.verifySelectionOrDesectionAndUpdateKeys('deselectionKeys', 'deselection')\n    }\n  }\n\n  toggleRowsWithCheckbox(event: Event, check: boolean) {\n    if (this.selectAll === true) {\n      this.deselectAllWithSelectAllTrue(event, check)\n    } else {\n      const data = this.selectionPageOnly\n        ? this.data.dataToRender(this.data.processedData)\n        : this.data.processedData\n\n      let selection =\n        this.selectionPageOnly && this.selection\n          ? this.selection.filter((s: any) => !data.some((d: any) => this.equals(s, d)))\n          : []\n\n      if (check) {\n        selection = [...selection, ...data]\n        selection = this.rowSelectable\n          ? selection.filter((data: any, index: number) =>\n              this.rowSelectable({ data, index })\n            )\n          : selection\n      }\n\n      this.selection = selection\n      this.preventSelectionSetterPropagation = true\n      this.updateSelectionKeys()\n      this.selectionChange.emit(this.selection)\n      this.tableService.onSelectionChange()\n      this.headerCheckboxToggleEvent.emit({ originalEvent: event, checked: check })\n    }\n  }\n\n  private deselectAllWithSelectAllTrue(event: Event, check: boolean) {\n    const data = this.data.processedData\n    let deselection: any[] = []\n\n    if (!check) {\n      deselection = [...this.deselection, ...data]\n      deselection = this.rowSelectable\n        ? deselection.filter((data: any, index: number) =>\n            this.rowSelectable({ data, index })\n          )\n        : deselection\n    } else {\n      deselection = this.deselection.filter(\n        (s: any) => !data.some((d: any) => this.equals(s, d))\n      )\n    }\n\n    this.deselection = deselection\n    this.preventSelectionSetterPropagation = true\n    this.updateSelectionKeys()\n    this.deselectionChange.emit(this.deselection)\n    this.tableService.onSelectionChange()\n    this.headerCheckboxToggleEvent.emit({ originalEvent: event, checked: check })\n  }\n\n  toggleRowWithCheckbox(event: { originalEvent: Event; rowIndex: number }, rowData: any) {\n    if (!this.selectAll) {\n      this.selectRowWithCheckbox(event, rowData)\n    } else {\n      this.deselectRowWithCheckbox(event, rowData)\n    }\n  }\n\n  private selectRowWithCheckbox(\n    event: { originalEvent: Event; rowIndex: number },\n    rowData: any\n  ) {\n    this.selection = this.selection || []\n    const selected = this.isSelected(rowData)\n\n    const dataKeyValue = this.dataKey\n      ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey))\n      : null\n\n    this.preventSelectionSetterPropagation = true\n\n    if (selected) {\n      const selectionIndex = this.findIndexInSelection(rowData, this.selection)\n      this.selection = this.selection.filter((_: any, i: number) => i != selectionIndex)\n      this.selectionChange.emit(this.selection)\n\n      if (dataKeyValue) {\n        delete this.selectionKeys[dataKeyValue]\n      }\n    } else {\n      if (!this.isRowSelectable(rowData, event.rowIndex)) {\n        return\n      }\n\n      this.selection = this.selection ? [...this.selection, rowData] : [rowData]\n\n      this.selectionChange.emit(this.selection)\n\n      if (dataKeyValue) {\n        this.selectionKeys[dataKeyValue] = 1\n      }\n    }\n\n    this.tableService.onSelectionChange()\n  }\n\n  private deselectRowWithCheckbox(\n    event: { originalEvent: Event; rowIndex: number },\n    rowData: any\n  ) {\n    this.deselection = this.deselection || []\n    const deselected = this.isDeselected(rowData)\n\n    const dataKeyValue = this.dataKey\n      ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey))\n      : null\n\n    this.preventSelectionSetterPropagation = true\n\n    if (deselected) {\n      const selectionIndex = this.findIndexInSelection(rowData, this.deselection)\n      this.deselection = this.deselection.filter(\n        (_: any, i: number) => i != selectionIndex\n      )\n      this.deselectionChange.emit(this.deselection)\n\n      if (dataKeyValue) {\n        delete this.deselectionKeys[dataKeyValue]\n      }\n    } else {\n      if (!this.isRowSelectable(rowData, event.rowIndex)) {\n        return\n      }\n\n      this.deselection = this.deselection ? [...this.deselection, rowData] : [rowData]\n\n      this.deselectionChange.emit(this.deselection)\n\n      if (dataKeyValue) {\n        this.deselectionKeys[dataKeyValue] = 1\n      }\n    }\n\n    this.tableService.onSelectionChange()\n  }\n}\n",
            "properties": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "originalEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IHistory",
            "id": "interface-IHistory-e800b8bf2d0cecdb4009dd7bb561d4dd117f326e98caebf73e947d89e2bdccbec7fe3ef76b11f1547dd24444b9b05b061924116e27c284318cff4ff82b344d70",
            "file": "src/app/modules/user/services/user.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { environment } from './../../../../environments/environment'\n\ninterface IEvents {\n  title: string\n  description: string\n  date: Date\n}\ninterface ISocialMedias {\n  facebook: string\n  instagram: string\n  linkedin: string\n  twitter: string\n}\n\ninterface IAddress {\n  number: number\n  street: string\n  state: string\n  city: string\n  cep: string\n}\n\ninterface IContact {\n  phone: string\n  address: IAddress\n}\n\ninterface IHistory {\n  lastVisit: Date\n}\n\nexport interface IProfile {\n  name: string\n  age: number\n  gender: 'MALE' | 'FEMALE'\n  profileBackgroundImage: string\n  photo: string\n  description: string\n  contact: IContact\n  socialMedias: ISocialMedias\n  events: IEvents[]\n  healthProblems: string[]\n  status: 'APPROVED' | 'PENDING'\n  history: IHistory[]\n}\n\nexport interface IMe {\n  name: string\n  email: string\n  photo: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  getProfile(): Observable<IProfile> {\n    return this.http.get<IProfile>(`${environment.BASE_URL}/user/profile`)\n  }\n\n  getMe(): Observable<IMe> {\n    return this.http.get<IMe>(`${environment.BASE_URL}/user/me`)\n  }\n}\n",
            "properties": [
                {
                    "name": "lastVisit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IIntroduction",
            "id": "interface-IIntroduction-59ef4c6cdb4c96f2e1f98731f037d4893ab968193d21245bc032f836ff3ed75a4fdf4085c6362af0a78cb97688dfbfc87ba852e9c973cdaaae01befff449b180",
            "file": "src/app/modules/dashboard/dashboard.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { ILastPayments, PaymentsService } from '../../services/payments/payments.service'\n\nimport { AppointmentsService } from '../appointments/appointments.service'\nimport { IColumn } from './../../components/table/table.component'\nimport { ILastPatients } from './../appointments/appointments.service'\nimport { ITimelineEventsAndMettings } from './components/timeline-events-and-meetings/timeline-events-and-meetings.component'\nimport { TableService } from '../../components/table/table.service'\n\ninterface IIntroduction {\n  title: string\n  description: string\n}\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: 'dashboard.component.html',\n  styleUrls: ['dashboard.component.scss'],\n  providers: [TableService],\n})\nexport class DashboardComponent implements OnInit {\n  informationsIntroductions: IIntroduction[] = [\n    {\n      title: 'Address',\n      description: '795 Folsom Ave, Suite 600 San Francisco, CADGE 94107',\n    },\n    {\n      title: 'Email',\n      description: 'denta@gmail.com',\n    },\n    {\n      title: 'Phone',\n      description: '0126596452',\n    },\n  ]\n\n  events: ITimelineEventsAndMettings[] = [\n    {\n      status: 'New prescription',\n      date: new Date(),\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'monitor_heart',\n      color: '#FAC032',\n    },\n    {\n      status: 'Appointment',\n      date: new Date(),\n      description:\n        'Esse sanctus ea nec. An nam nonumy veritus theophrastus. No laoreet intellegebat pro, ea omnes graecis eloquentiam quo.',\n      icon: 'local_hospital',\n      color: '#FF6760',\n    },\n    {\n      status: 'Medication',\n      date: new Date(),\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur nam nisi veniam.',\n      icon: 'vaccines',\n      color: '#558EFF',\n    },\n    {\n      status: 'Operation',\n      date: new Date(),\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'healing',\n      color: '#16D090',\n    },\n  ]\n\n  meetings: ITimelineEventsAndMettings[] = [\n    {\n      status: 'New patient',\n      date: new Date(),\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'personal_injury',\n      color: '#E74F48',\n    },\n    {\n      status: 'Examination',\n      date: new Date(),\n      description:\n        'Esse sanctus ea nec. An nam nonumy veritus theophrastus. No laoreet intellegebat pro, ea omnes graecis eloquentiam quo.',\n      icon: 'radiology',\n      color: '#EFAD0A',\n    },\n    {\n      status: 'Medication',\n      date: new Date(),\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur nam nisi veniam.',\n      icon: 'vaccines',\n      color: '#558EFF',\n    },\n    {\n      status: 'Appointment',\n      date: new Date(),\n      description:\n        'Esse sanctus ea nec. An nam nonumy veritus theophrastus. No laoreet intellegebat pro, ea omnes graecis eloquentiam quo.',\n      icon: 'local_hospital',\n      color: '#FF6760',\n    },\n  ]\n\n  tableLastPatients: IColumn[] = [\n    {\n      header: 'Name',\n      field: 'name',\n    },\n    {\n      header: 'Visit Time',\n      field: 'visitTime',\n    },\n    {\n      header: 'Date',\n      field: 'date',\n    },\n  ]\n\n  columnsLastPayments: IColumn[] = [\n    {\n      header: 'Date',\n      field: 'date',\n    },\n    {\n      header: 'Recipient',\n      field: 'recipient',\n    },\n    {\n      header: 'Amount',\n      field: 'amount',\n    },\n  ]\n\n  lastPayments: ILastPayments[] = []\n  lastPatients: ILastPatients[] = []\n\n  constructor(\n    private appointmentsService: AppointmentsService,\n    private paymentsService: PaymentsService\n  ) {}\n\n  ngOnInit(): void {\n    this.getLastPatients()\n    this.getLastPayments()\n  }\n\n  getLastPatients() {\n    this.appointmentsService.getLastPatients().subscribe((patients) => {\n      this.lastPatients = patients\n    })\n  }\n\n  getLastPayments() {\n    this.paymentsService.getLastPayments().subscribe((payments) => {\n      this.lastPayments = payments\n    })\n  }\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IInvoice",
            "id": "interface-IInvoice-48f789d24334b22f644a411c2868a5f09172a2eb4a26a0d2a12e72c10c918e06af4fc42eaa836fd9192c46dfe6a00e43b438614ac4e57e5743f0318a85e9b1a9",
            "file": "src/app/modules/invoices/invoices.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { CurrencyPipe, DatePipe } from '@angular/common'\n\ninterface IInvoice {\n  company: string\n  date: string | null\n  recipient: string\n  status: string\n  amount: string | null\n}\n\nconst RESPONSE = [\n  {\n    company: 'Sterling Cooper Ltd.',\n    date: new Date().toISOString(),\n    recipient: 'Leslie Alexander',\n    status: 'PAID',\n    amount: 293.01,\n  },\n  {\n    company: 'Acme Co.',\n    date: new Date().toISOString(),\n    recipient: 'Ronald Richards',\n    status: 'SCHEDULED',\n    amount: 596.28,\n  },\n  {\n    company: 'Sirius Cybernetics Co.',\n    date: new Date().toISOString(),\n    recipient: 'Jane Cooper',\n    status: 'UNPAID',\n    amount: 219.78,\n  },\n]\n\n@Component({\n  selector: 'app-invoices',\n  templateUrl: './invoices.component.html',\n  styleUrls: ['./invoices.component.scss'],\n})\nexport class InvoicesComponent implements OnInit {\n  hcDtOptions!: any\n  invoices: IInvoice[] = []\n\n  constructor(private datePipe: DatePipe, private currencyPipe: CurrencyPipe) {}\n\n  ngOnInit(): void {\n    this.invoices = RESPONSE.map((row) => ({\n      company: row.company,\n      date: this.datePipe.transform(row.date, 'dd/MM/yyyy'),\n      recipient: row.recipient,\n      status: row.status,\n      amount: this.currencyPipe.transform(row.amount, 'BRL'),\n    }))\n\n    this.hcDtOptions = {\n      columns: [\n        {\n          title: 'Company',\n          data: 'company',\n        },\n        {\n          title: 'Date',\n          data: 'date',\n          textColor: '#A0A4A8',\n        },\n        {\n          title: 'Recipient',\n          data: 'recipient',\n        },\n        {\n          title: 'Status',\n          data: 'status',\n        },\n        {\n          title: 'Amount',\n          data: 'amount',\n        },\n      ],\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "company",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "recipient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IItemNotification",
            "id": "interface-IItemNotification-090cd0a7ee6841a410e7b67e432c99dc2d35e9826ece9472397f2b640022dfdca7a898c681436ce78c1dee296b65b7b2aece383d9505c46407cd2f3c1b843009",
            "file": "src/app/modules/home/components/dropdown-notifications/dropdown-notifications.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nexport interface IItemNotification {\n  title: string\n  description: string\n  icon: string\n  color: string\n  timeAgo: string\n}\n\n@Component({\n  selector: 'hc-dropdown-notifications',\n  template: `\n    <div>\n      <header class=\"hc-notifications-header\">\n        <h6>Notifications</h6>\n        <p class=\"small2\">{{ reports }} notifications</p>\n      </header>\n      <div>\n        <div class=\"hc-notification-item\" *ngFor=\"let notification of notifications\">\n          <div class=\"hc-wrapper-icon-and-description\">\n            <hc-icon\n              [icon]=\"notification.icon\"\n              size=\"large\"\n              theme=\"contained\"\n              [color]=\"notification.color\"\n            ></hc-icon>\n            <div class=\"hc-notication-title-and-description\">\n              <div class=\"subtitle1 hc-notification-title\">{{ notification.title }}</div>\n              <div class=\"small2 hc-notification-description\">\n                {{ notification.description }}\n              </div>\n            </div>\n          </div>\n          <div>\n            <div class=\"hc-notification-badge small2\">{{ notification.timeAgo }}</div>\n          </div>\n        </div>\n      </div>\n      <footer class=\"hc-notification-footer\">\n        <hc-button theme=\"text\" color=\"primary\">View all</hc-button>\n      </footer>\n    </div>\n  `,\n  styles: [\n    `\n      .hc-notifications-header {\n        background: linear-gradient(90deg, var(--primary-dark), var(--primary-default));\n        color: var(--neutral-white);\n        padding: 1.5rem;\n        border-top-left-radius: 0.5rem;\n        border-top-right-radius: 0.5rem;\n        display: flex;\n        align-items: flex-end;\n\n        p {\n          margin-left: 0.5rem;\n          line-height: 18px;\n        }\n      }\n\n      .hc-notification-item {\n        padding: 0.75rem 1.5rem 0.75rem 1.5rem;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n\n        &:first-child {\n          padding-top: 1.5rem;\n        }\n\n        &:last-child {\n          padding-bottom: 1.5rem;\n        }\n      }\n\n      .hc-wrapper-icon-and-description {\n        display: flex;\n        align-items: center;\n      }\n\n      .hc-notication-title-and-description {\n        margin-left: 0.5rem;\n      }\n\n      .hc-notification-description {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        max-width: 200px;\n        color: var(--neutral-gray);\n      }\n\n      .hc-notification-badge {\n        color: var(--neutral-gray-dark);\n        background-color: var(--neutral-divider);\n        padding: 4px 8px;\n        border-radius: 4px;\n      }\n\n      .hc-notification-title {\n        cursor: pointer;\n\n        &:hover {\n          color: var(--primary-default);\n        }\n      }\n\n      .hc-notification-footer {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: 0.5rem;\n        border-top: 1px solid var(--neutral-divider);\n      }\n    `,\n  ],\n})\nexport class DropdownNotificationsComponent {\n  @Input() reports!: number\n  @Input() notifications!: IItemNotification[]\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "timeAgo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILastPatients",
            "id": "interface-ILastPatients-95d28a950b3bdafaaa2a97ae12c8962c42d7e173bbb62784e923e8adfd48e498f67703329890bced35ea4f7711d31a5a8f7357fb825afa93c582b04536bf2977",
            "file": "src/app/modules/appointments/appointments.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable, map } from 'rxjs'\n\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { environment } from '../../../environments/environment'\n\nexport interface ILastPatients {\n  id: string\n  name: string\n  photo: string\n  visitTime: Date\n  date: Date\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppointmentsService {\n  constructor(private http: HttpClient) {}\n\n  getLastPatients(): Observable<ILastPatients[]> {\n    return this.http.get<ILastPatients[]>(`${environment.BASE_URL}/last-patients`).pipe(\n      map((patients) => {\n        return patients.map((patient) => ({\n          id: patient.id,\n          name: patient.name,\n          photo: patient.photo,\n          visitTime: patient.visitTime,\n          date: patient.date,\n        }))\n      })\n    )\n  }\n}\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "photo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "visitTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILastPayments",
            "id": "interface-ILastPayments-3d55ff46ff488b96e7aed0338dbe37f25a280df51389417feb1646f68546c8eda567fe9e3c5b160016ab80b971c5d4bc6f43d542ee73a865beb40ec996366ef6",
            "file": "src/app/services/payments/payments.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { environment } from '../../../environments/environment'\n\nexport interface ILastPayments {\n  id: string\n  recipient: string\n  amount: number\n  date: Date\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentsService {\n  constructor(private http: HttpClient) {}\n\n  getLastPayments(): Observable<ILastPayments[]> {\n    return this.http.get<ILastPayments[]>(\n      `${environment.BASE_URL}/payments/last-payments`\n    )\n  }\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "recipient",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILoginUserDto",
            "id": "interface-ILoginUserDto-918e75f2838f91fbc972b29f952f0b56d5ee3655b4a13735e18eaddb18de1827055cd34e1bb97a761b20ece4b6ab37891f05a23fcd8c961c7bbf84776f3d1f68",
            "file": "src/app/modules/authentication/authentication.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Router } from '@angular/router'\nimport { environment } from './../../../environments/environment'\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { LocalStorageService } from 'src/app/common/local-storage/local-storage.service'\n\nexport interface ILoginUserDto {\n  login: string\n  password: string\n  rememberMe: boolean\n}\n\nexport interface IToken {\n  token: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private localStorage: LocalStorageService\n  ) {}\n\n  login(user: ILoginUserDto): void {\n    this.http.post<IToken>(`${environment.BASE_URL}/login`, user).subscribe({\n      next: (token: IToken) => {\n        this.localStorage.set('HC_TOKEN', token)\n        this.router.navigate(['home'])\n      },\n    })\n  }\n\n  logout(): void {\n    this.localStorage.remove('HC_TOKEN')\n    this.router.navigate(['/auth/login'])\n  }\n}\n",
            "properties": [
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "rememberMe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMe",
            "id": "interface-IMe-e800b8bf2d0cecdb4009dd7bb561d4dd117f326e98caebf73e947d89e2bdccbec7fe3ef76b11f1547dd24444b9b05b061924116e27c284318cff4ff82b344d70",
            "file": "src/app/modules/user/services/user.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { environment } from './../../../../environments/environment'\n\ninterface IEvents {\n  title: string\n  description: string\n  date: Date\n}\ninterface ISocialMedias {\n  facebook: string\n  instagram: string\n  linkedin: string\n  twitter: string\n}\n\ninterface IAddress {\n  number: number\n  street: string\n  state: string\n  city: string\n  cep: string\n}\n\ninterface IContact {\n  phone: string\n  address: IAddress\n}\n\ninterface IHistory {\n  lastVisit: Date\n}\n\nexport interface IProfile {\n  name: string\n  age: number\n  gender: 'MALE' | 'FEMALE'\n  profileBackgroundImage: string\n  photo: string\n  description: string\n  contact: IContact\n  socialMedias: ISocialMedias\n  events: IEvents[]\n  healthProblems: string[]\n  status: 'APPROVED' | 'PENDING'\n  history: IHistory[]\n}\n\nexport interface IMe {\n  name: string\n  email: string\n  photo: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  getProfile(): Observable<IProfile> {\n    return this.http.get<IProfile>(`${environment.BASE_URL}/user/profile`)\n  }\n\n  getMe(): Observable<IMe> {\n    return this.http.get<IMe>(`${environment.BASE_URL}/user/me`)\n  }\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "photo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMenuItem",
            "id": "interface-IMenuItem-a2efbc0040be32354eaf0d4dd9dd7efe67623c6d7a2e2ea8882fac8f19ade274656472801b1278aa3e2710bb1fc0f6eabda1e89da42329e18fad847bb961a316",
            "file": "src/app/components/menu/menu-item.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nimport { IsActiveMatchOptions } from '@angular/router'\nimport { MenuComponent } from './menu.component'\n\ninterface ICommand {\n  originalEvent: Event\n  item: IMenuItem\n}\n\nexport interface IMenuItem {\n  automationId?: any\n  disabled?: boolean\n  command?: (object: ICommand) => void\n  items?: IMenuItem[]\n  icon?: string\n  label?: string\n  queryParams?: { [key: string]: string | number }\n  routerLink?: any\n  routerLinkActiveOptions?: IsActiveMatchOptions\n  separator?: boolean\n  url?: string\n}\n\n@Component({\n  selector: '[hc-menu-item]',\n  template: `\n    <a\n      *ngIf=\"item && !item?.routerLink\"\n      class=\"hc-menu-item-link subtitle2\"\n      role=\"menuitem\"\n      (click)=\"menu.itemClick($event, item)\"\n    >\n      <span *ngIf=\"item.icon\" class=\"material-symbols-outlined hc-menu-item-icon\">\n        {{ item.icon }}\n      </span>\n      <span class=\"hc-menu-item-text\">{{ item.label }}</span>\n    </a>\n    <a\n      *ngIf=\"item && item.routerLink\"\n      class=\"hc-menu-item-link subtitle2\"\n      role=\"menuitem\"\n      routerLinkActive=\"hc-menu-item-link-active\"\n      [routerLink]=\"item.routerLink\"\n      [queryParams]=\"item.queryParams\"\n      [routerLinkActiveOptions]=\"item.routerLinkActiveOptions || { exact: false }\"\n    >\n      <span *ngIf=\"item?.icon\" class=\"material-symbols-outlined hc-menu-item-icon\">\n        {{ item.icon }}\n      </span>\n      <span class=\"hc-menu-item-text\">{{ item.label }}</span>\n    </a>\n  `,\n  styles: [\n    `\n      .hc-menu-item-link {\n        text-decoration: none;\n        color: var(--neutral-gray-dark);\n        padding: 0.75rem 1.25rem;\n        display: flex;\n        align-items: center;\n        font-size: 1rem;\n        border-radius: 0.5rem;\n        cursor: pointer;\n\n        .hc-menu-item-icon {\n          margin-right: 0.5rem;\n          font-size: 20px;\n          color: var(--neutral-gray-lighter);\n        }\n      }\n\n      .hc-menu-item-link:hover {\n        background-color: var(--primary-lightest);\n        color: var(--primary-default);\n\n        .hc-menu-item-icon {\n          color: var(--primary-default);\n        }\n      }\n\n      .hc-menu-item-link-active {\n        background-color: var(--primary-lightest);\n        color: var(--primary-default);\n\n        .hc-menu-item-icon {\n          color: var(--primary-default);\n        }\n      }\n    `,\n  ],\n})\nexport class MenuItemComponent {\n  @Input('hc-menu-item') item?: IMenuItem\n\n  menu: MenuComponent\n\n  constructor(public menuComponent: MenuComponent) {\n    this.menu = menuComponent\n  }\n}\n",
            "properties": [
                {
                    "name": "automationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "routerLinkActiveOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IsActiveMatchOptions",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "separator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMessage",
            "id": "interface-IMessage-e36a9a783d57438122e8b7da32e29a9de5b3a641a1e0073978b8f34c9f51c9538ce2a603a9a07c4945ad1e95de8bb446a801f322c290e5af1e2eaf8c2e6235f2",
            "file": "src/app/common/overlay/overlay.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Subject } from 'rxjs'\n\nexport interface IMessage {\n  severity?: string\n  summary?: string\n  detail?: string | number\n  key?: string\n  life?: number\n  sticky?: boolean\n  closable?: boolean\n  icon?: string\n  contentStyleClass?: string\n  styleClass?: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OverlayService {\n  private clickSource = new Subject()\n\n  clickObservable = this.clickSource.asObservable()\n\n  add(event: { originalEvent: IMessage | IMessage[]; target: HTMLElement }): void {\n    if (event) {\n      this.clickSource.next(event.originalEvent)\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "closable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "contentStyleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "detail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "life",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "severity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "summary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMessage",
            "id": "interface-IMessage-820ac26388af51604fda4974d78cf9d984f58a6d6c95ab17a3d0c72c32f5be00e32f882e50ccc8d0a75003b40466232c00c835cd23c3c98bbfb6e30c3e78c00d-1",
            "file": "src/app/components/toast/message.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Subject } from 'rxjs'\n\nexport interface IMessage {\n  severity?: 'success' | 'error'\n  detail?: string\n  key?: string\n  closable?: boolean\n  life?: number\n  sticky?: boolean\n}\n\n@Injectable()\nexport class MessageService {\n  private messageSource = new Subject<IMessage | IMessage[]>()\n  private clearSource = new Subject<string>()\n\n  messageObserver = this.messageSource.asObservable()\n  clearObserver = this.clearSource.asObservable()\n\n  add(message: IMessage) {\n    if (message) {\n      this.messageSource.next(message)\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "closable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "detail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "life",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "severity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"success\" | \"error\"",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IMessage-1"
        },
        {
            "name": "IMeta",
            "id": "interface-IMeta-f1a1e1de6dfdfcd1cf470e853461342d312bfd20b4f75075dcb18eb504f2a7f03976f42313c4ed996606b8eaae81d7ba12ba286fadfa36d21bb100afd23a33ac",
            "file": "src/app/models/pagination.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMeta {\n  totalItems: number\n  itemCount: number\n  itemsPerPage: number\n  totalPages: number\n  currentPage: number\n}\n\nexport interface IPagination<T> {\n  items: T[]\n  meta: IMeta\n}\n",
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "itemCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "itemsPerPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IOffset",
            "id": "interface-IOffset-9b9b65c631ce8f4d3bf8e16c3f4b2f7d7b15cc3c6360ac39fe1697b85636b2f4e7bcd9be8b51c42e77795e64a7fd1620f51faaba52d34ec1b91693a4d28ae44d",
            "file": "src/app/common/dom-handler/dom-handler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface IDimensions {\n  width: number\n  height: number\n}\n\ninterface IViewport {\n  width: number\n  height: number\n}\n\nexport interface IOffset {\n  top: number\n  left: number\n}\n\nexport class DomHandler {\n  public static isElement(obj: HTMLElement): boolean {\n    return typeof HTMLElement === 'object'\n      ? obj instanceof HTMLElement\n      : obj &&\n          typeof obj === 'object' &&\n          obj !== null &&\n          (obj as HTMLElement).nodeType === 1 &&\n          typeof (obj as HTMLElement).nodeName === 'string'\n  }\n\n  public static appendChild(element: HTMLElement, target: HTMLElement): void {\n    if (this.isElement(target)) {\n      target.appendChild(element)\n    } else {\n      throw `Cannot append ${target} to ${element}`\n    }\n  }\n\n  public static relativePosition(element: HTMLElement, target: HTMLElement): void {\n    const elementDimensions = element.offsetParent\n      ? { width: element.offsetWidth, height: element.offsetHeight }\n      : this.getHiddenElementDimensions(element)\n    const targetHeight = target.offsetHeight\n    const targetOffset = target.getBoundingClientRect()\n    const viewport = this.getViewport()\n\n    let top: number\n    let left: number\n\n    if (targetOffset.top + targetHeight + elementDimensions.height > viewport.height) {\n      top = -1 * elementDimensions.height\n      element.style.transformOrigin = 'bottom'\n      if (targetOffset.top + top < 0) {\n        top = -1 * targetOffset.top\n      }\n    } else {\n      top = targetHeight\n      element.style.transformOrigin = 'top'\n    }\n\n    if (elementDimensions.width > viewport.width) {\n      // element wider then viewport and cannot fit on screen (align at left side of viewpoert)\n      left = targetOffset.left * -1\n    } else if (targetOffset.left + elementDimensions.width > viewport.width) {\n      // element wider then viewport but can be fit on screen (align at right side of viewport)\n      left = (targetOffset.left + elementDimensions.width - viewport.width) * -1\n    } else {\n      // element fits on screen (align with target)\n      left = 0\n    }\n\n    element.style.top = top + 'px'\n    element.style.left = left + 'px'\n  }\n\n  public static absolutePosition(element: HTMLElement, target: HTMLElement): void {\n    const elementDimensions = element.offsetParent\n      ? { width: element.offsetWidth, height: element.offsetHeight }\n      : this.getHiddenElementDimensions(element)\n\n    const elementOuterHeight = elementDimensions.height\n    const elementOuterWidth = elementDimensions.width\n\n    const targetOuterHeight = target.offsetHeight\n    const targetOuterWidth = target.offsetWidth\n    const targetOffset = target.getBoundingClientRect()\n\n    const windowScrollTop = this.getWindowScrollTop()\n    const windowScrollLeft = this.getWindowScrollLeft()\n\n    const viewport = this.getViewport()\n\n    let top: number\n    let left: number\n\n    if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {\n      top = targetOffset.top + windowScrollTop - elementOuterHeight\n      element.style.transformOrigin = 'bottom'\n\n      if (top < 0) {\n        top = windowScrollTop\n      }\n    } else {\n      top = targetOuterHeight + targetOffset.top + windowScrollTop\n      element.style.transformOrigin = 'top'\n    }\n\n    if (targetOffset.left + elementOuterWidth > viewport.width) {\n      left = Math.max(\n        0,\n        targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth\n      )\n    } else {\n      left = targetOffset.left + windowScrollTop\n    }\n\n    element.style.top = top + 'px'\n    element.style.left = left + 'px'\n  }\n\n  public static getHiddenElementDimensions(element: HTMLElement): IDimensions {\n    const dimensions: IDimensions = {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n    }\n\n    element.style.display = 'none'\n    element.style.visibility = 'visibility'\n\n    return dimensions\n  }\n\n  public static getWindowScrollTop(): number {\n    const doc = document.documentElement\n    return (window.scrollY || doc.scrollTop) - (doc.clientLeft - 0)\n  }\n\n  public static getWindowScrollLeft(): number {\n    const doc = document.documentElement\n    return (window.scrollX || doc.scrollLeft) - (doc.clientLeft || 0)\n  }\n\n  public static getViewport(): IViewport {\n    const width =\n      window.innerWidth ||\n      document.documentElement.clientWidth ||\n      document.getElementsByTagName('body')[0].clientWidth\n\n    const height =\n      window.innerHeight ||\n      document.documentElement.clientHeight ||\n      document.getElementsByTagName('body')[0].clientHeight\n\n    return { width, height }\n  }\n\n  public static getOffset(el: HTMLElement): IOffset {\n    const { pageXOffset, pageYOffset } = window\n    const { documentElement, body } = document\n    const rect = el.getBoundingClientRect()\n\n    return {\n      top: rect.top + (pageYOffset || documentElement.scrollTop || body.scrollTop || 0),\n      left:\n        rect.left + (pageXOffset || documentElement.scrollLeft || body.scrollLeft || 0),\n    }\n  }\n\n  public static addClass(element: HTMLElement, className: string): void {\n    if (element.classList) {\n      element.classList.add(className)\n    } else {\n      element.className += ' ' + className\n    }\n  }\n\n  public static isIOS(): boolean {\n    return /iPad|iPhone|iPod/.test(navigator.userAgent)\n  }\n\n  public static isTouchDevice(): boolean {\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n  }\n\n  public static findSingleElement(\n    element: HTMLElement,\n    selector: string\n  ): HTMLElement | HTMLDivElement | null {\n    if (element) {\n      return element.querySelector(selector)\n    }\n\n    return null\n  }\n\n  public static getScrollableParents(element: HTMLElement | null): HTMLElement[] {\n    const scrollableParents = []\n\n    if (element) {\n      const parents = this.getParents(element)\n      const overflowRegex = /(auto|scroll)/\n      const overflowCheck = (node: HTMLElement) => {\n        const styleDeclaration = window['getComputedStyle'](node, null)\n        return (\n          overflowRegex.test(styleDeclaration.getPropertyValue('overflow')) ||\n          overflowRegex.test(styleDeclaration.getPropertyValue('overflowX')) ||\n          overflowRegex.test(styleDeclaration.getPropertyValue('overflowY'))\n        )\n      }\n\n      for (const parent of parents) {\n        const scrollSelectors = parent.nodeType === 1 && parent.dataset['scrollselectors']\n        if (scrollSelectors) {\n          const selectors = scrollSelectors.split(',')\n          for (const selector of selectors) {\n            const el = this.findSingleElement(parent, selector)\n            if (el && overflowCheck(el)) {\n              scrollableParents.push(el)\n            }\n          }\n        }\n\n        if (parent.nodeType !== 9 && overflowCheck(parent)) {\n          scrollableParents.push(parent)\n        }\n      }\n    }\n\n    return scrollableParents\n  }\n\n  public static getParents(\n    element: HTMLElement,\n    parents: HTMLElement[] = []\n  ): HTMLElement[] {\n    return element['parentElement'] === null\n      ? parents\n      : this.getParents(element.parentElement, parents.concat([element.parentElement]))\n  }\n\n  public static hasClass(element: HTMLElement, className: string): boolean {\n    if (element.classList) {\n      return element.classList.contains(className)\n    } else {\n      return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)\n    }\n  }\n\n  public static removeClass(element: HTMLElement, className: string): void {\n    if (element.classList) {\n      element.classList.remove(className)\n    } else {\n      element.className = element.className.replace(\n        new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'),\n        ' '\n      )\n    }\n  }\n\n  public static setAttribute(element: HTMLElement, name: string, value: string): void {\n    element.setAttribute(name, value)\n  }\n}\n",
            "properties": [
                {
                    "name": "left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IOnClose",
            "id": "interface-IOnClose-39f71cd172e45da441b9825e8849e5882983178979f0afbcec3fc35b365350d19248ac616e43bb0169c70b6ecff24cbd68b47465a1849dc0351a0b8cb6c34b67",
            "file": "src/app/components/toast/toast-item.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core'\nimport { animate, state, style, transition, trigger } from '@angular/animations'\n\nimport { IMessage } from './message.service'\n\nexport interface IOnClose {\n  index: number\n  message: IMessage\n}\n\n@Component({\n  selector: 'hc-toast-item',\n  template: `\n    <div\n      [ngClass]=\"classes\"\n      [@messageState]=\"{\n        value: 'visible',\n        params: {\n          showTransformParams: showTransformOptions,\n          showTransitionParams: showTransitionOptions,\n          hideTransformParams: hideTransformOptions,\n          hideTransitionParams: hideTransitionOptions\n        }\n      }\"\n      (mouseenter)=\"onMouseEnter()\"\n      (mouseleave)=\"onMouseLeave()\"\n    >\n      <div\n        class=\"hc-toast-message-content\"\n        role=\"alert\"\n        aria-live=\"assertive\"\n        aric-atomic=\"true\"\n      >\n        <span class=\"hc-toast-message-icon material-symbols-outlined\">info</span>\n        <div class=\"hc-toast-message-text\">\n          <div class=\"hc-toast-detail subtitle2\">{{ message.detail }}</div>\n        </div>\n        <button\n          type=\"button\"\n          class=\"hc-toast-icon-close\"\n          *ngIf=\"message.closable !== false\"\n          (click)=\"onCloseIconClick($event)\"\n        >\n          <span class=\"material-symbols-outlined\">close</span>\n        </button>\n      </div>\n    </div>\n  `,\n  styleUrls: ['toast.component.scss'],\n  animations: [\n    trigger('messageState', [\n      state(\n        'visible',\n        style({\n          transform: 'translateY(0)',\n          opacity: 1,\n        })\n      ),\n      transition('void => *', [\n        style({ transform: '{{showTransformParams}}', opacity: 0 }),\n        animate('{{showTransitionParams}}'),\n      ]),\n      transition('* => void', [\n        animate(\n          '{{hideTransitionParams}}',\n          style({\n            height: 0,\n            opacity: 0,\n            transform: '{{hideTransformParams}}',\n          })\n        ),\n      ]),\n    ]),\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToastItemComponent implements AfterViewInit, OnDestroy {\n  timeout: NodeJS.Timeout | null = null\n\n  @Input() index!: number\n  @Input() hideTransformOptions!: string\n  @Input() hideTransitionOptions!: string\n  @Input() message!: IMessage\n  @Input() showTransformOptions!: string\n  @Input() showTransitionOptions!: string\n\n  @Output() onClose = new EventEmitter<IOnClose>()\n\n  constructor(public zone: NgZone) {}\n\n  ngAfterViewInit(): void {\n    this.initTimeout()\n  }\n\n  initTimeout() {\n    if (!this.message.sticky) {\n      this.zone.runOutsideAngular(() => {\n        this.timeout = setTimeout(() => {\n          this.onClose.emit({\n            index: this.index,\n            message: this.message,\n          })\n        }, this.message.life || 3000)\n      })\n    }\n  }\n\n  onCloseIconClick(event: Event): void {\n    this.clearTimeout()\n\n    this.onClose.emit({\n      index: this.index,\n      message: this.message,\n    })\n\n    event.preventDefault()\n  }\n\n  clearTimeout() {\n    if (this.timeout) {\n      clearTimeout(this.timeout)\n      this.timeout = null\n    }\n  }\n\n  onMouseEnter(): void {\n    this.clearTimeout()\n  }\n\n  onMouseLeave(): void {\n    this.initTimeout()\n  }\n\n  get classes() {\n    return {\n      [`hc-toast-message-${this.message.severity}`]: true,\n      'hc-toast-message': true,\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.clearTimeout()\n  }\n}\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMessage",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPageChange",
            "id": "interface-IPageChange-c82c7e2ecb522b77d213d8f90622691a3b46f77a8af63e079fd40715cff8176f22bb8eb8d8057bade216659bbed2ed27f44df49e8e969141ff863ea6f8dfdb0f",
            "file": "src/app/components/pagination/pagination.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core'\n\nexport interface IPagination {\n  currentPage: number\n  itemCount: number\n  itemsPerPage: number\n  totalItems: number\n  totalPages: number\n}\n\ninterface IPaginationState {\n  page: number\n  pageCount: number\n  rows: number\n  first: number\n  totalRecords: number\n}\n\nexport interface IPageChange {\n  page: number\n  pageCount: number\n  first: number\n  rows: number\n}\n\n@Component({\n  selector: 'hc-pagination',\n  template: `\n    <div class=\"wrapper-pagination\" aria-label=\"pagination\">\n      <div class=\"wrapper-buttons\">\n        <button\n          [disabled]=\"isFirstPage() || empty()\"\n          (click)=\"changePageToFirst($event)\"\n          aria-label=\"Button First Page\"\n          type=\"button\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">\n            keyboard_double_arrow_left\n          </span>\n        </button>\n        <button\n          [disabled]=\"isFirstPage() || empty()\"\n          (click)=\"changePageToPrev($event)\"\n          aria-label=\"Button Page To Prev\"\n          type=\"button\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">chevron_left</span>\n        </button>\n        <button\n          *ngFor=\"let pageLink of pageLinks\"\n          [ngClass]=\"{ 'hc-highlight-pagination': pageLink - 1 === getPage() }\"\n          (click)=\"onPageLinkClick($event, pageLink - 1)\"\n          [attr.aria-label]=\"'Page ' + pageLink\"\n          type=\"button\"\n        >\n          {{ pageLink }}\n        </button>\n        <button\n          [disabled]=\"isLastPage() || empty()\"\n          (click)=\"changePageToNext($event)\"\n          type=\"button\"\n          aria-label=\"Button Page To Next\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">chevron_right</span>\n        </button>\n        <button\n          [disabled]=\"isLastPage() || empty()\"\n          (click)=\"changePageToLast($event)\"\n          type=\"button\"\n          aria-label=\"Button Last Page\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">\n            keyboard_double_arrow_right\n          </span>\n        </button>\n      </div>\n      <div\n        *ngIf=\"showCurrentPageReport\"\n        class=\"current-report\"\n        aria-label=\"Current Report\"\n      >\n        {{ currentPageReport }}\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .wrapper-pagination {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      .wrapper-buttons {\n        display: flex;\n\n        button:first-child {\n          margin-left: 0;\n        }\n\n        button {\n          margin: 0 2px;\n        }\n      }\n\n      .current-report {\n        font-size: 14px;\n        color: var(--neutral-gray-dark);\n      }\n\n      .hc-highlight-pagination {\n        background-color: var(--primary-default);\n        color: var(--neutral-white);\n        border: 1px solid var(--primary-default);\n      }\n\n      .icon-size {\n        font-size: 18px;\n      }\n\n      button {\n        width: 32px;\n        height: 32px;\n        background-color: var(--neutral-white);\n        color: var(--neutral-black);\n        border: 1px solid var(--neutral-divider);\n        border-radius: 4px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        font-weight: 700;\n\n        &:disabled {\n          color: var(--neutral-divider);\n          cursor: default;\n          opacity: 0.7;\n        }\n      }\n    `,\n  ],\n})\nexport class PaginationComponent implements OnInit, OnChanges {\n  _first = 0\n\n  paginationState!: IPaginationState\n  pageLinks!: number[]\n\n  @Input() pagination?: IPagination\n  @Input() pageLinkSize = 5\n  @Input() rows = 0\n  @Input() totalRecords = 0\n  @Input() showCurrentPageReport!: boolean\n  @Input() currentPageReportTemplate = '{showCurrentPage} of {totalPages}'\n\n  @Output() pageChangeEvent = new EventEmitter<IPageChange>()\n\n  ngOnInit(): void {\n    this.updatePaginationState()\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['totalRecords']) {\n      this.updatePageLinks()\n      this.updatePaginationState()\n    }\n\n    if (changes['rows']) {\n      this.updatePageLinks()\n      this.updatePaginationState()\n    }\n\n    if (changes['pagination']) {\n      if (this.pagination) {\n        this.totalRecords = this.pagination.totalItems\n        this.rows = this.pagination.itemsPerPage\n      }\n\n      this.updatePageLinks()\n      this.updatePaginationState()\n    }\n  }\n\n  @Input() get first(): number {\n    return this._first\n  }\n\n  calculatePageLinkBoundaries(): number[] {\n    const numberOfPages = this.getPageCount()\n    const visiblePages = Math.min(this.pageLinkSize, numberOfPages)\n\n    // calculate range, keep current in middle if necessary\n    let start = Math.max(0, Math.ceil(this.getPage() - visiblePages / 2))\n    const end = Math.min(numberOfPages - 1, start + visiblePages - 1)\n\n    // check when approaching to last page\n    const delta = this.pageLinkSize - (end - start + 1)\n    start = Math.max(0, start - delta)\n\n    return [start, end]\n  }\n\n  updatePageLinks() {\n    this.pageLinks = []\n    let start: number\n    let end: number\n\n    if (this.pagination) {\n      start = 0\n      end = this.pagination.totalPages - 1\n    } else {\n      const boundaries = this.calculatePageLinkBoundaries()\n      start = boundaries[0]\n      end = boundaries[1]\n    }\n\n    for (let i = start; i <= end; i++) {\n      this.pageLinks.push(i + 1)\n    }\n  }\n\n  changePage(page: number) {\n    const pageCount = this.getPageCount()\n\n    if (page >= 0 && page < pageCount) {\n      this._first = this.rows * page\n      const state = {\n        page: page + 1,\n        pageCount,\n        first: this._first,\n        rows: this.rows,\n      }\n\n      this.updatePageLinks()\n      this.pageChangeEvent.emit(state)\n      this.updatePaginationState()\n    }\n  }\n\n  isFirstPage(): boolean {\n    return this.getPage() === 0\n  }\n\n  isLastPage(): boolean {\n    return this.getPage() === this.getPageCount() - 1\n  }\n\n  getPage(): number {\n    if (this.pagination) {\n      return this.pagination.currentPage - 1\n    } else {\n      return Math.floor(this.first / this.rows)\n    }\n  }\n\n  getPageCount() {\n    return Math.ceil(this.totalRecords / this.rows)\n  }\n\n  onPageLinkClick(event: MouseEvent, page: number) {\n    this.changePage(page)\n    event.preventDefault()\n  }\n\n  changePageToFirst(event: MouseEvent) {\n    if (!this.isFirstPage()) {\n      this.changePage(0)\n    }\n\n    event.preventDefault()\n  }\n\n  changePageToPrev(event: MouseEvent) {\n    this.changePage(this.getPage() - 1)\n    event.preventDefault()\n  }\n\n  changePageToNext(event: MouseEvent) {\n    this.changePage(this.getPage() + 1)\n    event.preventDefault()\n  }\n\n  changePageToLast(event: MouseEvent) {\n    if (!this.isLastPage()) {\n      this.changePage(this.getPageCount() - 1)\n    }\n\n    event.preventDefault()\n  }\n\n  updatePaginationState() {\n    this.paginationState = {\n      page: this.getPage(),\n      pageCount: this.getPageCount(),\n      rows: this.rows,\n      first: this.first,\n      totalRecords: this.totalRecords,\n    }\n  }\n\n  empty(): boolean {\n    return this.getPageCount() === 0\n  }\n\n  get currentPageReport() {\n    return this.currentPageReportTemplate\n      .replace('{showCurrentPage}', String(this.showCurrentPage()))\n      .replace('{totalPages}', String(this.getPageCount()))\n      .replace('{first}', String(this.totalRecords > 0 ? this._first + 1 : 0))\n      .replace('{last}', String(Math.min(this._first + this.rows, this.totalRecords)))\n      .replace('{rows}', String(this.rows))\n      .replace('{totalRecords}', String(this.totalRecords))\n  }\n\n  showCurrentPage() {\n    return this.getPageCount() > 0 ? this.getPage() + 1 : 0\n  }\n}\n",
            "properties": [
                {
                    "name": "first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "pageCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPagination",
            "id": "interface-IPagination-f1a1e1de6dfdfcd1cf470e853461342d312bfd20b4f75075dcb18eb504f2a7f03976f42313c4ed996606b8eaae81d7ba12ba286fadfa36d21bb100afd23a33ac",
            "file": "src/app/models/pagination.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMeta {\n  totalItems: number\n  itemCount: number\n  itemsPerPage: number\n  totalPages: number\n  currentPage: number\n}\n\nexport interface IPagination<T> {\n  items: T[]\n  meta: IMeta\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeta",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPagination",
            "id": "interface-IPagination-c82c7e2ecb522b77d213d8f90622691a3b46f77a8af63e079fd40715cff8176f22bb8eb8d8057bade216659bbed2ed27f44df49e8e969141ff863ea6f8dfdb0f-1",
            "file": "src/app/components/pagination/pagination.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core'\n\nexport interface IPagination {\n  currentPage: number\n  itemCount: number\n  itemsPerPage: number\n  totalItems: number\n  totalPages: number\n}\n\ninterface IPaginationState {\n  page: number\n  pageCount: number\n  rows: number\n  first: number\n  totalRecords: number\n}\n\nexport interface IPageChange {\n  page: number\n  pageCount: number\n  first: number\n  rows: number\n}\n\n@Component({\n  selector: 'hc-pagination',\n  template: `\n    <div class=\"wrapper-pagination\" aria-label=\"pagination\">\n      <div class=\"wrapper-buttons\">\n        <button\n          [disabled]=\"isFirstPage() || empty()\"\n          (click)=\"changePageToFirst($event)\"\n          aria-label=\"Button First Page\"\n          type=\"button\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">\n            keyboard_double_arrow_left\n          </span>\n        </button>\n        <button\n          [disabled]=\"isFirstPage() || empty()\"\n          (click)=\"changePageToPrev($event)\"\n          aria-label=\"Button Page To Prev\"\n          type=\"button\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">chevron_left</span>\n        </button>\n        <button\n          *ngFor=\"let pageLink of pageLinks\"\n          [ngClass]=\"{ 'hc-highlight-pagination': pageLink - 1 === getPage() }\"\n          (click)=\"onPageLinkClick($event, pageLink - 1)\"\n          [attr.aria-label]=\"'Page ' + pageLink\"\n          type=\"button\"\n        >\n          {{ pageLink }}\n        </button>\n        <button\n          [disabled]=\"isLastPage() || empty()\"\n          (click)=\"changePageToNext($event)\"\n          type=\"button\"\n          aria-label=\"Button Page To Next\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">chevron_right</span>\n        </button>\n        <button\n          [disabled]=\"isLastPage() || empty()\"\n          (click)=\"changePageToLast($event)\"\n          type=\"button\"\n          aria-label=\"Button Last Page\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">\n            keyboard_double_arrow_right\n          </span>\n        </button>\n      </div>\n      <div\n        *ngIf=\"showCurrentPageReport\"\n        class=\"current-report\"\n        aria-label=\"Current Report\"\n      >\n        {{ currentPageReport }}\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .wrapper-pagination {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      .wrapper-buttons {\n        display: flex;\n\n        button:first-child {\n          margin-left: 0;\n        }\n\n        button {\n          margin: 0 2px;\n        }\n      }\n\n      .current-report {\n        font-size: 14px;\n        color: var(--neutral-gray-dark);\n      }\n\n      .hc-highlight-pagination {\n        background-color: var(--primary-default);\n        color: var(--neutral-white);\n        border: 1px solid var(--primary-default);\n      }\n\n      .icon-size {\n        font-size: 18px;\n      }\n\n      button {\n        width: 32px;\n        height: 32px;\n        background-color: var(--neutral-white);\n        color: var(--neutral-black);\n        border: 1px solid var(--neutral-divider);\n        border-radius: 4px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        font-weight: 700;\n\n        &:disabled {\n          color: var(--neutral-divider);\n          cursor: default;\n          opacity: 0.7;\n        }\n      }\n    `,\n  ],\n})\nexport class PaginationComponent implements OnInit, OnChanges {\n  _first = 0\n\n  paginationState!: IPaginationState\n  pageLinks!: number[]\n\n  @Input() pagination?: IPagination\n  @Input() pageLinkSize = 5\n  @Input() rows = 0\n  @Input() totalRecords = 0\n  @Input() showCurrentPageReport!: boolean\n  @Input() currentPageReportTemplate = '{showCurrentPage} of {totalPages}'\n\n  @Output() pageChangeEvent = new EventEmitter<IPageChange>()\n\n  ngOnInit(): void {\n    this.updatePaginationState()\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['totalRecords']) {\n      this.updatePageLinks()\n      this.updatePaginationState()\n    }\n\n    if (changes['rows']) {\n      this.updatePageLinks()\n      this.updatePaginationState()\n    }\n\n    if (changes['pagination']) {\n      if (this.pagination) {\n        this.totalRecords = this.pagination.totalItems\n        this.rows = this.pagination.itemsPerPage\n      }\n\n      this.updatePageLinks()\n      this.updatePaginationState()\n    }\n  }\n\n  @Input() get first(): number {\n    return this._first\n  }\n\n  calculatePageLinkBoundaries(): number[] {\n    const numberOfPages = this.getPageCount()\n    const visiblePages = Math.min(this.pageLinkSize, numberOfPages)\n\n    // calculate range, keep current in middle if necessary\n    let start = Math.max(0, Math.ceil(this.getPage() - visiblePages / 2))\n    const end = Math.min(numberOfPages - 1, start + visiblePages - 1)\n\n    // check when approaching to last page\n    const delta = this.pageLinkSize - (end - start + 1)\n    start = Math.max(0, start - delta)\n\n    return [start, end]\n  }\n\n  updatePageLinks() {\n    this.pageLinks = []\n    let start: number\n    let end: number\n\n    if (this.pagination) {\n      start = 0\n      end = this.pagination.totalPages - 1\n    } else {\n      const boundaries = this.calculatePageLinkBoundaries()\n      start = boundaries[0]\n      end = boundaries[1]\n    }\n\n    for (let i = start; i <= end; i++) {\n      this.pageLinks.push(i + 1)\n    }\n  }\n\n  changePage(page: number) {\n    const pageCount = this.getPageCount()\n\n    if (page >= 0 && page < pageCount) {\n      this._first = this.rows * page\n      const state = {\n        page: page + 1,\n        pageCount,\n        first: this._first,\n        rows: this.rows,\n      }\n\n      this.updatePageLinks()\n      this.pageChangeEvent.emit(state)\n      this.updatePaginationState()\n    }\n  }\n\n  isFirstPage(): boolean {\n    return this.getPage() === 0\n  }\n\n  isLastPage(): boolean {\n    return this.getPage() === this.getPageCount() - 1\n  }\n\n  getPage(): number {\n    if (this.pagination) {\n      return this.pagination.currentPage - 1\n    } else {\n      return Math.floor(this.first / this.rows)\n    }\n  }\n\n  getPageCount() {\n    return Math.ceil(this.totalRecords / this.rows)\n  }\n\n  onPageLinkClick(event: MouseEvent, page: number) {\n    this.changePage(page)\n    event.preventDefault()\n  }\n\n  changePageToFirst(event: MouseEvent) {\n    if (!this.isFirstPage()) {\n      this.changePage(0)\n    }\n\n    event.preventDefault()\n  }\n\n  changePageToPrev(event: MouseEvent) {\n    this.changePage(this.getPage() - 1)\n    event.preventDefault()\n  }\n\n  changePageToNext(event: MouseEvent) {\n    this.changePage(this.getPage() + 1)\n    event.preventDefault()\n  }\n\n  changePageToLast(event: MouseEvent) {\n    if (!this.isLastPage()) {\n      this.changePage(this.getPageCount() - 1)\n    }\n\n    event.preventDefault()\n  }\n\n  updatePaginationState() {\n    this.paginationState = {\n      page: this.getPage(),\n      pageCount: this.getPageCount(),\n      rows: this.rows,\n      first: this.first,\n      totalRecords: this.totalRecords,\n    }\n  }\n\n  empty(): boolean {\n    return this.getPageCount() === 0\n  }\n\n  get currentPageReport() {\n    return this.currentPageReportTemplate\n      .replace('{showCurrentPage}', String(this.showCurrentPage()))\n      .replace('{totalPages}', String(this.getPageCount()))\n      .replace('{first}', String(this.totalRecords > 0 ? this._first + 1 : 0))\n      .replace('{last}', String(Math.min(this._first + this.rows, this.totalRecords)))\n      .replace('{rows}', String(this.rows))\n      .replace('{totalRecords}', String(this.totalRecords))\n  }\n\n  showCurrentPage() {\n    return this.getPageCount() > 0 ? this.getPage() + 1 : 0\n  }\n}\n",
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "itemCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "itemsPerPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IPagination-1"
        },
        {
            "name": "IPaginationState",
            "id": "interface-IPaginationState-c82c7e2ecb522b77d213d8f90622691a3b46f77a8af63e079fd40715cff8176f22bb8eb8d8057bade216659bbed2ed27f44df49e8e969141ff863ea6f8dfdb0f",
            "file": "src/app/components/pagination/pagination.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core'\n\nexport interface IPagination {\n  currentPage: number\n  itemCount: number\n  itemsPerPage: number\n  totalItems: number\n  totalPages: number\n}\n\ninterface IPaginationState {\n  page: number\n  pageCount: number\n  rows: number\n  first: number\n  totalRecords: number\n}\n\nexport interface IPageChange {\n  page: number\n  pageCount: number\n  first: number\n  rows: number\n}\n\n@Component({\n  selector: 'hc-pagination',\n  template: `\n    <div class=\"wrapper-pagination\" aria-label=\"pagination\">\n      <div class=\"wrapper-buttons\">\n        <button\n          [disabled]=\"isFirstPage() || empty()\"\n          (click)=\"changePageToFirst($event)\"\n          aria-label=\"Button First Page\"\n          type=\"button\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">\n            keyboard_double_arrow_left\n          </span>\n        </button>\n        <button\n          [disabled]=\"isFirstPage() || empty()\"\n          (click)=\"changePageToPrev($event)\"\n          aria-label=\"Button Page To Prev\"\n          type=\"button\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">chevron_left</span>\n        </button>\n        <button\n          *ngFor=\"let pageLink of pageLinks\"\n          [ngClass]=\"{ 'hc-highlight-pagination': pageLink - 1 === getPage() }\"\n          (click)=\"onPageLinkClick($event, pageLink - 1)\"\n          [attr.aria-label]=\"'Page ' + pageLink\"\n          type=\"button\"\n        >\n          {{ pageLink }}\n        </button>\n        <button\n          [disabled]=\"isLastPage() || empty()\"\n          (click)=\"changePageToNext($event)\"\n          type=\"button\"\n          aria-label=\"Button Page To Next\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">chevron_right</span>\n        </button>\n        <button\n          [disabled]=\"isLastPage() || empty()\"\n          (click)=\"changePageToLast($event)\"\n          type=\"button\"\n          aria-label=\"Button Last Page\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">\n            keyboard_double_arrow_right\n          </span>\n        </button>\n      </div>\n      <div\n        *ngIf=\"showCurrentPageReport\"\n        class=\"current-report\"\n        aria-label=\"Current Report\"\n      >\n        {{ currentPageReport }}\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .wrapper-pagination {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      .wrapper-buttons {\n        display: flex;\n\n        button:first-child {\n          margin-left: 0;\n        }\n\n        button {\n          margin: 0 2px;\n        }\n      }\n\n      .current-report {\n        font-size: 14px;\n        color: var(--neutral-gray-dark);\n      }\n\n      .hc-highlight-pagination {\n        background-color: var(--primary-default);\n        color: var(--neutral-white);\n        border: 1px solid var(--primary-default);\n      }\n\n      .icon-size {\n        font-size: 18px;\n      }\n\n      button {\n        width: 32px;\n        height: 32px;\n        background-color: var(--neutral-white);\n        color: var(--neutral-black);\n        border: 1px solid var(--neutral-divider);\n        border-radius: 4px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        font-weight: 700;\n\n        &:disabled {\n          color: var(--neutral-divider);\n          cursor: default;\n          opacity: 0.7;\n        }\n      }\n    `,\n  ],\n})\nexport class PaginationComponent implements OnInit, OnChanges {\n  _first = 0\n\n  paginationState!: IPaginationState\n  pageLinks!: number[]\n\n  @Input() pagination?: IPagination\n  @Input() pageLinkSize = 5\n  @Input() rows = 0\n  @Input() totalRecords = 0\n  @Input() showCurrentPageReport!: boolean\n  @Input() currentPageReportTemplate = '{showCurrentPage} of {totalPages}'\n\n  @Output() pageChangeEvent = new EventEmitter<IPageChange>()\n\n  ngOnInit(): void {\n    this.updatePaginationState()\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['totalRecords']) {\n      this.updatePageLinks()\n      this.updatePaginationState()\n    }\n\n    if (changes['rows']) {\n      this.updatePageLinks()\n      this.updatePaginationState()\n    }\n\n    if (changes['pagination']) {\n      if (this.pagination) {\n        this.totalRecords = this.pagination.totalItems\n        this.rows = this.pagination.itemsPerPage\n      }\n\n      this.updatePageLinks()\n      this.updatePaginationState()\n    }\n  }\n\n  @Input() get first(): number {\n    return this._first\n  }\n\n  calculatePageLinkBoundaries(): number[] {\n    const numberOfPages = this.getPageCount()\n    const visiblePages = Math.min(this.pageLinkSize, numberOfPages)\n\n    // calculate range, keep current in middle if necessary\n    let start = Math.max(0, Math.ceil(this.getPage() - visiblePages / 2))\n    const end = Math.min(numberOfPages - 1, start + visiblePages - 1)\n\n    // check when approaching to last page\n    const delta = this.pageLinkSize - (end - start + 1)\n    start = Math.max(0, start - delta)\n\n    return [start, end]\n  }\n\n  updatePageLinks() {\n    this.pageLinks = []\n    let start: number\n    let end: number\n\n    if (this.pagination) {\n      start = 0\n      end = this.pagination.totalPages - 1\n    } else {\n      const boundaries = this.calculatePageLinkBoundaries()\n      start = boundaries[0]\n      end = boundaries[1]\n    }\n\n    for (let i = start; i <= end; i++) {\n      this.pageLinks.push(i + 1)\n    }\n  }\n\n  changePage(page: number) {\n    const pageCount = this.getPageCount()\n\n    if (page >= 0 && page < pageCount) {\n      this._first = this.rows * page\n      const state = {\n        page: page + 1,\n        pageCount,\n        first: this._first,\n        rows: this.rows,\n      }\n\n      this.updatePageLinks()\n      this.pageChangeEvent.emit(state)\n      this.updatePaginationState()\n    }\n  }\n\n  isFirstPage(): boolean {\n    return this.getPage() === 0\n  }\n\n  isLastPage(): boolean {\n    return this.getPage() === this.getPageCount() - 1\n  }\n\n  getPage(): number {\n    if (this.pagination) {\n      return this.pagination.currentPage - 1\n    } else {\n      return Math.floor(this.first / this.rows)\n    }\n  }\n\n  getPageCount() {\n    return Math.ceil(this.totalRecords / this.rows)\n  }\n\n  onPageLinkClick(event: MouseEvent, page: number) {\n    this.changePage(page)\n    event.preventDefault()\n  }\n\n  changePageToFirst(event: MouseEvent) {\n    if (!this.isFirstPage()) {\n      this.changePage(0)\n    }\n\n    event.preventDefault()\n  }\n\n  changePageToPrev(event: MouseEvent) {\n    this.changePage(this.getPage() - 1)\n    event.preventDefault()\n  }\n\n  changePageToNext(event: MouseEvent) {\n    this.changePage(this.getPage() + 1)\n    event.preventDefault()\n  }\n\n  changePageToLast(event: MouseEvent) {\n    if (!this.isLastPage()) {\n      this.changePage(this.getPageCount() - 1)\n    }\n\n    event.preventDefault()\n  }\n\n  updatePaginationState() {\n    this.paginationState = {\n      page: this.getPage(),\n      pageCount: this.getPageCount(),\n      rows: this.rows,\n      first: this.first,\n      totalRecords: this.totalRecords,\n    }\n  }\n\n  empty(): boolean {\n    return this.getPageCount() === 0\n  }\n\n  get currentPageReport() {\n    return this.currentPageReportTemplate\n      .replace('{showCurrentPage}', String(this.showCurrentPage()))\n      .replace('{totalPages}', String(this.getPageCount()))\n      .replace('{first}', String(this.totalRecords > 0 ? this._first + 1 : 0))\n      .replace('{last}', String(Math.min(this._first + this.rows, this.totalRecords)))\n      .replace('{rows}', String(this.rows))\n      .replace('{totalRecords}', String(this.totalRecords))\n  }\n\n  showCurrentPage() {\n    return this.getPageCount() > 0 ? this.getPage() + 1 : 0\n  }\n}\n",
            "properties": [
                {
                    "name": "first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "pageCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "totalRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IParams",
            "id": "interface-IParams-8b7e67aece57fc9e15f27e28bdfa1ef3879ecb27a0807319846ce7942b01a8a6e7934c6357ed992a9cffbe1091b0f6ba5ce7414beb3609b462f9df3325ef69af",
            "file": "src/app/common/base-table/base-table.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ActivatedRoute, Router } from '@angular/router'\n\nimport { IColumn } from './../../components/table/table.component'\nimport { IPageChange } from 'src/app/components/pagination/pagination.component'\nimport { Injectable } from '@angular/core'\n\ninterface IParams {\n  page: string\n  limit: string\n  sortColumn: string\n  sortDirection: string\n}\n\n@Injectable()\nexport class BaseTableService {\n  page = 1\n  limit = 5\n  sortColumn: string | undefined = undefined\n  sortDirection: string | undefined = undefined\n  cols: IColumn[] = []\n  _selectedColumns: IColumn[] = []\n\n  constructor(private route: ActivatedRoute, private router: Router) {\n    this.route.queryParams.subscribe((params) => {\n      if (Object.keys(params).length !== 0) {\n        const { page, limit, sortColumn, sortDirection } = params as IParams\n\n        this.page = page ? Number(page) : 1\n        this.limit = limit ? Number(limit) : 5\n        this.sortColumn = sortColumn\n        this.sortDirection = sortDirection\n      }\n    })\n  }\n\n  get selectedColumns(): IColumn[] {\n    return this._selectedColumns\n  }\n\n  set selectedColumns(val: IColumn[]) {\n    this._selectedColumns = this.cols.filter((col) => val.includes(col))\n  }\n\n  sort(event: { field: string; order: number }) {\n    this.sortColumn = event.field\n    this.sortDirection = event.order === 1 ? 'ASC' : 'DESC'\n  }\n\n  changePage(pageChange: IPageChange) {\n    this.page = pageChange.page\n    this.changeUrlParams()\n  }\n\n  changeLimit(limit: number) {\n    this.limit = limit\n    this.changeUrlParams()\n  }\n\n  private changeUrlParams() {\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: {\n        page: this.page,\n        limit: this.limit,\n        sortColumn: this.sortColumn,\n        sortDirection: this.sortDirection,\n      },\n      replaceUrl: true,\n    })\n  }\n}\n",
            "properties": [
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "sortColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "sortDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPatient",
            "id": "interface-IPatient-17f74bdd00b72ad9313ee6f62d34603a54e79440a1aeaf1b6af165630b38f010010d5c0cfdbc8db2e79f93d6f2f6fb680dd52d240364ceccab8707f4852fc0e1",
            "file": "src/app/modules/patients/patients.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { IPagination } from 'src/app/models/pagination.model'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { environment } from 'src/environments/environment'\nimport { stringify } from 'query-string'\n\nexport interface IPatient {\n  id: string\n  name: string\n  email: string\n  address: string\n  phone: string\n  age: number\n  status: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PatientsService {\n  constructor(private http: HttpClient) {}\n\n  create(patient: Omit<IPatient, 'id'>): Observable<IPatient> {\n    return this.http.post<IPatient>(`${environment.BASE_URL}/patients`, patient)\n  }\n\n  findAll(\n    page: number,\n    limit: number,\n    sortDirection?: 'ASC' | 'DESC',\n    sortColumn?: string\n  ): Observable<IPagination<IPatient>> {\n    const query = stringify(\n      { page, limit, sortDirection, sortColumn },\n      {\n        skipNull: true,\n        skipEmptyString: true,\n      }\n    )\n    return this.http.get<IPagination<IPatient>>(\n      `${environment.BASE_URL}/patients?${query}`\n    )\n  }\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IProduct",
            "id": "interface-IProduct-0afb0c2d4ae9dc37dbf50e4afa6b1a23ac041bce8b92acbbc2b91f398d44201657647ec98353d0a3915618b9786ec55e867b5fa794b6e419aafc4178a029338e",
            "file": "src/app/modules/docs/products.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { IPagination } from 'src/app/models/pagination.model'\nimport { Injectable } from '@angular/core'\nimport { MswService } from 'src/app/components/msw/msw.service'\nimport { Observable } from 'rxjs'\nimport { environment } from 'src/environments/environment'\nimport { stringify } from 'query-string'\n\nexport interface IProduct {\n  id: string\n  code: string\n  name: string\n  description: string\n  image: string\n  price: number\n  category: string\n  quantity: number\n  inventoryStatus: string\n  rating: number\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductsService {\n  constructor(private http: HttpClient, private mswService: MswService) {}\n\n  getProducts(\n    page: number,\n    limit: number,\n    sortColumn?: string,\n    sortDirection?: string\n  ): Observable<IPagination<IProduct>> {\n    const query = stringify(\n      { page, limit, sortColumn, sortDirection },\n      {\n        skipEmptyString: true,\n        skipNull: true,\n      }\n    )\n\n    return this.http.get<IPagination<IProduct>>(\n      `${environment.BASE_URL}/products?${query}`\n    )\n  }\n}\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "inventoryStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IProfile",
            "id": "interface-IProfile-e800b8bf2d0cecdb4009dd7bb561d4dd117f326e98caebf73e947d89e2bdccbec7fe3ef76b11f1547dd24444b9b05b061924116e27c284318cff4ff82b344d70",
            "file": "src/app/modules/user/services/user.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { environment } from './../../../../environments/environment'\n\ninterface IEvents {\n  title: string\n  description: string\n  date: Date\n}\ninterface ISocialMedias {\n  facebook: string\n  instagram: string\n  linkedin: string\n  twitter: string\n}\n\ninterface IAddress {\n  number: number\n  street: string\n  state: string\n  city: string\n  cep: string\n}\n\ninterface IContact {\n  phone: string\n  address: IAddress\n}\n\ninterface IHistory {\n  lastVisit: Date\n}\n\nexport interface IProfile {\n  name: string\n  age: number\n  gender: 'MALE' | 'FEMALE'\n  profileBackgroundImage: string\n  photo: string\n  description: string\n  contact: IContact\n  socialMedias: ISocialMedias\n  events: IEvents[]\n  healthProblems: string[]\n  status: 'APPROVED' | 'PENDING'\n  history: IHistory[]\n}\n\nexport interface IMe {\n  name: string\n  email: string\n  photo: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  getProfile(): Observable<IProfile> {\n    return this.http.get<IProfile>(`${environment.BASE_URL}/user/profile`)\n  }\n\n  getMe(): Observable<IMe> {\n    return this.http.get<IMe>(`${environment.BASE_URL}/user/me`)\n  }\n}\n",
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "contact",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IContact",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEvents[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"MALE\" | \"FEMALE\"",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "healthProblems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "history",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IHistory[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "photo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "profileBackgroundImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "socialMedias",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISocialMedias",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"APPROVED\" | \"PENDING\"",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IRowSelectEvent",
            "id": "interface-IRowSelectEvent-b596d4e1a18bd303b7a19759ca559662e6015ccb0bf1c3820ff2e4c68444365016c671c9d893c1c9d139096710090995a4bca6ef0a6d97b11f959ce1b4540239",
            "file": "src/app/components/table/select.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core'\n\nimport { DataService } from './data.service'\nimport { ObjectUtils } from 'src/app/common/object-utils/object-utils'\nimport { TableService } from './table.service'\n\ninterface IRowSelectEvent {\n  originalEvent: Event\n  index: number\n  data: any\n  type: 'checkbox'\n}\n\nexport interface IHeaderCheckboxEvent {\n  originalEvent: Event\n  checked: boolean\n}\n\n@Directive({\n  selector: '[hcSelect]',\n})\nexport class SelectDirective implements OnChanges {\n  private _selectAll: boolean | null = null\n\n  private _selection: any\n  private _deselection: any\n\n  selectionKeys: any = {}\n  deselectionKeys: any = {}\n\n  preventSelectionSetterPropagation!: boolean\n\n  @Input() dataKey?: string\n  @Input() rowSelectable?: any\n  @Input() stateKey?: string\n  @Input() selectionPageOnly?: boolean\n  @Input() compareSelectionBy = 'deepEquals'\n\n  @Input() get selection(): any {\n    return this._selection\n  }\n\n  set selection(val: any) {\n    this._selection = val\n  }\n\n  @Input() get deselection(): any {\n    return this._deselection\n  }\n\n  set deselection(val: any) {\n    this._deselection = val\n  }\n\n  @Input() get selectAll(): boolean | null {\n    return this._selectAll\n  }\n\n  set selectAll(val: boolean | null) {\n    this._selectAll = val\n  }\n\n  @Output() selectionChange = new EventEmitter()\n  @Output() deselectionChange = new EventEmitter<any>()\n  @Output() headerCheckboxToggleEvent = new EventEmitter<IHeaderCheckboxEvent>()\n  @Output() rowUnselectEvent = new EventEmitter<IRowSelectEvent>()\n  @Output() rowSelectEvent = new EventEmitter<IRowSelectEvent>()\n  @Output() selectAllChange = new EventEmitter<IHeaderCheckboxEvent>()\n\n  constructor(private tableService: TableService, public data: DataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['selection']) {\n      this.selection = changes['selection'].currentValue\n\n      if (!this.preventSelectionSetterPropagation) {\n        this.updateSelectionKeys()\n        this.tableService.onSelectionChange()\n      }\n\n      this.preventSelectionSetterPropagation = false\n    }\n\n    if (changes['selectAll']) {\n      this.selectAll = changes['selectAll'].currentValue\n\n      if (!this.preventSelectionSetterPropagation || !this.selectAll) {\n        setTimeout(() => {\n          this.deselection = []\n          this.selection = []\n          this.selectionChange.emit(this.selection)\n          this.deselectionChange.emit(this.deselection)\n          this.tableService.onSelectionChange()\n        })\n      }\n\n      this.preventSelectionSetterPropagation = false\n    }\n  }\n\n  isRowSelectable(data: any, index: number): boolean {\n    if (this.rowSelectable && !this.rowSelectable({ data, index })) {\n      return false\n    }\n\n    return true\n  }\n\n  isSelected(rowData: any): boolean {\n    if (rowData && this.selection) {\n      if (this.dataKey) {\n        return (\n          this.selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !==\n          undefined\n        )\n      } else {\n        if (this.selection instanceof Array) {\n          return this.findIndexInSelection(rowData, this.selection) > -1\n        } else {\n          return this.equals(rowData, this.selection)\n        }\n      }\n    }\n\n    return false\n  }\n\n  isDeselected(rowData: any): boolean {\n    if (rowData && this.deselection) {\n      if (this.dataKey) {\n        return (\n          this.deselectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !==\n          undefined\n        )\n      } else {\n        if (this.deselection instanceof Array) {\n          return this.findIndexInSelection(rowData, this.deselection) > -1\n        } else {\n          return this.equals(rowData, this.deselection)\n        }\n      }\n    }\n\n    return false\n  }\n\n  findIndexInSelection(rowData: any, selectionOrDeselection: any) {\n    let index = -1\n    if (selectionOrDeselection && selectionOrDeselection.length) {\n      for (let i = 0; i < selectionOrDeselection.length; i++) {\n        if (this.equals(rowData, selectionOrDeselection[i])) {\n          index = i\n          break\n        }\n      }\n    }\n\n    return index\n  }\n\n  equals(data1: any, data2: any) {\n    return this.compareSelectionBy === 'equals'\n      ? data1 === data2\n      : ObjectUtils.equals(data1, data2, this.dataKey)\n  }\n\n  private verifySelectionOrDesectionAndUpdateKeys(\n    selectKeys: 'selectionKeys' | 'deselectionKeys',\n    selectionOrDeselection: 'selection' | 'deselection'\n  ) {\n    this[selectKeys] = {}\n    if (Array.isArray(this[selectionOrDeselection])) {\n      for (const data of this[selectionOrDeselection]) {\n        this[selectKeys][String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1\n      }\n    } else {\n      this[selectKeys][\n        String(ObjectUtils.resolveFieldData(this[selectionOrDeselection], this.dataKey))\n      ] = 1\n    }\n  }\n\n  updateSelectionKeys() {\n    if (this.dataKey && this.selection?.length !== null && !this.selectAll) {\n      this.verifySelectionOrDesectionAndUpdateKeys('selectionKeys', 'selection')\n    } else if (this.dataKey && this.deselection?.length !== null) {\n      this.verifySelectionOrDesectionAndUpdateKeys('deselectionKeys', 'deselection')\n    }\n  }\n\n  toggleRowsWithCheckbox(event: Event, check: boolean) {\n    if (this.selectAll === true) {\n      this.deselectAllWithSelectAllTrue(event, check)\n    } else {\n      const data = this.selectionPageOnly\n        ? this.data.dataToRender(this.data.processedData)\n        : this.data.processedData\n\n      let selection =\n        this.selectionPageOnly && this.selection\n          ? this.selection.filter((s: any) => !data.some((d: any) => this.equals(s, d)))\n          : []\n\n      if (check) {\n        selection = [...selection, ...data]\n        selection = this.rowSelectable\n          ? selection.filter((data: any, index: number) =>\n              this.rowSelectable({ data, index })\n            )\n          : selection\n      }\n\n      this.selection = selection\n      this.preventSelectionSetterPropagation = true\n      this.updateSelectionKeys()\n      this.selectionChange.emit(this.selection)\n      this.tableService.onSelectionChange()\n      this.headerCheckboxToggleEvent.emit({ originalEvent: event, checked: check })\n    }\n  }\n\n  private deselectAllWithSelectAllTrue(event: Event, check: boolean) {\n    const data = this.data.processedData\n    let deselection: any[] = []\n\n    if (!check) {\n      deselection = [...this.deselection, ...data]\n      deselection = this.rowSelectable\n        ? deselection.filter((data: any, index: number) =>\n            this.rowSelectable({ data, index })\n          )\n        : deselection\n    } else {\n      deselection = this.deselection.filter(\n        (s: any) => !data.some((d: any) => this.equals(s, d))\n      )\n    }\n\n    this.deselection = deselection\n    this.preventSelectionSetterPropagation = true\n    this.updateSelectionKeys()\n    this.deselectionChange.emit(this.deselection)\n    this.tableService.onSelectionChange()\n    this.headerCheckboxToggleEvent.emit({ originalEvent: event, checked: check })\n  }\n\n  toggleRowWithCheckbox(event: { originalEvent: Event; rowIndex: number }, rowData: any) {\n    if (!this.selectAll) {\n      this.selectRowWithCheckbox(event, rowData)\n    } else {\n      this.deselectRowWithCheckbox(event, rowData)\n    }\n  }\n\n  private selectRowWithCheckbox(\n    event: { originalEvent: Event; rowIndex: number },\n    rowData: any\n  ) {\n    this.selection = this.selection || []\n    const selected = this.isSelected(rowData)\n\n    const dataKeyValue = this.dataKey\n      ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey))\n      : null\n\n    this.preventSelectionSetterPropagation = true\n\n    if (selected) {\n      const selectionIndex = this.findIndexInSelection(rowData, this.selection)\n      this.selection = this.selection.filter((_: any, i: number) => i != selectionIndex)\n      this.selectionChange.emit(this.selection)\n\n      if (dataKeyValue) {\n        delete this.selectionKeys[dataKeyValue]\n      }\n    } else {\n      if (!this.isRowSelectable(rowData, event.rowIndex)) {\n        return\n      }\n\n      this.selection = this.selection ? [...this.selection, rowData] : [rowData]\n\n      this.selectionChange.emit(this.selection)\n\n      if (dataKeyValue) {\n        this.selectionKeys[dataKeyValue] = 1\n      }\n    }\n\n    this.tableService.onSelectionChange()\n  }\n\n  private deselectRowWithCheckbox(\n    event: { originalEvent: Event; rowIndex: number },\n    rowData: any\n  ) {\n    this.deselection = this.deselection || []\n    const deselected = this.isDeselected(rowData)\n\n    const dataKeyValue = this.dataKey\n      ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey))\n      : null\n\n    this.preventSelectionSetterPropagation = true\n\n    if (deselected) {\n      const selectionIndex = this.findIndexInSelection(rowData, this.deselection)\n      this.deselection = this.deselection.filter(\n        (_: any, i: number) => i != selectionIndex\n      )\n      this.deselectionChange.emit(this.deselection)\n\n      if (dataKeyValue) {\n        delete this.deselectionKeys[dataKeyValue]\n      }\n    } else {\n      if (!this.isRowSelectable(rowData, event.rowIndex)) {\n        return\n      }\n\n      this.deselection = this.deselection ? [...this.deselection, rowData] : [rowData]\n\n      this.deselectionChange.emit(this.deselection)\n\n      if (dataKeyValue) {\n        this.deselectionKeys[dataKeyValue] = 1\n      }\n    }\n\n    this.tableService.onSelectionChange()\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "originalEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ISelectItem",
            "id": "interface-ISelectItem-6eb80cf3d468ddfea7e8a971f195422776f33841abc48fffac6e87c4c416216a7cbe9990e78d28516c17889ee7e6441d6314e72d41175df22cad332053ea2f39",
            "file": "src/app/components/select/select-item.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core'\n\nexport interface ISelectItem<T> {\n  label?: string\n  value?: T\n  styleClass?: string\n  icon?: string\n  title?: string\n  disabled?: boolean\n}\n\n@Component({\n  selector: 'hc-select-item',\n  template: `\n    <li\n      role=\"option\"\n      [id]=\"selected ? 'hc-select-highlight-option' : ''\"\n      [attr.aria-label]=\"label\"\n      [attr.aria-selected]=\"selected\"\n      [ngClass]=\"classes\"\n      (click)=\"onOptionClick($event)\"\n    >\n      <span *ngIf=\"!template\">{{ label || 'empty' }}</span>\n      <ng-container\n        *ngTemplateOutlet=\"template; context: { $implicit: option }\"\n      ></ng-container>\n    </li>\n  `,\n  styleUrls: ['select.component.scss'],\n})\nexport class SelectItemComponent<T> {\n  @Input() label?: string\n  @Input() selected = false\n  @Input() option!: ISelectItem<T>\n  @Input() template!: TemplateRef<HTMLElement>\n\n  @Output() onClick = new EventEmitter<{ originalEvent: Event; option: ISelectItem<T> }>()\n\n  onOptionClick(event: Event) {\n    this.onClick.emit({ originalEvent: event, option: this.option })\n  }\n\n  get classes() {\n    return {\n      ['hc-select-item']: true,\n      ['hc-select-item-highlight']: this.selected,\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ISocialMedias",
            "id": "interface-ISocialMedias-e800b8bf2d0cecdb4009dd7bb561d4dd117f326e98caebf73e947d89e2bdccbec7fe3ef76b11f1547dd24444b9b05b061924116e27c284318cff4ff82b344d70",
            "file": "src/app/modules/user/services/user.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { environment } from './../../../../environments/environment'\n\ninterface IEvents {\n  title: string\n  description: string\n  date: Date\n}\ninterface ISocialMedias {\n  facebook: string\n  instagram: string\n  linkedin: string\n  twitter: string\n}\n\ninterface IAddress {\n  number: number\n  street: string\n  state: string\n  city: string\n  cep: string\n}\n\ninterface IContact {\n  phone: string\n  address: IAddress\n}\n\ninterface IHistory {\n  lastVisit: Date\n}\n\nexport interface IProfile {\n  name: string\n  age: number\n  gender: 'MALE' | 'FEMALE'\n  profileBackgroundImage: string\n  photo: string\n  description: string\n  contact: IContact\n  socialMedias: ISocialMedias\n  events: IEvents[]\n  healthProblems: string[]\n  status: 'APPROVED' | 'PENDING'\n  history: IHistory[]\n}\n\nexport interface IMe {\n  name: string\n  email: string\n  photo: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  getProfile(): Observable<IProfile> {\n    return this.http.get<IProfile>(`${environment.BASE_URL}/user/profile`)\n  }\n\n  getMe(): Observable<IMe> {\n    return this.http.get<IMe>(`${environment.BASE_URL}/user/me`)\n  }\n}\n",
            "properties": [
                {
                    "name": "facebook",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "instagram",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "linkedin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "twitter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ISortMeta",
            "id": "interface-ISortMeta-1f010fe3852c052ff5b7249c04893df6c83c04f184a3d37d61fca09f64c0488650ab66af75547c4e34c8e342e8e994f99f566150223b7af95c871f3f9ae43afd",
            "file": "src/app/components/table/table.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Subject } from 'rxjs'\n\nexport interface ISortMeta {\n  field: string\n  order: number\n}\n\n@Injectable()\nexport class TableService {\n  private sortSource = new Subject<ISortMeta | ISortMeta[]>()\n  private selectionSource = new Subject()\n  private valueSource = new Subject<any>()\n\n  sortSource$ = this.sortSource.asObservable()\n  selectionSource$ = this.selectionSource.asObservable()\n  valueSource$ = this.valueSource.asObservable()\n\n  onSort(sortMeta: ISortMeta | ISortMeta[]) {\n    this.sortSource.next(sortMeta)\n  }\n\n  onSelectionChange() {\n    this.selectionSource.next(null)\n  }\n\n  onValueChange(value: any) {\n    this.valueSource.next(value)\n  }\n}\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IStyle",
            "id": "interface-IStyle-04980aa9c86524d0f1f893a590bb1112bec35270cc2cd8a9dfcfeb153247ac4c289c3b512dd71748f1e801fb80a96223ebf57dcfd479db2a8a49ce3c9a63e895",
            "file": "src/app/common/models/style.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IStyle {\n  [key: string]: string\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-04980aa9c86524d0f1f893a590bb1112bec35270cc2cd8a9dfcfeb153247ac4c289c3b512dd71748f1e801fb80a96223ebf57dcfd479db2a8a49ce3c9a63e895",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "ISwitchOnChangeEvent",
            "id": "interface-ISwitchOnChangeEvent-64a71aefca1c65ebeaa2c22b11b10c79c34cb05aa4e985bf17a91674f8f3f0920a79878d61e64683b78806a24dc44a0c3751db0babdcef53ae706150cca7d27f",
            "file": "src/app/components/switch/switch.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  Provider,\n  forwardRef,\n} from '@angular/core'\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms'\n\nimport { ChangeDetectorRef } from '@angular/core'\n\nconst SWITCH_VALUE_ACcESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  multi: true,\n  useExisting: forwardRef(() => SwitchComponent),\n}\n\nexport interface ISwitchOnChangeEvent {\n  originalEvent: Event\n  checked: boolean\n}\n\n@Component({\n  selector: 'hc-switch',\n  template: `\n    <label [attr.for]=\"id\" [ngClass]=\"labelClasses\">\n      <div [ngClass]=\"classes\" (click)=\"onClick($event, cb)\" role=\"switch\">\n        <div class=\"hc-switch-hidden-accessible\">\n          <input\n            #cb\n            type=\"checkbox\"\n            [attr.aria-label]=\"ariaLabel\"\n            [attr.id]=\"id\"\n            [attr.name]=\"name\"\n            [attr.tabindex]=\"tabindex\"\n            [attr.aria-checked]=\"checked()\"\n            [attr.aria-labelledby]=\"ariaLabelledBy\"\n            [checked]=\"checked()\"\n            [disabled]=\"disabled\"\n            (focus)=\"onFocus()\"\n            (blur)=\"onBlur()\"\n          />\n        </div>\n        <span class=\"hc-switch-slider\"></span>\n      </div>\n      <span *ngIf=\"label\" class=\"hc-switch-label-text\">{{ label }}</span>\n    </label>\n  `,\n  styleUrls: ['switch.component.scss'],\n  providers: [SWITCH_VALUE_ACcESSOR],\n})\nexport class SwitchComponent implements ControlValueAccessor {\n  modelValue = false\n  trueValue = true\n  falseValue = false\n  focused = false\n\n  @Input() ariaLabel?: string\n  @Input() ariaLabelledBy?: string\n  @Input() name?: string\n  @Input() id?: string\n  @Input() label?: string\n  @Input() readonly = false\n  @Input() tabindex?: number\n  @Input() disabled = false\n\n  @Output() onChange = new EventEmitter<ISwitchOnChangeEvent>()\n\n  constructor(public cd: ChangeDetectorRef) {}\n\n  onModelChange: (value: boolean) => void = () => {}\n  onModelTouched: () => void = () => {}\n\n  writeValue(value: boolean): void {\n    this.modelValue = value\n    this.cd.markForCheck()\n  }\n\n  registerOnChange(fn: (value: boolean) => void): void {\n    this.onModelChange = fn\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onModelTouched = fn\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled\n    this.cd.markForCheck()\n  }\n\n  toggle(event: Event): void {\n    this.updateModel(event, !this.checked())\n  }\n\n  onClick(event: Event, cb: HTMLInputElement): void {\n    if (!this.disabled && !this.readonly) {\n      event.preventDefault()\n      this.toggle(event)\n      cb.focus()\n    }\n  }\n\n  updateModel(event: Event, value: boolean): void {\n    this.modelValue = value ? this.trueValue : this.falseValue\n    this.onModelChange(this.modelValue)\n    this.onChange.emit({\n      originalEvent: event,\n      checked: this.modelValue,\n    })\n  }\n\n  onFocus(): void {\n    this.focused = true\n  }\n\n  onBlur(): void {\n    this.focused = false\n    this.onModelTouched()\n  }\n\n  checked(): boolean {\n    return this.modelValue === this.trueValue\n  }\n\n  get classes() {\n    return {\n      ['hc-switch']: true,\n      ['hc-switch-checked']: this.checked(),\n      ['hc-switch-disabled']: this.disabled,\n      ['hc-switch-focus']: this.focused,\n    }\n  }\n\n  get labelClasses() {\n    return {\n      ['hc-switch-label']: true,\n      ['hc-switch-label-disabled']: this.disabled,\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "originalEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITimelineEventsAndMettings",
            "id": "interface-ITimelineEventsAndMettings-be7ccf05c91a129729f214e6b3d08f1574bf31d0ec4bb01579037abd46aaef9a5b48bf6eccb53317666769f097b2d53863d43a13311de6e514b201550a38bd15",
            "file": "src/app/modules/dashboard/components/timeline-events-and-meetings/timeline-events-and-meetings.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nexport interface ITimelineEventsAndMettings {\n  status: string\n  date: Date\n  description: string\n  icon: string\n  color: string\n}\n\n@Component({\n  selector: 'hc-timeline-events-and-meetings',\n  template: `\n    <h5 class=\"hc-timeline-title\">{{ title }}</h5>\n    <hc-timeline [value]=\"timeline\">\n      <ng-template hcTemplate=\"marker\" let-event>\n        <span class=\"custom-marker\" [style.backgroundColor]=\"event.color\">\n          <hc-icon\n            [icon]=\"event.icon\"\n            [style]=\"{ color: 'var(--neutral-white)' }\"\n          ></hc-icon>\n        </span>\n      </ng-template>\n      <ng-template hcTemplate=\"content\" let-event>\n        <div style=\"margin-bottom: 2.5rem;\">\n          <div\n            style=\"display: flex; justify-content: space-between; margin-bottom: 0.5rem; width: 100%;\"\n          >\n            <div class=\"subtitle1\" style=\"color: var(--neutral-black);\">\n              {{ event.status }}\n            </div>\n            <div\n              class=\"small2\"\n              style=\"color: var(--neutral-gray); display: flex; align-items: center;\"\n            >\n              {{ event.date | date: 'short' }}\n              <hc-icon\n                size=\"small\"\n                icon=\"schedule\"\n                [style]=\"{ 'margin-left': '0.5rem' }\"\n              ></hc-icon>\n            </div>\n          </div>\n          <div class=\"body2\" style=\"color: var(--neutral-gray-dark)\">\n            {{ event.description }}\n          </div>\n        </div>\n      </ng-template>\n    </hc-timeline>\n  `,\n  styles: [\n    `\n      .custom-marker {\n        display: flex;\n        width: 2.5rem;\n        height: 2.5rem;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        z-index: 1;\n      }\n\n      .hc-timeline-title {\n        margin-bottom: 1rem;\n      }\n    `,\n  ],\n})\nexport class TimelineEventsAndMeetingsComponent {\n  @Input() title!: string\n  @Input() timeline: ITimelineEventsAndMettings[] = []\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IToken",
            "id": "interface-IToken-918e75f2838f91fbc972b29f952f0b56d5ee3655b4a13735e18eaddb18de1827055cd34e1bb97a761b20ece4b6ab37891f05a23fcd8c961c7bbf84776f3d1f68",
            "file": "src/app/modules/authentication/authentication.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Router } from '@angular/router'\nimport { environment } from './../../../environments/environment'\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { LocalStorageService } from 'src/app/common/local-storage/local-storage.service'\n\nexport interface ILoginUserDto {\n  login: string\n  password: string\n  rememberMe: boolean\n}\n\nexport interface IToken {\n  token: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private localStorage: LocalStorageService\n  ) {}\n\n  login(user: ILoginUserDto): void {\n    this.http.post<IToken>(`${environment.BASE_URL}/login`, user).subscribe({\n      next: (token: IToken) => {\n        this.localStorage.set('HC_TOKEN', token)\n        this.router.navigate(['home'])\n      },\n    })\n  }\n\n  logout(): void {\n    this.localStorage.remove('HC_TOKEN')\n    this.router.navigate(['/auth/login'])\n  }\n}\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IViewport",
            "id": "interface-IViewport-9b9b65c631ce8f4d3bf8e16c3f4b2f7d7b15cc3c6360ac39fe1697b85636b2f4e7bcd9be8b51c42e77795e64a7fd1620f51faaba52d34ec1b91693a4d28ae44d",
            "file": "src/app/common/dom-handler/dom-handler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface IDimensions {\n  width: number\n  height: number\n}\n\ninterface IViewport {\n  width: number\n  height: number\n}\n\nexport interface IOffset {\n  top: number\n  left: number\n}\n\nexport class DomHandler {\n  public static isElement(obj: HTMLElement): boolean {\n    return typeof HTMLElement === 'object'\n      ? obj instanceof HTMLElement\n      : obj &&\n          typeof obj === 'object' &&\n          obj !== null &&\n          (obj as HTMLElement).nodeType === 1 &&\n          typeof (obj as HTMLElement).nodeName === 'string'\n  }\n\n  public static appendChild(element: HTMLElement, target: HTMLElement): void {\n    if (this.isElement(target)) {\n      target.appendChild(element)\n    } else {\n      throw `Cannot append ${target} to ${element}`\n    }\n  }\n\n  public static relativePosition(element: HTMLElement, target: HTMLElement): void {\n    const elementDimensions = element.offsetParent\n      ? { width: element.offsetWidth, height: element.offsetHeight }\n      : this.getHiddenElementDimensions(element)\n    const targetHeight = target.offsetHeight\n    const targetOffset = target.getBoundingClientRect()\n    const viewport = this.getViewport()\n\n    let top: number\n    let left: number\n\n    if (targetOffset.top + targetHeight + elementDimensions.height > viewport.height) {\n      top = -1 * elementDimensions.height\n      element.style.transformOrigin = 'bottom'\n      if (targetOffset.top + top < 0) {\n        top = -1 * targetOffset.top\n      }\n    } else {\n      top = targetHeight\n      element.style.transformOrigin = 'top'\n    }\n\n    if (elementDimensions.width > viewport.width) {\n      // element wider then viewport and cannot fit on screen (align at left side of viewpoert)\n      left = targetOffset.left * -1\n    } else if (targetOffset.left + elementDimensions.width > viewport.width) {\n      // element wider then viewport but can be fit on screen (align at right side of viewport)\n      left = (targetOffset.left + elementDimensions.width - viewport.width) * -1\n    } else {\n      // element fits on screen (align with target)\n      left = 0\n    }\n\n    element.style.top = top + 'px'\n    element.style.left = left + 'px'\n  }\n\n  public static absolutePosition(element: HTMLElement, target: HTMLElement): void {\n    const elementDimensions = element.offsetParent\n      ? { width: element.offsetWidth, height: element.offsetHeight }\n      : this.getHiddenElementDimensions(element)\n\n    const elementOuterHeight = elementDimensions.height\n    const elementOuterWidth = elementDimensions.width\n\n    const targetOuterHeight = target.offsetHeight\n    const targetOuterWidth = target.offsetWidth\n    const targetOffset = target.getBoundingClientRect()\n\n    const windowScrollTop = this.getWindowScrollTop()\n    const windowScrollLeft = this.getWindowScrollLeft()\n\n    const viewport = this.getViewport()\n\n    let top: number\n    let left: number\n\n    if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {\n      top = targetOffset.top + windowScrollTop - elementOuterHeight\n      element.style.transformOrigin = 'bottom'\n\n      if (top < 0) {\n        top = windowScrollTop\n      }\n    } else {\n      top = targetOuterHeight + targetOffset.top + windowScrollTop\n      element.style.transformOrigin = 'top'\n    }\n\n    if (targetOffset.left + elementOuterWidth > viewport.width) {\n      left = Math.max(\n        0,\n        targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth\n      )\n    } else {\n      left = targetOffset.left + windowScrollTop\n    }\n\n    element.style.top = top + 'px'\n    element.style.left = left + 'px'\n  }\n\n  public static getHiddenElementDimensions(element: HTMLElement): IDimensions {\n    const dimensions: IDimensions = {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n    }\n\n    element.style.display = 'none'\n    element.style.visibility = 'visibility'\n\n    return dimensions\n  }\n\n  public static getWindowScrollTop(): number {\n    const doc = document.documentElement\n    return (window.scrollY || doc.scrollTop) - (doc.clientLeft - 0)\n  }\n\n  public static getWindowScrollLeft(): number {\n    const doc = document.documentElement\n    return (window.scrollX || doc.scrollLeft) - (doc.clientLeft || 0)\n  }\n\n  public static getViewport(): IViewport {\n    const width =\n      window.innerWidth ||\n      document.documentElement.clientWidth ||\n      document.getElementsByTagName('body')[0].clientWidth\n\n    const height =\n      window.innerHeight ||\n      document.documentElement.clientHeight ||\n      document.getElementsByTagName('body')[0].clientHeight\n\n    return { width, height }\n  }\n\n  public static getOffset(el: HTMLElement): IOffset {\n    const { pageXOffset, pageYOffset } = window\n    const { documentElement, body } = document\n    const rect = el.getBoundingClientRect()\n\n    return {\n      top: rect.top + (pageYOffset || documentElement.scrollTop || body.scrollTop || 0),\n      left:\n        rect.left + (pageXOffset || documentElement.scrollLeft || body.scrollLeft || 0),\n    }\n  }\n\n  public static addClass(element: HTMLElement, className: string): void {\n    if (element.classList) {\n      element.classList.add(className)\n    } else {\n      element.className += ' ' + className\n    }\n  }\n\n  public static isIOS(): boolean {\n    return /iPad|iPhone|iPod/.test(navigator.userAgent)\n  }\n\n  public static isTouchDevice(): boolean {\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n  }\n\n  public static findSingleElement(\n    element: HTMLElement,\n    selector: string\n  ): HTMLElement | HTMLDivElement | null {\n    if (element) {\n      return element.querySelector(selector)\n    }\n\n    return null\n  }\n\n  public static getScrollableParents(element: HTMLElement | null): HTMLElement[] {\n    const scrollableParents = []\n\n    if (element) {\n      const parents = this.getParents(element)\n      const overflowRegex = /(auto|scroll)/\n      const overflowCheck = (node: HTMLElement) => {\n        const styleDeclaration = window['getComputedStyle'](node, null)\n        return (\n          overflowRegex.test(styleDeclaration.getPropertyValue('overflow')) ||\n          overflowRegex.test(styleDeclaration.getPropertyValue('overflowX')) ||\n          overflowRegex.test(styleDeclaration.getPropertyValue('overflowY'))\n        )\n      }\n\n      for (const parent of parents) {\n        const scrollSelectors = parent.nodeType === 1 && parent.dataset['scrollselectors']\n        if (scrollSelectors) {\n          const selectors = scrollSelectors.split(',')\n          for (const selector of selectors) {\n            const el = this.findSingleElement(parent, selector)\n            if (el && overflowCheck(el)) {\n              scrollableParents.push(el)\n            }\n          }\n        }\n\n        if (parent.nodeType !== 9 && overflowCheck(parent)) {\n          scrollableParents.push(parent)\n        }\n      }\n    }\n\n    return scrollableParents\n  }\n\n  public static getParents(\n    element: HTMLElement,\n    parents: HTMLElement[] = []\n  ): HTMLElement[] {\n    return element['parentElement'] === null\n      ? parents\n      : this.getParents(element.parentElement, parents.concat([element.parentElement]))\n  }\n\n  public static hasClass(element: HTMLElement, className: string): boolean {\n    if (element.classList) {\n      return element.classList.contains(className)\n    } else {\n      return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)\n    }\n  }\n\n  public static removeClass(element: HTMLElement, className: string): void {\n    if (element.classList) {\n      element.classList.remove(className)\n    } else {\n      element.className = element.className.replace(\n        new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'),\n        ' '\n      )\n    }\n  }\n\n  public static setAttribute(element: HTMLElement, name: string, value: string): void {\n    element.setAttribute(name, value)\n  }\n}\n",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AppointmentsService",
            "id": "injectable-AppointmentsService-95d28a950b3bdafaaa2a97ae12c8962c42d7e173bbb62784e923e8adfd48e498f67703329890bced35ea4f7711d31a5a8f7357fb825afa93c582b04536bf2977",
            "file": "src/app/modules/appointments/appointments.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getLastPatients",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ILastPatients[]>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable, map } from 'rxjs'\n\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { environment } from '../../../environments/environment'\n\nexport interface ILastPatients {\n  id: string\n  name: string\n  photo: string\n  visitTime: Date\n  date: Date\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppointmentsService {\n  constructor(private http: HttpClient) {}\n\n  getLastPatients(): Observable<ILastPatients[]> {\n    return this.http.get<ILastPatients[]>(`${environment.BASE_URL}/last-patients`).pipe(\n      map((patients) => {\n        return patients.map((patient) => ({\n          id: patient.id,\n          name: patient.name,\n          photo: patient.photo,\n          visitTime: patient.visitTime,\n          date: patient.date,\n        }))\n      })\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-918e75f2838f91fbc972b29f952f0b56d5ee3655b4a13735e18eaddb18de1827055cd34e1bb97a761b20ece4b6ab37891f05a23fcd8c961c7bbf84776f3d1f68",
            "file": "src/app/modules/authentication/authentication.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "user",
                            "type": "ILoginUserDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "ILoginUserDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Router } from '@angular/router'\nimport { environment } from './../../../environments/environment'\nimport { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { LocalStorageService } from 'src/app/common/local-storage/local-storage.service'\n\nexport interface ILoginUserDto {\n  login: string\n  password: string\n  rememberMe: boolean\n}\n\nexport interface IToken {\n  token: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticationService {\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private localStorage: LocalStorageService\n  ) {}\n\n  login(user: ILoginUserDto): void {\n    this.http.post<IToken>(`${environment.BASE_URL}/login`, user).subscribe({\n      next: (token: IToken) => {\n        this.localStorage.set('HC_TOKEN', token)\n        this.router.navigate(['home'])\n      },\n    })\n  }\n\n  logout(): void {\n    this.localStorage.remove('HC_TOKEN')\n    this.router.navigate(['/auth/login'])\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "localStorage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "localStorage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BaseTableService",
            "id": "injectable-BaseTableService-8b7e67aece57fc9e15f27e28bdfa1ef3879ecb27a0807319846ce7942b01a8a6e7934c6357ed992a9cffbe1091b0f6ba5ce7414beb3609b462f9df3325ef69af",
            "file": "src/app/common/base-table/base-table.service.ts",
            "properties": [
                {
                    "name": "_selectedColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "cols",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "limit",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "sortColumn",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "sortDirection",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [
                {
                    "name": "changeLimit",
                    "args": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "pageChange",
                            "type": "IPageChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageChange",
                            "type": "IPageChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeUrlParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ActivatedRoute, Router } from '@angular/router'\n\nimport { IColumn } from './../../components/table/table.component'\nimport { IPageChange } from 'src/app/components/pagination/pagination.component'\nimport { Injectable } from '@angular/core'\n\ninterface IParams {\n  page: string\n  limit: string\n  sortColumn: string\n  sortDirection: string\n}\n\n@Injectable()\nexport class BaseTableService {\n  page = 1\n  limit = 5\n  sortColumn: string | undefined = undefined\n  sortDirection: string | undefined = undefined\n  cols: IColumn[] = []\n  _selectedColumns: IColumn[] = []\n\n  constructor(private route: ActivatedRoute, private router: Router) {\n    this.route.queryParams.subscribe((params) => {\n      if (Object.keys(params).length !== 0) {\n        const { page, limit, sortColumn, sortDirection } = params as IParams\n\n        this.page = page ? Number(page) : 1\n        this.limit = limit ? Number(limit) : 5\n        this.sortColumn = sortColumn\n        this.sortDirection = sortDirection\n      }\n    })\n  }\n\n  get selectedColumns(): IColumn[] {\n    return this._selectedColumns\n  }\n\n  set selectedColumns(val: IColumn[]) {\n    this._selectedColumns = this.cols.filter((col) => val.includes(col))\n  }\n\n  sort(event: { field: string; order: number }) {\n    this.sortColumn = event.field\n    this.sortDirection = event.order === 1 ? 'ASC' : 'DESC'\n  }\n\n  changePage(pageChange: IPageChange) {\n    this.page = pageChange.page\n    this.changeUrlParams()\n  }\n\n  changeLimit(limit: number) {\n    this.limit = limit\n    this.changeUrlParams()\n  }\n\n  private changeUrlParams() {\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: {\n        page: this.page,\n        limit: this.limit,\n        sortColumn: this.sortColumn,\n        sortDirection: this.sortDirection,\n      },\n      replaceUrl: true,\n    })\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "selectedColumns": {
                    "name": "selectedColumns",
                    "setSignature": {
                        "name": "selectedColumns",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "IColumn[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "IColumn[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selectedColumns",
                        "type": "[]",
                        "returnType": "IColumn[]",
                        "line": 36
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "BreadcrumbService",
            "id": "injectable-BreadcrumbService-afeb36c5fe93c6fd194720c5c89b32857b9d6f88c69c3e008e24aedcdb19a60fe117390b8b2166be3426581447f752f2ac33414def5d826d00648b38904af7cc",
            "file": "src/app/components/breadcrumb/breadcrumb.service.ts",
            "properties": [
                {
                    "name": "_breadcrumbs$",
                    "defaultValue": "new BehaviorSubject<IBreadcrumbItem[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "breadcrumbs$",
                    "defaultValue": "this._breadcrumbs$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addBreadcrumb",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentUrl",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "breadcrumbs",
                            "type": "IBreadcrumbItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentUrl",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "breadcrumbs",
                            "type": "IBreadcrumbItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLabel",
                    "args": [
                        {
                            "name": "data",
                            "type": "Data",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Data",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ActivatedRouteSnapshot, Data, NavigationEnd, Router } from '@angular/router'\nimport { BehaviorSubject, filter } from 'rxjs'\n\nimport { IBreadcrumbItem } from './breadcrumb.component'\nimport { Injectable } from '@angular/core'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbService {\n  private readonly _breadcrumbs$ = new BehaviorSubject<IBreadcrumbItem[]>([])\n\n  readonly breadcrumbs$ = this._breadcrumbs$.asObservable()\n\n  constructor(private router: Router) {\n    this.router.events\n      .pipe(filter((event) => event instanceof NavigationEnd))\n      .subscribe(() => {\n        const root = this.router.routerState.snapshot.root\n        const breadcrumbs: IBreadcrumbItem[] = []\n        this.addBreadcrumb(root, [], breadcrumbs)\n\n        this._breadcrumbs$.next(breadcrumbs)\n      })\n  }\n\n  private addBreadcrumb(\n    route: ActivatedRouteSnapshot | null,\n    parentUrl: string[],\n    breadcrumbs: IBreadcrumbItem[]\n  ) {\n    if (route) {\n      const routeUrl = parentUrl.concat(route.url.map((url) => url.path))\n\n      if (route.data['breadcrumb']) {\n        const breadcrumb = {\n          label: this.getLabel(route.data),\n          routerLink: '/' + routeUrl.join('/'),\n        }\n        breadcrumbs.push(breadcrumb)\n      }\n\n      this.addBreadcrumb(route.firstChild, routeUrl, breadcrumbs)\n    }\n  }\n\n  private getLabel(data: Data) {\n    return typeof data['breadcrumb'] === 'function'\n      ? data['breadcrumb'](data)\n      : data['breadcrumb']\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataService",
            "id": "injectable-DataService-2302049ba6fd4f1e6527cd1704466ee07f6f22d1fb979b4250cbd007acd281b15be1a5621cdabcd79fcbef33962fa4b04abf959de8d73d5ea167a0e715af7741",
            "file": "src/app/components/table/data.service.ts",
            "properties": [
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaginationDirective",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "dataToRender",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { PaginationDirective } from './pagination.directive'\n\n@Injectable()\nexport class DataService {\n  public value: any[] = []\n\n  get processedData() {\n    return this.value || []\n  }\n\n  constructor(public pagination: PaginationDirective) {}\n\n  dataToRender(data: any) {\n    const _data = data || this.processedData\n\n    if (_data && this.pagination.paginator) {\n      const first = this.pagination.first\n      return _data.slice(first, first + this.pagination.rows)\n    }\n\n    return _data\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pagination",
                        "type": "PaginationDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "pagination",
                        "type": "PaginationDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "processedData": {
                    "name": "processedData",
                    "getSignature": {
                        "name": "processedData",
                        "type": "",
                        "returnType": "",
                        "line": 9
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "HcConfig",
            "id": "injectable-HcConfig-604964b8928008731db3b30e4705d92e3c7995887e07e8e2784fb4bea141974aaca2b1daccd5394f18cd631238a5a75c0922f76fab9020719d218c5f2c6ab821",
            "file": "src/app/common/hc-config/hc-config.service.ts",
            "properties": [
                {
                    "name": "zIndex",
                    "defaultValue": "{\n    modal: 1100,\n    overlay: 1000,\n    menu: 1000,\n    tooltip: 1100,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HcConfig {\n  zIndex = {\n    modal: 1100,\n    overlay: 1000,\n    menu: 1000,\n    tooltip: 1100,\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-d1cbfe9cc601ded1616d23c5d878dc4673e6918484a4f3100c024da85a4c47d98ded4a16eb38aaf53ae8dd15ccc20d53191b2babfe75f2561b0fec4eb9b271fc",
            "file": "src/app/common/local-storage/local-storage.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any | null",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LocalStorageService {\n  set(key: string, value: any): void {\n    window.localStorage.setItem(key, JSON.stringify(value))\n  }\n\n  get(key: string): any | null {\n    return JSON.parse(window.localStorage.getItem(key) as string)\n  }\n\n  remove(key: string): void {\n    window.localStorage.removeItem(key)\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "MessageService",
            "id": "injectable-MessageService-820ac26388af51604fda4974d78cf9d984f58a6d6c95ab17a3d0c72c32f5be00e32f882e50ccc8d0a75003b40466232c00c835cd23c3c98bbfb6e30c3e78c00d",
            "file": "src/app/components/toast/message.service.ts",
            "properties": [
                {
                    "name": "clearObserver",
                    "defaultValue": "this.clearSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "clearSource",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "messageObserver",
                    "defaultValue": "this.messageSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "messageSource",
                    "defaultValue": "new Subject<IMessage | IMessage[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "message",
                            "type": "IMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "IMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Subject } from 'rxjs'\n\nexport interface IMessage {\n  severity?: 'success' | 'error'\n  detail?: string\n  key?: string\n  closable?: boolean\n  life?: number\n  sticky?: boolean\n}\n\n@Injectable()\nexport class MessageService {\n  private messageSource = new Subject<IMessage | IMessage[]>()\n  private clearSource = new Subject<string>()\n\n  messageObserver = this.messageSource.asObservable()\n  clearObserver = this.clearSource.asObservable()\n\n  add(message: IMessage) {\n    if (message) {\n      this.messageSource.next(message)\n    }\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "MswService",
            "id": "injectable-MswService-a9ba5ec20555240db7bb987c40d495b2c03c96add48c7b19df832a123ffc95740850c429524452f75334aea316a5676fbcc099b2d3f9556df87848fda1bba8f5",
            "file": "src/app/components/msw/msw.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMockServiceWorkerLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setMockServiceWorkerLocalStorage",
                    "args": [
                        {
                            "name": "start",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "start",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MswService {\n  setMockServiceWorkerLocalStorage(start: boolean) {\n    window.localStorage.setItem('MSW', JSON.stringify(start))\n  }\n\n  getMockServiceWorkerLocalStorage(): boolean {\n    const msw: boolean | null = JSON.parse(window.localStorage.getItem('MSW') as string)\n\n    if (msw) {\n      return msw\n    }\n\n    return false\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "OverlayService",
            "id": "injectable-OverlayService-e36a9a783d57438122e8b7da32e29a9de5b3a641a1e0073978b8f34c9f51c9538ce2a603a9a07c4945ad1e95de8bb446a801f322c290e5af1e2eaf8c2e6235f2",
            "file": "src/app/common/overlay/overlay.service.ts",
            "properties": [
                {
                    "name": "clickObservable",
                    "defaultValue": "this.clickSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "clickSource",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Subject } from 'rxjs'\n\nexport interface IMessage {\n  severity?: string\n  summary?: string\n  detail?: string | number\n  key?: string\n  life?: number\n  sticky?: boolean\n  closable?: boolean\n  icon?: string\n  contentStyleClass?: string\n  styleClass?: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OverlayService {\n  private clickSource = new Subject()\n\n  clickObservable = this.clickSource.asObservable()\n\n  add(event: { originalEvent: IMessage | IMessage[]; target: HTMLElement }): void {\n    if (event) {\n      this.clickSource.next(event.originalEvent)\n    }\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PatientsService",
            "id": "injectable-PatientsService-17f74bdd00b72ad9313ee6f62d34603a54e79440a1aeaf1b6af165630b38f010010d5c0cfdbc8db2e79f93d6f2f6fb680dd52d240364ceccab8707f4852fc0e1",
            "file": "src/app/modules/patients/patients.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "patient",
                            "type": "Omit<IPatient | id>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IPatient>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "patient",
                            "type": "Omit<IPatient | id>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortDirection",
                            "type": "\"ASC\" | \"DESC\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "sortColumn",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IPagination<IPatient>>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortDirection",
                            "type": "\"ASC\" | \"DESC\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortColumn",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { IPagination } from 'src/app/models/pagination.model'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { environment } from 'src/environments/environment'\nimport { stringify } from 'query-string'\n\nexport interface IPatient {\n  id: string\n  name: string\n  email: string\n  address: string\n  phone: string\n  age: number\n  status: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PatientsService {\n  constructor(private http: HttpClient) {}\n\n  create(patient: Omit<IPatient, 'id'>): Observable<IPatient> {\n    return this.http.post<IPatient>(`${environment.BASE_URL}/patients`, patient)\n  }\n\n  findAll(\n    page: number,\n    limit: number,\n    sortDirection?: 'ASC' | 'DESC',\n    sortColumn?: string\n  ): Observable<IPagination<IPatient>> {\n    const query = stringify(\n      { page, limit, sortDirection, sortColumn },\n      {\n        skipNull: true,\n        skipEmptyString: true,\n      }\n    )\n    return this.http.get<IPagination<IPatient>>(\n      `${environment.BASE_URL}/patients?${query}`\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PaymentsService",
            "id": "injectable-PaymentsService-3d55ff46ff488b96e7aed0338dbe37f25a280df51389417feb1646f68546c8eda567fe9e3c5b160016ab80b971c5d4bc6f43d542ee73a865beb40ec996366ef6",
            "file": "src/app/services/payments/payments.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getLastPayments",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ILastPayments[]>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { environment } from '../../../environments/environment'\n\nexport interface ILastPayments {\n  id: string\n  recipient: string\n  amount: number\n  date: Date\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentsService {\n  constructor(private http: HttpClient) {}\n\n  getLastPayments(): Observable<ILastPayments[]> {\n    return this.http.get<ILastPayments[]>(\n      `${environment.BASE_URL}/payments/last-payments`\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductsService",
            "id": "injectable-ProductsService-0afb0c2d4ae9dc37dbf50e4afa6b1a23ac041bce8b92acbbc2b91f398d44201657647ec98353d0a3915618b9786ec55e867b5fa794b6e419aafc4178a029338e",
            "file": "src/app/modules/docs/products.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getProducts",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortColumn",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IPagination<IProduct>>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortColumn",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortDirection",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { IPagination } from 'src/app/models/pagination.model'\nimport { Injectable } from '@angular/core'\nimport { MswService } from 'src/app/components/msw/msw.service'\nimport { Observable } from 'rxjs'\nimport { environment } from 'src/environments/environment'\nimport { stringify } from 'query-string'\n\nexport interface IProduct {\n  id: string\n  code: string\n  name: string\n  description: string\n  image: string\n  price: number\n  category: string\n  quantity: number\n  inventoryStatus: string\n  rating: number\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductsService {\n  constructor(private http: HttpClient, private mswService: MswService) {}\n\n  getProducts(\n    page: number,\n    limit: number,\n    sortColumn?: string,\n    sortDirection?: string\n  ): Observable<IPagination<IProduct>> {\n    const query = stringify(\n      { page, limit, sortColumn, sortDirection },\n      {\n        skipEmptyString: true,\n        skipNull: true,\n      }\n    )\n\n    return this.http.get<IPagination<IProduct>>(\n      `${environment.BASE_URL}/products?${query}`\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mswService",
                        "type": "MswService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mswService",
                        "type": "MswService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TableService",
            "id": "injectable-TableService-1f010fe3852c052ff5b7249c04893df6c83c04f184a3d37d61fca09f64c0488650ab66af75547c4e34c8e342e8e994f99f566150223b7af95c871f3f9ae43afd",
            "file": "src/app/components/table/table.service.ts",
            "properties": [
                {
                    "name": "selectionSource",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectionSource$",
                    "defaultValue": "this.selectionSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sortSource",
                    "defaultValue": "new Subject<ISortMeta | ISortMeta[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "sortSource$",
                    "defaultValue": "this.sortSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "valueSource",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "valueSource$",
                    "defaultValue": "this.valueSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [
                {
                    "name": "onSelectionChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSort",
                    "args": [
                        {
                            "name": "sortMeta",
                            "type": "ISortMeta | ISortMeta[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortMeta",
                            "type": "ISortMeta | ISortMeta[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { Subject } from 'rxjs'\n\nexport interface ISortMeta {\n  field: string\n  order: number\n}\n\n@Injectable()\nexport class TableService {\n  private sortSource = new Subject<ISortMeta | ISortMeta[]>()\n  private selectionSource = new Subject()\n  private valueSource = new Subject<any>()\n\n  sortSource$ = this.sortSource.asObservable()\n  selectionSource$ = this.selectionSource.asObservable()\n  valueSource$ = this.valueSource.asObservable()\n\n  onSort(sortMeta: ISortMeta | ISortMeta[]) {\n    this.sortSource.next(sortMeta)\n  }\n\n  onSelectionChange() {\n    this.selectionSource.next(null)\n  }\n\n  onValueChange(value: any) {\n    this.valueSource.next(value)\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-e800b8bf2d0cecdb4009dd7bb561d4dd117f326e98caebf73e947d89e2bdccbec7fe3ef76b11f1547dd24444b9b05b061924116e27c284318cff4ff82b344d70",
            "file": "src/app/modules/user/services/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMe",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IMe>",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IProfile>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\nimport { environment } from './../../../../environments/environment'\n\ninterface IEvents {\n  title: string\n  description: string\n  date: Date\n}\ninterface ISocialMedias {\n  facebook: string\n  instagram: string\n  linkedin: string\n  twitter: string\n}\n\ninterface IAddress {\n  number: number\n  street: string\n  state: string\n  city: string\n  cep: string\n}\n\ninterface IContact {\n  phone: string\n  address: IAddress\n}\n\ninterface IHistory {\n  lastVisit: Date\n}\n\nexport interface IProfile {\n  name: string\n  age: number\n  gender: 'MALE' | 'FEMALE'\n  profileBackgroundImage: string\n  photo: string\n  description: string\n  contact: IContact\n  socialMedias: ISocialMedias\n  events: IEvents[]\n  healthProblems: string[]\n  status: 'APPROVED' | 'PENDING'\n  history: IHistory[]\n}\n\nexport interface IMe {\n  name: string\n  email: string\n  photo: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  getProfile(): Observable<IProfile> {\n    return this.http.get<IProfile>(`${environment.BASE_URL}/user/profile`)\n  }\n\n  getMe(): Observable<IMe> {\n    return this.http.get<IMe>(`${environment.BASE_URL}/user/me`)\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-80b66d7c361b12c0d99ab83789c132d478844807e49b8134d818690ddb305ee94e265ad15afb768f6a60c7a093c259c17fb4c3c1a82f89c13ef1d661cb409428",
            "file": "src/app/modules/authentication/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { LocalStorageService } from 'src/app/common/local-storage/local-storage.service'\nimport { Injectable } from '@angular/core'\nimport { CanActivate, Router } from '@angular/router'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private localStorage: LocalStorageService, private router: Router) {}\n\n  canActivate(): boolean {\n    const token = this.localStorage.get('HC_TOKEN')\n\n    if (token) {\n      return true\n    }\n\n    this.router.navigate(['/auth/login'])\n    return false\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "localStorage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "localStorage",
                        "type": "LocalStorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "ConnectedOverlayScrollHandler",
            "id": "class-ConnectedOverlayScrollHandler-c53c4ca3775e67f7e631511e0d262514cd1552c128692b96a21c177dcd080dc9faa1ecdd72e690184f298f69cde0d26ff56cb1926d16e35a5419a63a5d621ba7",
            "file": "src/app/common/connected-overlay-scroll-handler/connected-overlay-scroll-handler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DomHandler } from '../dom-handler/dom-handler'\n\nexport interface IConnectedOverlayScrollHandler {\n  bindScrollListener: () => void\n  unbindScrollListener: () => void\n  destroy: () => void\n}\n\nexport class ConnectedOverlayScrollHandler {\n  element: HTMLElement | null\n  listener: null | ((this: HTMLElement, ev: Event) => void)\n  scrollableParents: HTMLElement[] | null = null\n\n  constructor(element: HTMLElement, listener: () => void) {\n    this.element = element\n    this.listener = listener\n  }\n\n  bindScrollListener(): void {\n    this.scrollableParents = DomHandler.getScrollableParents(this.element)\n    for (let i = 0; i < this.scrollableParents.length; i++) {\n      if (this.listener) {\n        this.scrollableParents[i].addEventListener('scroll', this.listener)\n      }\n    }\n  }\n\n  unbindScrollListener() {\n    if (this.scrollableParents) {\n      for (let i = 0; i < this.scrollableParents.length; i++) {\n        if (this.listener) {\n          this.scrollableParents[i].removeEventListener('scroll', this.listener)\n        }\n      }\n    }\n  }\n\n  destroy(): void {\n    this.unbindScrollListener()\n    this.element = null\n    this.listener = null\n    this.scrollableParents = null\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "element",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listener",
                        "type": "function",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "function": []
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listener",
                        "type": "function",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "function": [],
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "listener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | ",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "scrollableParents",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement[] | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "bindScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unbindScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DomHandler",
            "id": "class-DomHandler-9b9b65c631ce8f4d3bf8e16c3f4b2f7d7b15cc3c6360ac39fe1697b85636b2f4e7bcd9be8b51c42e77795e64a7fd1620f51faaba52d34ec1b91693a4d28ae44d",
            "file": "src/app/common/dom-handler/dom-handler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "interface IDimensions {\n  width: number\n  height: number\n}\n\ninterface IViewport {\n  width: number\n  height: number\n}\n\nexport interface IOffset {\n  top: number\n  left: number\n}\n\nexport class DomHandler {\n  public static isElement(obj: HTMLElement): boolean {\n    return typeof HTMLElement === 'object'\n      ? obj instanceof HTMLElement\n      : obj &&\n          typeof obj === 'object' &&\n          obj !== null &&\n          (obj as HTMLElement).nodeType === 1 &&\n          typeof (obj as HTMLElement).nodeName === 'string'\n  }\n\n  public static appendChild(element: HTMLElement, target: HTMLElement): void {\n    if (this.isElement(target)) {\n      target.appendChild(element)\n    } else {\n      throw `Cannot append ${target} to ${element}`\n    }\n  }\n\n  public static relativePosition(element: HTMLElement, target: HTMLElement): void {\n    const elementDimensions = element.offsetParent\n      ? { width: element.offsetWidth, height: element.offsetHeight }\n      : this.getHiddenElementDimensions(element)\n    const targetHeight = target.offsetHeight\n    const targetOffset = target.getBoundingClientRect()\n    const viewport = this.getViewport()\n\n    let top: number\n    let left: number\n\n    if (targetOffset.top + targetHeight + elementDimensions.height > viewport.height) {\n      top = -1 * elementDimensions.height\n      element.style.transformOrigin = 'bottom'\n      if (targetOffset.top + top < 0) {\n        top = -1 * targetOffset.top\n      }\n    } else {\n      top = targetHeight\n      element.style.transformOrigin = 'top'\n    }\n\n    if (elementDimensions.width > viewport.width) {\n      // element wider then viewport and cannot fit on screen (align at left side of viewpoert)\n      left = targetOffset.left * -1\n    } else if (targetOffset.left + elementDimensions.width > viewport.width) {\n      // element wider then viewport but can be fit on screen (align at right side of viewport)\n      left = (targetOffset.left + elementDimensions.width - viewport.width) * -1\n    } else {\n      // element fits on screen (align with target)\n      left = 0\n    }\n\n    element.style.top = top + 'px'\n    element.style.left = left + 'px'\n  }\n\n  public static absolutePosition(element: HTMLElement, target: HTMLElement): void {\n    const elementDimensions = element.offsetParent\n      ? { width: element.offsetWidth, height: element.offsetHeight }\n      : this.getHiddenElementDimensions(element)\n\n    const elementOuterHeight = elementDimensions.height\n    const elementOuterWidth = elementDimensions.width\n\n    const targetOuterHeight = target.offsetHeight\n    const targetOuterWidth = target.offsetWidth\n    const targetOffset = target.getBoundingClientRect()\n\n    const windowScrollTop = this.getWindowScrollTop()\n    const windowScrollLeft = this.getWindowScrollLeft()\n\n    const viewport = this.getViewport()\n\n    let top: number\n    let left: number\n\n    if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {\n      top = targetOffset.top + windowScrollTop - elementOuterHeight\n      element.style.transformOrigin = 'bottom'\n\n      if (top < 0) {\n        top = windowScrollTop\n      }\n    } else {\n      top = targetOuterHeight + targetOffset.top + windowScrollTop\n      element.style.transformOrigin = 'top'\n    }\n\n    if (targetOffset.left + elementOuterWidth > viewport.width) {\n      left = Math.max(\n        0,\n        targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth\n      )\n    } else {\n      left = targetOffset.left + windowScrollTop\n    }\n\n    element.style.top = top + 'px'\n    element.style.left = left + 'px'\n  }\n\n  public static getHiddenElementDimensions(element: HTMLElement): IDimensions {\n    const dimensions: IDimensions = {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n    }\n\n    element.style.display = 'none'\n    element.style.visibility = 'visibility'\n\n    return dimensions\n  }\n\n  public static getWindowScrollTop(): number {\n    const doc = document.documentElement\n    return (window.scrollY || doc.scrollTop) - (doc.clientLeft - 0)\n  }\n\n  public static getWindowScrollLeft(): number {\n    const doc = document.documentElement\n    return (window.scrollX || doc.scrollLeft) - (doc.clientLeft || 0)\n  }\n\n  public static getViewport(): IViewport {\n    const width =\n      window.innerWidth ||\n      document.documentElement.clientWidth ||\n      document.getElementsByTagName('body')[0].clientWidth\n\n    const height =\n      window.innerHeight ||\n      document.documentElement.clientHeight ||\n      document.getElementsByTagName('body')[0].clientHeight\n\n    return { width, height }\n  }\n\n  public static getOffset(el: HTMLElement): IOffset {\n    const { pageXOffset, pageYOffset } = window\n    const { documentElement, body } = document\n    const rect = el.getBoundingClientRect()\n\n    return {\n      top: rect.top + (pageYOffset || documentElement.scrollTop || body.scrollTop || 0),\n      left:\n        rect.left + (pageXOffset || documentElement.scrollLeft || body.scrollLeft || 0),\n    }\n  }\n\n  public static addClass(element: HTMLElement, className: string): void {\n    if (element.classList) {\n      element.classList.add(className)\n    } else {\n      element.className += ' ' + className\n    }\n  }\n\n  public static isIOS(): boolean {\n    return /iPad|iPhone|iPod/.test(navigator.userAgent)\n  }\n\n  public static isTouchDevice(): boolean {\n    return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n  }\n\n  public static findSingleElement(\n    element: HTMLElement,\n    selector: string\n  ): HTMLElement | HTMLDivElement | null {\n    if (element) {\n      return element.querySelector(selector)\n    }\n\n    return null\n  }\n\n  public static getScrollableParents(element: HTMLElement | null): HTMLElement[] {\n    const scrollableParents = []\n\n    if (element) {\n      const parents = this.getParents(element)\n      const overflowRegex = /(auto|scroll)/\n      const overflowCheck = (node: HTMLElement) => {\n        const styleDeclaration = window['getComputedStyle'](node, null)\n        return (\n          overflowRegex.test(styleDeclaration.getPropertyValue('overflow')) ||\n          overflowRegex.test(styleDeclaration.getPropertyValue('overflowX')) ||\n          overflowRegex.test(styleDeclaration.getPropertyValue('overflowY'))\n        )\n      }\n\n      for (const parent of parents) {\n        const scrollSelectors = parent.nodeType === 1 && parent.dataset['scrollselectors']\n        if (scrollSelectors) {\n          const selectors = scrollSelectors.split(',')\n          for (const selector of selectors) {\n            const el = this.findSingleElement(parent, selector)\n            if (el && overflowCheck(el)) {\n              scrollableParents.push(el)\n            }\n          }\n        }\n\n        if (parent.nodeType !== 9 && overflowCheck(parent)) {\n          scrollableParents.push(parent)\n        }\n      }\n    }\n\n    return scrollableParents\n  }\n\n  public static getParents(\n    element: HTMLElement,\n    parents: HTMLElement[] = []\n  ): HTMLElement[] {\n    return element['parentElement'] === null\n      ? parents\n      : this.getParents(element.parentElement, parents.concat([element.parentElement]))\n  }\n\n  public static hasClass(element: HTMLElement, className: string): boolean {\n    if (element.classList) {\n      return element.classList.contains(className)\n    } else {\n      return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)\n    }\n  }\n\n  public static removeClass(element: HTMLElement, className: string): void {\n    if (element.classList) {\n      element.classList.remove(className)\n    } else {\n      element.className = element.className.replace(\n        new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'),\n        ' '\n      )\n    }\n  }\n\n  public static setAttribute(element: HTMLElement, name: string, value: string): void {\n    element.setAttribute(name, value)\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "absolutePosition",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addClass",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "appendChild",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findSingleElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selector",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement | HTMLDivElement | null",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHiddenElementDimensions",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDimensions",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOffset",
                    "args": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IOffset",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParents",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parents",
                            "type": "HTMLElement[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement[]",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parents",
                            "type": "HTMLElement[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScrollableParents",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement[]",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getViewport",
                    "args": [],
                    "optional": false,
                    "returnType": "IViewport",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "getWindowScrollLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "getWindowScrollTop",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "hasClass",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isElement",
                    "args": [
                        {
                            "name": "obj",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isIOS",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "isTouchDevice",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "relativePosition",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeClass",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAttribute",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ObjectUtils",
            "id": "class-ObjectUtils-d4c40978ce7c9f0943dec4eb89299d1551204df39a915fb7d850ed415a50cb221944f49158eeb75cc5b65d99ebffe3dab346c9bb47a730ea940c39f30167a8d6",
            "file": "src/app/common/object-utils/object-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ObjectUtils {\n  public static equals(obj1: any, obj2: any, field?: string): boolean {\n    if (field) {\n      return this.resolveFieldData(obj1, field) === this.resolveFieldData(obj2, field)\n    } else {\n      return this.equalsByValue(obj1, obj2)\n    }\n  }\n\n  public static equalsByValue(obj1: any, obj2: any): boolean {\n    if (obj1 === obj2) {\n      return true\n    }\n\n    if (obj1 && obj2 && typeof obj1 === 'object' && typeof obj2 === 'object') {\n      const arrA = Array.isArray(obj1)\n      const arrB = Array.isArray(obj2)\n      let i: number\n      let length: number\n      let key: any\n\n      if (arrA && arrB) {\n        length = obj1.length\n        if (length != obj2.length) {\n          return false\n        }\n        for (i = length; i-- !== 0; ) {\n          if (!this.equalsByValue(obj1[1], obj2[i])) {\n            return false\n          }\n        }\n        return true\n      }\n\n      if (arrA != arrB) {\n        return false\n      }\n\n      const dateA = obj1 instanceof Date\n      const dateB = obj2 instanceof Date\n\n      if (dateA != dateB) {\n        return false\n      }\n\n      if (dateA && dateB) {\n        return obj1.getTime() == obj2.getTime()\n      }\n\n      const regexA = obj1 instanceof RegExp\n      const regexB = obj2 instanceof RegExp\n\n      if (regexA != regexB) {\n        return false\n      }\n\n      if (regexA && regexB) {\n        return obj1.toString() == obj2.toString()\n      }\n\n      const keys = Object.keys(obj1)\n      length = keys.length\n\n      if (length !== Object.keys(obj2).length) {\n        return false\n      }\n\n      for (i = length; i-- !== 0; ) {\n        if (!Object.prototype.hasOwnProperty.call(obj2, keys[i])) {\n          return false\n        }\n      }\n\n      for (i = length; i-- !== 0; ) {\n        key = keys[i]\n        if (!this.equalsByValue(obj1[key], obj2[key])) {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    return obj1 !== obj1 && obj2 !== obj2\n  }\n\n  public static isFunction(obj: any): boolean {\n    return !!(obj && obj.constructor && obj.call && obj.apply)\n  }\n\n  public static resolveFieldData(data: any, field: any): any {\n    if (data && field) {\n      if (this.isFunction(field)) {\n        return field(data)\n      } else if (field.indexOf('.') == -1) {\n        return data[field]\n      } else {\n        const fields: string[] = field.split('.')\n        let value = data\n        for (let i = 0, len = fields.length; i < len; ++i) {\n          if (value == null) {\n            return null\n          }\n\n          value = value[fields[i]]\n        }\n\n        return value\n      }\n    } else {\n      return null\n    }\n  }\n\n  public static isEmpty(value: any) {\n    return (\n      value === null ||\n      value === undefined ||\n      value === '' ||\n      (Array.isArray(value) && value.length === 0) ||\n      (!(value instanceof Date) &&\n        typeof value === 'object' &&\n        Object.keys(value).length === 0)\n    )\n  }\n\n  public static isNotEmpty(value: any) {\n    return !this.isEmpty(value)\n  }\n\n  public static contains(value: any, list: any): boolean {\n    if (value != null && list && list.length) {\n      for (const val of list) {\n        if (this.equals(value, val)) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "contains",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "obj1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "obj2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "obj2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equalsByValue",
                    "args": [
                        {
                            "name": "obj1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "obj2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "obj2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEmpty",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFunction",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNotEmpty",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolveFieldData",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ZIndexUtils",
            "id": "class-ZIndexUtils-150a8bd72ccc008312c47ab0a8cfbc21f3b3796062358bc6d574420e6cc94ef2eef9331b6a6f05e5fe562adbe450e531736611d422958ae3d2044fe7dba9684d",
            "file": "src/app/common/z-index-utils/z-index-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ZIndexUtils {\n  private static zIndexes: Array<{ key: string; value: number }> = []\n\n  private static generateZIndex(key: string, baseZIndex: number): number {\n    const lastZIndex =\n      this.zIndexes.length > 0\n        ? this.zIndexes[this.zIndexes.length - 1]\n        : { key, value: baseZIndex }\n\n    const newZIndex = lastZIndex.value + (lastZIndex.key === key ? 0 : baseZIndex) + 1\n\n    this.zIndexes.push({ key, value: newZIndex })\n\n    return newZIndex\n  }\n\n  private static revertZIndex(zIndex: number): void {\n    this.zIndexes = this.zIndexes.filter((obj) => obj.value !== zIndex)\n  }\n\n  private static getZIndex(element: HTMLElement): number {\n    return element ? parseInt(element.style.zIndex, 10) || 0 : 0\n  }\n\n  public static set(key: string, el: HTMLElement, baseZIndex: number) {\n    if (el) {\n      el.style.zIndex = String(this.generateZIndex(key, baseZIndex))\n    }\n  }\n\n  public static clear(element: HTMLElement) {\n    if (element) {\n      this.revertZIndex(this.getZIndex(element))\n      element.style.zIndex = ''\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "zIndexes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        121,
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateZIndex",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "baseZIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "baseZIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getZIndex",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "revertZIndex",
                    "args": [
                        {
                            "name": "zIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "zIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "baseZIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "baseZIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BadgeDirective",
            "id": "directive-BadgeDirective-9ffbf893b90dabf4757020dce282b6853e5920cf49df44c4960545a17dfac9453c53902a2c57c6cc3719e5450b0bcad01ab7395df0fea618c586cf127002e3a6",
            "file": "src/app/components/badge/badge.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef, Input, OnDestroy } from '@angular/core'\n\nimport { DomHandler } from './../../common/dom-handler/dom-handler'\nimport { uniqueId } from '../../utils/unique-id/unique-id'\n\n@Directive({\n  selector: '[hcBadge]',\n})\nexport class BadgeDirective implements AfterViewInit, OnDestroy {\n  private _value!: string\n  private _id!: string\n\n  initialized = false\n\n  @Input() severity!: string\n\n  @Input() get value(): string {\n    return this._value\n  }\n\n  set value(val: string) {\n    if (val !== this._value) {\n      this._value = val\n\n      if (this.initialized) {\n        const badge = document.getElementById(this._id)\n\n        if (this._value && badge) {\n          if (DomHandler.hasClass(badge, 'hc-badge-dot')) {\n            DomHandler.removeClass(badge, 'hc-badge-dot')\n          }\n\n          if (String(this._value).length === 1) {\n            DomHandler.addClass(badge, 'hc-badge-no-gutter')\n          } else {\n            DomHandler.removeClass(badge, 'hc-badge-no-gutter')\n          }\n        } else if (!this._value && badge && !DomHandler.hasClass(badge, 'p-badge-dot')) {\n          DomHandler.addClass(badge, 'hc-badge-dot')\n        }\n\n        if (badge) {\n          badge.innerHTML = ''\n          badge.appendChild(document.createTextNode(this._value))\n        }\n      }\n    }\n  }\n\n  constructor(private el: ElementRef) {}\n\n  ngAfterViewInit(): void {\n    const { nativeElement } = this.el\n    this._id = uniqueId() + '_badge'\n\n    const el =\n      nativeElement.nodeName.indexOf('-') !== -1\n        ? nativeElement.firstChild\n        : nativeElement\n\n    const badge = document.createElement('span')\n    badge.id = this._id\n    badge.className = 'hc-badge'\n    DomHandler.setAttribute(badge, 'role', 'badge')\n\n    if (this.severity) {\n      DomHandler.addClass(badge, 'hc-badge-' + this.severity)\n    } else {\n      DomHandler.addClass(badge, 'hc-badge-danger')\n    }\n\n    if (this.value != null) {\n      badge.appendChild(document.createTextNode(this.value))\n\n      if (String(this.value).length === 1) {\n        DomHandler.addClass(badge, 'hc-badge-no-gutter')\n      }\n    } else {\n      DomHandler.addClass(badge, 'hc-badge-dot')\n    }\n\n    DomHandler.addClass(el, 'hc-overlay-badge')\n    el.appendChild(badge)\n\n    this.initialized = true\n  }\n\n  ngOnDestroy(): void {\n    this.initialized = false\n  }\n}\n",
            "selector": "[hcBadge]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "severity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "string",
                        "returnType": "string",
                        "line": 17
                    }
                }
            }
        },
        {
            "name": "ButtonDirective",
            "id": "directive-ButtonDirective-fe369943db888b353a20f85cb0bc0acd2959832703949c9ea9935026aa86b73a19a35d197e01a9eb4ec72c5a8485742d0b6481af80ab9a05bc502d8038363bc1",
            "file": "src/app/components/button/button.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core'\n\n@Directive({\n  selector: '[hcButton]',\n})\nexport class ButtonDirective {}\n",
            "selector": "[hcButton]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "InjectHTMLDirective",
            "id": "directive-InjectHTMLDirective-81615f29e9062509238de5d661f7ba6c5d44f2ff705977965c3ce25edd18da4441078ff24eca4f11b0c33d728ebb1a4f0604e516aacad61f9d20338f5e34f292",
            "file": "src/app/directives/inject-html/inject-html.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input } from '@angular/core'\n\n@Directive({\n  selector: '[injectHTML]',\n})\nexport class InjectHTMLDirective {\n  @Input() set injectHTML(content: string) {\n    this.host.nativeElement.innerHTML = content\n  }\n\n  constructor(private host: ElementRef) {}\n}\n",
            "selector": "[injectHTML]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "injectHTML",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "host",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "host",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "injectHTML": {
                    "name": "injectHTML",
                    "setSignature": {
                        "name": "injectHTML",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "content",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 7,
                        "jsdoctags": [
                            {
                                "name": "content",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "PaginationDirective",
            "id": "directive-PaginationDirective-be7d5c55519bcd4e398d9e91a22804683616c19b36f335398d9ca08a8872f5eb4d427a24bae8ef0c08361ab7a079e766e73b9282725c3e877c4743fbb910c28a",
            "file": "src/app/components/table/pagination.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core'\nimport { IPageChange, IPagination } from '../pagination/pagination.component'\n\n@Directive({\n  selector: '[hcPagination]',\n})\nexport class PaginationDirective implements OnChanges {\n  _first = 0\n  selectedLimit = 5\n\n  @Input() paginator!: boolean\n  @Input() rows!: number\n  @Input() pagination!: IPagination\n  @Input() totalRecords!: number\n  @Input() showCurrentPageReport!: boolean\n  @Input() currentPageReportTemplate = '{currentPage} of {totalPages}'\n  @Input() rowsPerPageOptions: number[] = [5, 10, 25, 50]\n  @Input() limitLabel = 'Results per page'\n\n  @Output() pageEvent = new EventEmitter<IPageChange>()\n  @Output() onLimitChange = new EventEmitter<number>()\n\n  get first(): number {\n    return this._first\n  }\n\n  set first(val: number) {\n    this._first = val\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['pagination'].currentValue) {\n      this.rows = changes['pagination'].currentValue.itemsPerPage\n      this.totalRecords = changes['pagination'].currentValue.totalItems\n      this.selectedLimit = changes['pagination'].currentValue.itemsPerPage\n    }\n  }\n\n  onPageChange(event: IPageChange) {\n    this.pageEvent.emit(event)\n  }\n}\n",
            "selector": "[hcPagination]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "currentPageReportTemplate",
                    "defaultValue": "'{currentPage} of {totalPages}'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "limitLabel",
                    "defaultValue": "'Results per page'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "IPagination",
                    "decorators": []
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "rowsPerPageOptions",
                    "defaultValue": "[5, 10, 25, 50]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "showCurrentPageReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "totalRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onLimitChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageEvent",
                    "defaultValue": "new EventEmitter<IPageChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_first",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selectedLimit",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPageChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPageChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "first": {
                    "name": "first",
                    "setSignature": {
                        "name": "first",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "first",
                        "type": "number",
                        "returnType": "number",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "RowExpandDirective",
            "id": "directive-RowExpandDirective-e83a6ee2e210c87cf39b51e0939ad75138fc2a5ea970df2b339402bbaf23ff02123faf8c6caf488da7805b5e43408b2333a5f69b81e808e6f205351e68ba925e",
            "file": "src/app/components/table/row-expand.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, EventEmitter, Input, Output } from '@angular/core'\n\nimport { ObjectUtils } from './../../common/object-utils/object-utils'\n\n@Directive({\n  selector: '[hcRowExpand]',\n})\nexport class RowExpandDirective<T> {\n  @Input() dataKey?: string\n  @Input() expandedRowKeys: { [s: string]: boolean } = {}\n\n  @Output() onRowCollapse = new EventEmitter<{ originalEvent: Event; data: T }>()\n  @Output() onRowExpand = new EventEmitter<{ originalEvent: Event; data: T }>()\n\n  isRowExpanded(rowData: T): boolean {\n    return (\n      this.expandedRowKeys[\n        String(ObjectUtils.resolveFieldData(rowData, this.dataKey))\n      ] === true\n    )\n  }\n\n  toggleRow(rowData: T, event: Event): void {\n    if (!this.dataKey) {\n      throw new Error(`dataKey must be defined to use row expansion`)\n    }\n\n    const dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey))\n\n    if (this.expandedRowKeys[dataKeyValue] !== undefined) {\n      delete this.expandedRowKeys[dataKeyValue]\n      this.onRowCollapse.emit({\n        originalEvent: event,\n        data: rowData,\n      })\n    } else {\n      this.expandedRowKeys[dataKeyValue] = true\n      this.onRowExpand.emit({\n        originalEvent: event,\n        data: rowData,\n      })\n    }\n\n    event.preventDefault()\n  }\n}\n",
            "selector": "[hcRowExpand]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "dataKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "expandedRowKeys",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "literal type",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRowCollapse",
                    "defaultValue": "new EventEmitter<{ originalEvent: Event; data: T }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                },
                {
                    "name": "onRowExpand",
                    "defaultValue": "new EventEmitter<{ originalEvent: Event; data: T }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isRowExpanded",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleRow",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "RowTogglerDirective",
            "id": "directive-RowTogglerDirective-0459d21936f7fc1c36676b928466988654c83f061e90a07449d9a7d772e254d95a738301b950d3158cadfda7867f0bfd111b45c6ede11c24534fd6473c5d286c",
            "file": "src/app/components/table/row-toggler.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, Input } from '@angular/core'\n\nimport { RowExpandDirective } from './row-expand.directive'\n\n@Directive({\n  selector: '[hcRowToggler]',\n})\nexport class RowTogglerDirective<T> {\n  @Input('hcRowToggler') data!: T\n\n  constructor(public rowExpand: RowExpandDirective<T>) {}\n\n  @HostListener('click', ['$event'])\n  onClick(event: Event) {\n    this.rowExpand.toggleRow(this.data, event)\n    event.preventDefault()\n  }\n}\n",
            "selector": "[hcRowToggler]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "hcRowToggler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "T",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14
                }
            ],
            "propertiesClass": [
                {
                    "name": "rowExpand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RowExpandDirective<T>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rowExpand",
                        "type": "RowExpandDirective<T>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "rowExpand",
                        "type": "RowExpandDirective<T>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SelectDirective",
            "id": "directive-SelectDirective-b596d4e1a18bd303b7a19759ca559662e6015ccb0bf1c3820ff2e4c68444365016c671c9d893c1c9d139096710090995a4bca6ef0a6d97b11f959ce1b4540239",
            "file": "src/app/components/table/select.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core'\n\nimport { DataService } from './data.service'\nimport { ObjectUtils } from 'src/app/common/object-utils/object-utils'\nimport { TableService } from './table.service'\n\ninterface IRowSelectEvent {\n  originalEvent: Event\n  index: number\n  data: any\n  type: 'checkbox'\n}\n\nexport interface IHeaderCheckboxEvent {\n  originalEvent: Event\n  checked: boolean\n}\n\n@Directive({\n  selector: '[hcSelect]',\n})\nexport class SelectDirective implements OnChanges {\n  private _selectAll: boolean | null = null\n\n  private _selection: any\n  private _deselection: any\n\n  selectionKeys: any = {}\n  deselectionKeys: any = {}\n\n  preventSelectionSetterPropagation!: boolean\n\n  @Input() dataKey?: string\n  @Input() rowSelectable?: any\n  @Input() stateKey?: string\n  @Input() selectionPageOnly?: boolean\n  @Input() compareSelectionBy = 'deepEquals'\n\n  @Input() get selection(): any {\n    return this._selection\n  }\n\n  set selection(val: any) {\n    this._selection = val\n  }\n\n  @Input() get deselection(): any {\n    return this._deselection\n  }\n\n  set deselection(val: any) {\n    this._deselection = val\n  }\n\n  @Input() get selectAll(): boolean | null {\n    return this._selectAll\n  }\n\n  set selectAll(val: boolean | null) {\n    this._selectAll = val\n  }\n\n  @Output() selectionChange = new EventEmitter()\n  @Output() deselectionChange = new EventEmitter<any>()\n  @Output() headerCheckboxToggleEvent = new EventEmitter<IHeaderCheckboxEvent>()\n  @Output() rowUnselectEvent = new EventEmitter<IRowSelectEvent>()\n  @Output() rowSelectEvent = new EventEmitter<IRowSelectEvent>()\n  @Output() selectAllChange = new EventEmitter<IHeaderCheckboxEvent>()\n\n  constructor(private tableService: TableService, public data: DataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['selection']) {\n      this.selection = changes['selection'].currentValue\n\n      if (!this.preventSelectionSetterPropagation) {\n        this.updateSelectionKeys()\n        this.tableService.onSelectionChange()\n      }\n\n      this.preventSelectionSetterPropagation = false\n    }\n\n    if (changes['selectAll']) {\n      this.selectAll = changes['selectAll'].currentValue\n\n      if (!this.preventSelectionSetterPropagation || !this.selectAll) {\n        setTimeout(() => {\n          this.deselection = []\n          this.selection = []\n          this.selectionChange.emit(this.selection)\n          this.deselectionChange.emit(this.deselection)\n          this.tableService.onSelectionChange()\n        })\n      }\n\n      this.preventSelectionSetterPropagation = false\n    }\n  }\n\n  isRowSelectable(data: any, index: number): boolean {\n    if (this.rowSelectable && !this.rowSelectable({ data, index })) {\n      return false\n    }\n\n    return true\n  }\n\n  isSelected(rowData: any): boolean {\n    if (rowData && this.selection) {\n      if (this.dataKey) {\n        return (\n          this.selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !==\n          undefined\n        )\n      } else {\n        if (this.selection instanceof Array) {\n          return this.findIndexInSelection(rowData, this.selection) > -1\n        } else {\n          return this.equals(rowData, this.selection)\n        }\n      }\n    }\n\n    return false\n  }\n\n  isDeselected(rowData: any): boolean {\n    if (rowData && this.deselection) {\n      if (this.dataKey) {\n        return (\n          this.deselectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !==\n          undefined\n        )\n      } else {\n        if (this.deselection instanceof Array) {\n          return this.findIndexInSelection(rowData, this.deselection) > -1\n        } else {\n          return this.equals(rowData, this.deselection)\n        }\n      }\n    }\n\n    return false\n  }\n\n  findIndexInSelection(rowData: any, selectionOrDeselection: any) {\n    let index = -1\n    if (selectionOrDeselection && selectionOrDeselection.length) {\n      for (let i = 0; i < selectionOrDeselection.length; i++) {\n        if (this.equals(rowData, selectionOrDeselection[i])) {\n          index = i\n          break\n        }\n      }\n    }\n\n    return index\n  }\n\n  equals(data1: any, data2: any) {\n    return this.compareSelectionBy === 'equals'\n      ? data1 === data2\n      : ObjectUtils.equals(data1, data2, this.dataKey)\n  }\n\n  private verifySelectionOrDesectionAndUpdateKeys(\n    selectKeys: 'selectionKeys' | 'deselectionKeys',\n    selectionOrDeselection: 'selection' | 'deselection'\n  ) {\n    this[selectKeys] = {}\n    if (Array.isArray(this[selectionOrDeselection])) {\n      for (const data of this[selectionOrDeselection]) {\n        this[selectKeys][String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1\n      }\n    } else {\n      this[selectKeys][\n        String(ObjectUtils.resolveFieldData(this[selectionOrDeselection], this.dataKey))\n      ] = 1\n    }\n  }\n\n  updateSelectionKeys() {\n    if (this.dataKey && this.selection?.length !== null && !this.selectAll) {\n      this.verifySelectionOrDesectionAndUpdateKeys('selectionKeys', 'selection')\n    } else if (this.dataKey && this.deselection?.length !== null) {\n      this.verifySelectionOrDesectionAndUpdateKeys('deselectionKeys', 'deselection')\n    }\n  }\n\n  toggleRowsWithCheckbox(event: Event, check: boolean) {\n    if (this.selectAll === true) {\n      this.deselectAllWithSelectAllTrue(event, check)\n    } else {\n      const data = this.selectionPageOnly\n        ? this.data.dataToRender(this.data.processedData)\n        : this.data.processedData\n\n      let selection =\n        this.selectionPageOnly && this.selection\n          ? this.selection.filter((s: any) => !data.some((d: any) => this.equals(s, d)))\n          : []\n\n      if (check) {\n        selection = [...selection, ...data]\n        selection = this.rowSelectable\n          ? selection.filter((data: any, index: number) =>\n              this.rowSelectable({ data, index })\n            )\n          : selection\n      }\n\n      this.selection = selection\n      this.preventSelectionSetterPropagation = true\n      this.updateSelectionKeys()\n      this.selectionChange.emit(this.selection)\n      this.tableService.onSelectionChange()\n      this.headerCheckboxToggleEvent.emit({ originalEvent: event, checked: check })\n    }\n  }\n\n  private deselectAllWithSelectAllTrue(event: Event, check: boolean) {\n    const data = this.data.processedData\n    let deselection: any[] = []\n\n    if (!check) {\n      deselection = [...this.deselection, ...data]\n      deselection = this.rowSelectable\n        ? deselection.filter((data: any, index: number) =>\n            this.rowSelectable({ data, index })\n          )\n        : deselection\n    } else {\n      deselection = this.deselection.filter(\n        (s: any) => !data.some((d: any) => this.equals(s, d))\n      )\n    }\n\n    this.deselection = deselection\n    this.preventSelectionSetterPropagation = true\n    this.updateSelectionKeys()\n    this.deselectionChange.emit(this.deselection)\n    this.tableService.onSelectionChange()\n    this.headerCheckboxToggleEvent.emit({ originalEvent: event, checked: check })\n  }\n\n  toggleRowWithCheckbox(event: { originalEvent: Event; rowIndex: number }, rowData: any) {\n    if (!this.selectAll) {\n      this.selectRowWithCheckbox(event, rowData)\n    } else {\n      this.deselectRowWithCheckbox(event, rowData)\n    }\n  }\n\n  private selectRowWithCheckbox(\n    event: { originalEvent: Event; rowIndex: number },\n    rowData: any\n  ) {\n    this.selection = this.selection || []\n    const selected = this.isSelected(rowData)\n\n    const dataKeyValue = this.dataKey\n      ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey))\n      : null\n\n    this.preventSelectionSetterPropagation = true\n\n    if (selected) {\n      const selectionIndex = this.findIndexInSelection(rowData, this.selection)\n      this.selection = this.selection.filter((_: any, i: number) => i != selectionIndex)\n      this.selectionChange.emit(this.selection)\n\n      if (dataKeyValue) {\n        delete this.selectionKeys[dataKeyValue]\n      }\n    } else {\n      if (!this.isRowSelectable(rowData, event.rowIndex)) {\n        return\n      }\n\n      this.selection = this.selection ? [...this.selection, rowData] : [rowData]\n\n      this.selectionChange.emit(this.selection)\n\n      if (dataKeyValue) {\n        this.selectionKeys[dataKeyValue] = 1\n      }\n    }\n\n    this.tableService.onSelectionChange()\n  }\n\n  private deselectRowWithCheckbox(\n    event: { originalEvent: Event; rowIndex: number },\n    rowData: any\n  ) {\n    this.deselection = this.deselection || []\n    const deselected = this.isDeselected(rowData)\n\n    const dataKeyValue = this.dataKey\n      ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey))\n      : null\n\n    this.preventSelectionSetterPropagation = true\n\n    if (deselected) {\n      const selectionIndex = this.findIndexInSelection(rowData, this.deselection)\n      this.deselection = this.deselection.filter(\n        (_: any, i: number) => i != selectionIndex\n      )\n      this.deselectionChange.emit(this.deselection)\n\n      if (dataKeyValue) {\n        delete this.deselectionKeys[dataKeyValue]\n      }\n    } else {\n      if (!this.isRowSelectable(rowData, event.rowIndex)) {\n        return\n      }\n\n      this.deselection = this.deselection ? [...this.deselection, rowData] : [rowData]\n\n      this.deselectionChange.emit(this.deselection)\n\n      if (dataKeyValue) {\n        this.deselectionKeys[dataKeyValue] = 1\n      }\n    }\n\n    this.tableService.onSelectionChange()\n  }\n}\n",
            "selector": "[hcSelect]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "compareSelectionBy",
                    "defaultValue": "'deepEquals'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dataKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "deselection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "rowSelectable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "selectAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "selectionPageOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "stateKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deselectionChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "headerCheckboxToggleEvent",
                    "defaultValue": "new EventEmitter<IHeaderCheckboxEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowSelectEvent",
                    "defaultValue": "new EventEmitter<IRowSelectEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowUnselectEvent",
                    "defaultValue": "new EventEmitter<IRowSelectEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectAllChange",
                    "defaultValue": "new EventEmitter<IHeaderCheckboxEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_deselection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_selectAll",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataService",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deselectionKeys",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "preventSelectionSetterPropagation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "selectionKeys",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "deselectAllWithSelectAllTrue",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "check",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "check",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deselectRowWithCheckbox",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "equals",
                    "args": [
                        {
                            "name": "data1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findIndexInSelection",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectionOrDeselection",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectionOrDeselection",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDeselected",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRowSelectable",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectRowWithCheckbox",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleRowsWithCheckbox",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "check",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "check",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleRowWithCheckbox",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rowData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSelectionKeys",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "verifySelectionOrDesectionAndUpdateKeys",
                    "args": [
                        {
                            "name": "selectKeys",
                            "type": "\"selectionKeys\" | \"deselectionKeys\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selectionOrDeselection",
                            "type": "\"selection\" | \"deselection\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectKeys",
                            "type": "\"selectionKeys\" | \"deselectionKeys\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectionOrDeselection",
                            "type": "\"selection\" | \"deselection\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "selection": {
                    "name": "selection",
                    "setSignature": {
                        "name": "selection",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selection",
                        "type": "any",
                        "returnType": "any",
                        "line": 47
                    }
                },
                "deselection": {
                    "name": "deselection",
                    "setSignature": {
                        "name": "deselection",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 59,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "deselection",
                        "type": "any",
                        "returnType": "any",
                        "line": 55
                    }
                },
                "selectAll": {
                    "name": "selectAll",
                    "setSignature": {
                        "name": "selectAll",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 67,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selectAll",
                        "type": "",
                        "returnType": "boolean | null",
                        "line": 63
                    }
                }
            }
        },
        {
            "name": "SortableColumnDirective",
            "id": "directive-SortableColumnDirective-15d26f2925ec210d59a7e6a89c45590ce4d3a88d8e43563d8c94d0389a8d12026128096375af63a1940d2a1c589ff4f5a711d97b37fdf8154502271a2d91849f",
            "file": "src/app/components/table/sortable-column.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener, Input, OnDestroy, OnInit } from '@angular/core'\n\nimport { SortDirective } from './sort.directive'\nimport { Subscription } from 'rxjs'\nimport { TableService } from './table.service'\n\n@Directive({\n  selector: '[hcSortableColumn]',\n  host: {\n    'class': 'hc-sortable-column',\n    '[class.hc-datatable-highlight]': 'sorted',\n    '[attr.tabindex]': '0',\n    '[attr.role]': '\"columnheader\"',\n    '[attr.aria-sort]': 'sortOrder',\n  },\n})\nexport class SortableColumnDirective implements OnInit, OnDestroy {\n  @Input('hcSortableColumn') field!: string\n\n  sorted!: boolean\n  sortOrder!: string\n  subscription: Subscription\n\n  constructor(private tableService: TableService, public sort: SortDirective) {\n    this.subscription = this.tableService.sortSource$.subscribe(() => {\n      this.updateSortState()\n    })\n  }\n\n  ngOnInit(): void {\n    this.updateSortState()\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe()\n    }\n  }\n\n  @HostListener('click', ['$event'])\n  onClick() {\n    this.updateSortState()\n    this.sort.sort({ field: this.field })\n  }\n\n  @HostListener('keydown.enter', ['$event'])\n  onEnterKey() {\n    this.onClick()\n  }\n\n  updateSortState() {\n    this.sorted = this.sort.isSorted(this.field)\n    if (this.sorted) {\n      this.sortOrder = this.sort.sortOrder === 1 ? 'ascending' : 'descending'\n    } else {\n      this.sortOrder = 'none'\n    }\n  }\n}\n",
            "selector": "[hcSortableColumn]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "hcSortableColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42
                },
                {
                    "name": "keydown.enter",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48
                }
            ],
            "propertiesClass": [
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortDirective",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sorted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "sortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ]
                },
                {
                    "name": "onEnterKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown.enter', ['$event']"
                        }
                    ]
                },
                {
                    "name": "updateSortState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sort",
                        "type": "SortDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sort",
                        "type": "SortDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "SortDirective",
            "id": "directive-SortDirective-24b2e9e47a2b34efdb386f56aa559477915fca6766f0e7f9a0f45533c9b7705bc8b4c580e50d159a07f8b10cf9f7910d9f4ce9134756cc2443ca74a571ef5a82",
            "file": "src/app/components/table/sort.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core'\nimport { ISortMeta, TableService } from './table.service'\n\n@Directive({\n  selector: '[hcSort]',\n})\nexport class SortDirective implements OnChanges {\n  _sortOrder: number | string | undefined = 1\n  _sortField: string | undefined\n\n  @Input() defaultSortOrder = 1\n\n  @Output() sortEvent = new EventEmitter<ISortMeta>()\n\n  @Input() get sortField(): string | undefined {\n    return this._sortField\n  }\n\n  set sortField(val: string | undefined) {\n    this._sortField = val\n  }\n\n  @Input() get sortOrder(): number | string | undefined {\n    return this._sortOrder\n  }\n\n  set sortOrder(val: number | string | undefined) {\n    this._sortOrder = val\n  }\n\n  constructor(private tableService: TableService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['sortOrder']) {\n      if (typeof changes['sortOrder'].currentValue === 'string') {\n        this.sortOrder = changes['sortOrder'].currentValue === 'ASC' ? 1 : -1\n        return\n      }\n\n      this.sortOrder = changes['sortOrder'].currentValue\n    }\n\n    if (changes['sortField']) {\n      this.sortField = changes['sortField'].currentValue\n    }\n  }\n\n  isSorted(field: string) {\n    return this.sortField && this.sortField === field ? true : false\n  }\n\n  sort(event: { field: string }) {\n    this.sortOrder =\n      this.sortField === event.field\n        ? (this.sortOrder as number) * -1\n        : this.defaultSortOrder\n    this.sortField = event.field\n\n    this.sortSingle()\n  }\n\n  sortSingle() {\n    if (this.sortOrder && this.sortField) {\n      const field = this.sortField\n      const order = this.sortOrder as number\n\n      const sortMeta: ISortMeta = {\n        field,\n        order,\n      }\n\n      this.sortEvent.emit(sortMeta)\n      this.tableService.onSort(sortMeta)\n    }\n  }\n}\n",
            "selector": "[hcSort]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "defaultSortOrder",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "sortField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "sortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "number | string | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "sortEvent",
                    "defaultValue": "new EventEmitter<ISortMeta>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_sortField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "_sortOrder",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "isSorted",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortSingle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "sortField": {
                    "name": "sortField",
                    "setSignature": {
                        "name": "sortField",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sortField",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 22
                    }
                },
                "sortOrder": {
                    "name": "sortOrder",
                    "setSignature": {
                        "name": "sortOrder",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "number | string | undefined",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "number | string | undefined",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "sortOrder",
                        "type": "",
                        "returnType": "number | string | undefined",
                        "line": 30
                    }
                }
            }
        },
        {
            "name": "TemplateDirective",
            "id": "directive-TemplateDirective-575fc85d20ec03203129fabefbaff678663a609b70aa4125f8929ae9b130f5abe51dffa527ffeb685d3ed241d078c0b620d745665c1f57aacb5c2cfc762ad2d4",
            "file": "src/app/directives/template/template.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, TemplateRef } from '@angular/core'\n\n@Directive({\n  selector: '[hcTemplate]',\n})\nexport class TemplateDirective {\n  @Input() type!: string\n\n  @Input('hcTemplate') name!: string\n\n  constructor(public template: TemplateRef<any>) {}\n\n  getType(): string {\n    return this.name\n  }\n}\n",
            "selector": "[hcTemplate]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "hcTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-df985c7815ea7e81d96924f207d0785e1061362d5bb1d0e1bd8cc7152d73830d534adbdeee931a108375ddb4cae7f9a2bfc0b564f044770900f9bdbaa8235475",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [
                "\n      .container {\n        background-color: var(--neutral-background);\n        position: relative;\n      }\n    "
            ],
            "template": "<div class=\"container\">    <div\n      style=\"position: absolute; top: 10px; left: 50%; right: 50%; transform: (-50%, -50%);\"\n    >\n      <hc-msw></hc-msw>\n    </div>\n    <router-outlet></router-outlet>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({\n  selector: 'app-root',\n  template: `<div class=\"container\">\n    <div\n      style=\"position: absolute; top: 10px; left: 50%; right: 50%; transform: (-50%, -50%);\"\n    >\n      <hc-msw></hc-msw>\n    </div>\n    <router-outlet></router-outlet>\n  </div>`,\n  styles: [\n    `\n      .container {\n        background-color: var(--neutral-background);\n        position: relative;\n      }\n    `,\n  ],\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .container {\n        background-color: var(--neutral-background);\n        position: relative;\n      }\n    \n"
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-8405136ab28cb3adb50f84222361ebc9e8ea03d8fcc27eeb7bd0b1f04a9247acc096436a3be0703598e839cfc1179c72febc1b9d07d58a7002fab5059f2f5ca3",
            "file": "src/app/components/avatar/avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-avatar",
            "styleUrls": [],
            "styles": [
                "\n      .hc-avatar {\n        background-color: var(--neutral-gray-lighter);\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 0.5rem;\n        color: var(--neutral-black);\n      }\n\n      .hc-avatar-image {\n        background-color: transparent;\n        width: 100%;\n        height: 100%;\n        border-radius: 0.5rem;\n      }\n\n      .hc-avatar-circle {\n        border-radius: 50%;\n        overflow: hidden;\n      }\n\n      .hc-avatar-size-small {\n        width: 2rem;\n        height: 2rem;\n        font-size: 1rem;\n\n        .hc-avatar-icon {\n          font-size: 1.5rem;\n        }\n      }\n\n      .hc-avatar-size-medium {\n        width: 3rem;\n        height: 3rem;\n        font-size: 1.5rem;\n\n        .hc-avatar-icon {\n          font-size: 2rem;\n        }\n      }\n\n      .hc-avatar-size-large {\n        width: 4rem;\n        height: 4rem;\n        font-size: 2rem;\n\n        .hc-avatar-icon {\n          font-size: 2.5rem;\n        }\n      }\n    "
            ],
            "template": "<div [ngClass]=\"classes\" [style]=\"style\" data-testid=\"avatar\">\n  <span *ngIf=\"label; else iconTemplate\">{{ label }}</span>\n  <ng-template #iconTemplate>\n    <span\n      *ngIf=\"icon; else imageTemplate\"\n      class=\"material-symbols-outlined hc-avatar-icon\"\n    >\n      {{ icon }}\n    </span>\n  </ng-template>\n  <ng-template #imageTemplate>\n    <img class=\"hc-avatar-image\" *ngIf=\"image\" [src]=\"image\" />\n  </ng-template>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "circle",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "IStyle",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { IStyle } from './../../common/models/style.model'\nimport { Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'hc-avatar',\n  template: `\n    <div [ngClass]=\"classes\" [style]=\"style\" data-testid=\"avatar\">\n      <span *ngIf=\"label; else iconTemplate\">{{ label }}</span>\n      <ng-template #iconTemplate>\n        <span\n          *ngIf=\"icon; else imageTemplate\"\n          class=\"material-symbols-outlined hc-avatar-icon\"\n        >\n          {{ icon }}\n        </span>\n      </ng-template>\n      <ng-template #imageTemplate>\n        <img class=\"hc-avatar-image\" *ngIf=\"image\" [src]=\"image\" />\n      </ng-template>\n    </div>\n  `,\n  styles: [\n    `\n      .hc-avatar {\n        background-color: var(--neutral-gray-lighter);\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 0.5rem;\n        color: var(--neutral-black);\n      }\n\n      .hc-avatar-image {\n        background-color: transparent;\n        width: 100%;\n        height: 100%;\n        border-radius: 0.5rem;\n      }\n\n      .hc-avatar-circle {\n        border-radius: 50%;\n        overflow: hidden;\n      }\n\n      .hc-avatar-size-small {\n        width: 2rem;\n        height: 2rem;\n        font-size: 1rem;\n\n        .hc-avatar-icon {\n          font-size: 1.5rem;\n        }\n      }\n\n      .hc-avatar-size-medium {\n        width: 3rem;\n        height: 3rem;\n        font-size: 1.5rem;\n\n        .hc-avatar-icon {\n          font-size: 2rem;\n        }\n      }\n\n      .hc-avatar-size-large {\n        width: 4rem;\n        height: 4rem;\n        font-size: 2rem;\n\n        .hc-avatar-icon {\n          font-size: 2.5rem;\n        }\n      }\n    `,\n  ],\n})\nexport class AvatarComponent {\n  @Input() label?: string\n  @Input() size: 'small' | 'medium' | 'large' = 'medium'\n  @Input() style?: IStyle\n  @Input() circle = false\n  @Input() icon?: string\n  @Input() image?: string\n\n  public get classes() {\n    return {\n      ['hc-avatar']: true,\n      [`hc-avatar-size-${this.size}`]: true,\n      ['hc-avatar-circle']: this.circle,\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-avatar {\n        background-color: var(--neutral-gray-lighter);\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        border-radius: 0.5rem;\n        color: var(--neutral-black);\n      }\n\n      .hc-avatar-image {\n        background-color: transparent;\n        width: 100%;\n        height: 100%;\n        border-radius: 0.5rem;\n      }\n\n      .hc-avatar-circle {\n        border-radius: 50%;\n        overflow: hidden;\n      }\n\n      .hc-avatar-size-small {\n        width: 2rem;\n        height: 2rem;\n        font-size: 1rem;\n\n        .hc-avatar-icon {\n          font-size: 1.5rem;\n        }\n      }\n\n      .hc-avatar-size-medium {\n        width: 3rem;\n        height: 3rem;\n        font-size: 1.5rem;\n\n        .hc-avatar-icon {\n          font-size: 2rem;\n        }\n      }\n\n      .hc-avatar-size-large {\n        width: 4rem;\n        height: 4rem;\n        font-size: 2rem;\n\n        .hc-avatar-icon {\n          font-size: 2.5rem;\n        }\n      }\n    \n",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 85
                    }
                }
            }
        },
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-118ca1915ae84399442d432f1c75b432eb5212fadf33687352409aad0bf0b1db6602eb28057df7e2312eafbb0659520e033fb7d253f0be8f7845bb76ea2c241d",
            "file": "src/app/components/badge/badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-badge",
            "styleUrls": [
                "badge.component.scss"
            ],
            "styles": [],
            "template": "<span [ngClass]=\"classes\" *ngIf=\"value\" role=\"badge\">{{ value }}</span>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "severity",
                    "defaultValue": "'danger'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string | number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'hc-badge',\n  template: ` <span [ngClass]=\"classes\" *ngIf=\"value\" role=\"badge\">{{ value }}</span> `,\n  styleUrls: ['badge.component.scss'],\n})\nexport class BadgeComponent {\n  @Input() value?: string | number\n  @Input() severity = 'danger'\n\n  get classes() {\n    return {\n      ['hc-badge']: true,\n      [`hc-badge-${this.severity}`]: !!this.severity,\n      ['hc-badge-no-gutter']: this.value != undefined && String(this.value).length === 1,\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-badge {\n  display: inline-block;\n  border-radius: 0.6rem;\n  text-align: center;\n  padding: 0 0.5rem;\n  font-size: 0.7rem;\n  min-width: 1.2rem;\n  height: 1.2rem;\n  line-height: 1.2rem;\n  font-weight: bold;\n}\n\n.hc-overlay-badge {\n  position: relative;\n\n  .hc-badge {\n    position: absolute;\n    top: 0;\n    right: 0;\n    transform: translate(50%, -50%);\n    transform-origin: 100% 0;\n    margin: 0;\n  }\n}\n\n.hc-badge-danger {\n  color: var(--neutral-white);\n  background-color: var(--red-default);\n}\n\n.hc-badge-no-gutter {\n  padding: 0;\n  border-radius: 50%;\n}\n",
                    "styleUrl": "badge.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 12
                    }
                }
            }
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-1bec5631b53f020e7002a139a2cb15947fdd74a67b9070dd431ff4abc04caec9f26917531201ca03eed18924e1ecfcbda05be07c34cc55ae962b962a4ac4fcf8",
            "file": "src/app/components/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-breadcrumb",
            "styleUrls": [
                "breadcrumb.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"hc-breadcrumb\">\n  <ul>\n    <ng-template ngFor let-item let-end=\"last\" [ngForOf]=\"model\">\n      <li>\n        <a [routerLink]=\"item.routerLink\" class=\"hc-breadcrumb-link\">\n          <span class=\"hc-breadcrumb-text\">{{ item.label }}</span>\n        </a>\n      </li>\n      <li class=\"material-symbols-outlined\" *ngIf=\"!end\">chevron_right</li>\n    </ng-template>\n  </ul>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "IBreadcrumbItem[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nexport interface IBreadcrumbItem {\n  label: string\n  routerLink: string\n}\n\n@Component({\n  selector: 'hc-breadcrumb',\n  template: `\n    <div class=\"hc-breadcrumb\">\n      <ul>\n        <ng-template ngFor let-item let-end=\"last\" [ngForOf]=\"model\">\n          <li>\n            <a [routerLink]=\"item.routerLink\" class=\"hc-breadcrumb-link\">\n              <span class=\"hc-breadcrumb-text\">{{ item.label }}</span>\n            </a>\n          </li>\n          <li class=\"material-symbols-outlined\" *ngIf=\"!end\">chevron_right</li>\n        </ng-template>\n      </ul>\n    </div>\n  `,\n  styleUrls: ['breadcrumb.component.scss'],\n})\nexport class BreadcrumbComponent {\n  @Input() model?: IBreadcrumbItem[] | null\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-breadcrumb {\n  background: transparent;\n  padding: 1rem;\n  overflow-x: auto;\n\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    display: flex;\n    align-items: center;\n    flex-wrap: nowrap;\n\n    li:last-child {\n      .hc-breadcrumb-text {\n        font-weight: 700;\n      }\n    }\n  }\n}\n\n.hc-breadcrumb-text {\n  line-height: 1;\n  color: var(--neutral-black);\n}\n\n.hc-breadcrumb-link {\n  transition: box-shadow 0.2s;\n  text-decoration: none;\n  cursor: pointer;\n}\n",
                    "styleUrl": "breadcrumb.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-79d2d5748950b147c86c219d259c062a48accf9856992e64d058bda15fb00ec3f143839c42049f84e2a0af2dc2800787f0c4950627bbca0eccdf5461408ee049",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "template": "<button\n  [style]=\"style\"\n  [disabled]=\"disabled\"\n  [ngClass]=\"classes\"\n  [attr.type]=\"type\"\n  [attr.aria-label]=\"ariaLabel\"\n  (mouseenter)=\"onMouseEnter()\"\n  (mouseleave)=\"onMouseLeave()\"\n  (blur)=\"onBlur()\"\n  (click)=\"click()\"\n>\n  <ng-content></ng-content>\n  <span class=\"material-symbols-outlined\" *ngIf=\"icon\">{{ icon }}</span>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "\"primary\" | \"secondary\" | \"default\"",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "\"small\" | \"normal\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "IStyle",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "defaultValue": "'contained'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "\"contained\" | \"outlined\" | \"text\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "\"submit\" | \"button\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isPressed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core'\n\nimport { IStyle } from './../../common/models/style.model'\n\n@Component({\n  selector: 'hc-button',\n  template: `\n    <button\n      [style]=\"style\"\n      [disabled]=\"disabled\"\n      [ngClass]=\"classes\"\n      [attr.type]=\"type\"\n      [attr.aria-label]=\"ariaLabel\"\n      (mouseenter)=\"onMouseEnter()\"\n      (mouseleave)=\"onMouseLeave()\"\n      (blur)=\"onBlur()\"\n      (click)=\"click()\"\n    >\n      <ng-content></ng-content>\n      <span class=\"material-symbols-outlined\" *ngIf=\"icon\">{{ icon }}</span>\n    </button>\n  `,\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n  isHover = false\n  isPressed = false\n\n  @Input() type: 'submit' | 'button' = 'button'\n  @Input() size: 'small' | 'normal' | 'large' = 'normal'\n  @Input() color: 'primary' | 'secondary' | 'default' = 'default'\n  @Input() theme: 'contained' | 'outlined' | 'text' = 'contained'\n  @Input() icon?: string\n  @Input() ariaLabel?: string\n  @Input() disabled = false\n  @Input() style?: IStyle\n\n  @Output() onClick = new EventEmitter<Event>()\n\n  click(): void {\n    this.isPressed = true\n    this.onClick.emit()\n  }\n\n  onMouseEnter(): void {\n    this.isHover = true\n  }\n\n  onMouseLeave(): void {\n    this.isHover = false\n  }\n\n  onBlur(): void {\n    this.isPressed = false\n  }\n\n  public get classes() {\n    return {\n      [`btn-${this.theme}-${this.color}`]: true,\n      [`btn-size-${this.size}`]: true,\n      [`btn-${this.theme}-disabled`]: this.disabled,\n      [`btn-${this.theme}-${this.color}-hover`]: this.isHover,\n      [`btn-${this.theme}-${this.color}-pressed`]: this.isPressed,\n      [`btn-icon-only`]: !!this.icon,\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\n  display: flex;\n  align-items: center;\n  color: var(--neutral-white);\n  font-weight: bold;\n  font-size: 16px;\n  padding: 1rem 1.5rem;\n  border-radius: 8px;\n  border: none;\n  cursor: pointer;\n  transition: 0.3s;\n}\n\n.btn-size-small {\n  padding: 0.5rem 1rem;\n}\n\n.btn-size-normal {\n  padding: 1rem 1.5rem;\n}\n\n.btn-size-large {\n  padding: 1.5rem 2rem;\n}\n\n/*\n* Styles to Theme Text Button\n*/\n\n// Primary\n\n.btn-text-primary {\n  background-color: var(--neutral-white);\n  color: rgb(var(--primary-default-rgb));\n}\n\n.btn-text-primary-hover {\n  background-color: rgba(var(--primary-default-rgb), var(--alpha-button-hover));\n}\n\n.btn-text-primary-pressed {\n  background-color: rgba(var(--primary-default-rgb), var(--alpha-button-pressed));\n}\n\n// Default\n\n.btn-text-default {\n  background-color: transparent;\n  color: var(--neutral-gray);\n}\n\n.btn-text-default-hover {\n  background-color: rgba(var(--neutral-black-rgb), var(--alpha-button-hover));\n}\n\n.btn-text-default-pressed {\n  background-color: rgba(var(--neutral-black-rgb), var(--alpha-button-pressed));\n}\n\n// Secondary\n\n.btn-text-secondary {\n  background-color: var(--neutral-white);\n  color: var(--secondary-default);\n}\n\n.btn-text-secondary-hover {\n  background-color: rgba(var(--secondary-default-rgb), var(--alpha-button-hover));\n}\n\n.btn-text-secondary-pressed {\n  background-color: rgba(var(--secondary-default-rgb), var(--alpha-button-pressed));\n}\n\n// Disabled\n\n.btn-text-disabled:disabled {\n  background-color: var(--neutral-white);\n  color: var(--neutral-divider);\n}\n\n/*\n* Styles to Theme Outlined Button\n*/\n\n// Primary\n.btn-outlined-primary {\n  background-color: var(--neutral-white);\n  border: 1px solid var(--primary-default);\n  color: var(--primary-default);\n}\n\n.btn-outlined-primary-hover {\n  background-color: var(--primary-default);\n  color: var(--neutral-white);\n}\n\n.btn-outlined-primary-pressed {\n  background-color: var(--primary-dark);\n  color: var(--neutral-white);\n}\n\n// Default\n\n.btn-outlined-default {\n  background-color: var(--neutral-white);\n  border: 1px solid var(--neutral-gray);\n  color: var(--neutral-gray);\n}\n\n.btn-outlined-default-hover {\n  background-color: var(--neutral-gray);\n  color: var(--neutral-white);\n}\n\n.btn-outlined-default-pressed {\n  background-color: var(--neutral-gray-dark);\n  color: var(--neutral-white);\n}\n\n// Secondary\n.btn-outlined-secondary {\n  background-color: var(--neutral-white);\n  border: 1px solid var(--secondary-default);\n  color: var(--secondary-default);\n}\n\n.btn-outlined-secondary-hover {\n  background-color: var(--secondary-default);\n  color: var(--neutral-white);\n}\n\n.btn-outlined-secondary-pressed {\n  background-color: var(--secondary-dark);\n  color: var(--neutral-white);\n}\n\n// Disabled\n.btn-outlined-disabled:disabled {\n  background-color: var(--neutral-white);\n  color: var(--neutral-divider);\n  border: 1px solid var(--neutral-background);\n}\n\n/*\n* Styles to Theme Contained Button\n*/\n\n// Primary\n.btn-contained-primary {\n  background-color: var(--primary-default);\n}\n\n.btn-contained-primary-hover {\n  background-color: var(--primary-hover);\n}\n\n.btn-contained-primary-pressed {\n  background-color: var(--primary-dark);\n}\n\n// Default\n.btn-contained-default {\n  background-color: var(--neutral-gray);\n}\n\n.btn-contained-default-hover {\n  background-color: var(--neutral-gray-light);\n}\n\n.btn-contained-default-pressed {\n  background-color: var(--neutral-gray-dark);\n}\n\n// Secondary\n.btn-contained-secondary {\n  background-color: var(--secondary-default);\n}\n\n.btn-contained-secondary-hover {\n  background-color: var(--secondary-light);\n}\n\n.btn-contained-secondary-pressed {\n  background-color: var(--secondary-dark);\n}\n\n// Disabled\n.btn-contained-disabled:disabled {\n  background-color: var(--neutral-background);\n  color: var(--neutral-divider);\n}\n\n.btn-icon-only {\n  padding: 0.7rem 0;\n  width: 3rem;\n  justify-content: center;\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-e5625155aa500103487d359586363a4021d2b8f60cc32a89a2e6fea4d714001f841d59d409f572bcbf13cb409dfd5e669cce9e25a3746f052949d58b72f84d83",
            "file": "src/app/components/card/card.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-card",
            "styleUrls": [],
            "styles": [
                "\n      .hc-card {\n        background-color: var(--neutral-white);\n        width: 100%;\n        box-shadow: 0px 12px 26px #101e730f;\n        border-radius: 0.5rem;\n        color: var(--neutral-black);\n      }\n\n      .hc-card-body {\n        padding: 1.5rem;\n      }\n\n      .hc-card-title {\n        margin-bottom: 1rem;\n      }\n\n      .hc-card-content {\n        padding: 1rem 0;\n      }\n    "
            ],
            "template": "<div class=\"hc-card\" [ngStyle]=\"style\" [class]=\"styleClass\">\n  <div *ngIf=\"headerTemplate\">\n    <ng-content select=\"hc-header\"></ng-content>\n    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n  </div>\n  <div class=\"hc-card-body\">\n    <h5 class=\"hc-card-title\" *ngIf=\"header\">\n      {{ header }}\n    </h5>\n    <div class=\"hc-card-content\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "IStyle",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "headerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TemplateDirective"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewEncapsulation,\n} from '@angular/core'\n\nimport { IStyle } from './../../common/models/style.model'\nimport { TemplateDirective } from '../../directives/template/template.directive'\n\n@Component({\n  selector: 'hc-card',\n  template: `\n    <div class=\"hc-card\" [ngStyle]=\"style\" [class]=\"styleClass\">\n      <div *ngIf=\"headerTemplate\">\n        <ng-content select=\"hc-header\"></ng-content>\n        <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n      </div>\n      <div class=\"hc-card-body\">\n        <h5 class=\"hc-card-title\" *ngIf=\"header\">\n          {{ header }}\n        </h5>\n        <div class=\"hc-card-content\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .hc-card {\n        background-color: var(--neutral-white);\n        width: 100%;\n        box-shadow: 0px 12px 26px #101e730f;\n        border-radius: 0.5rem;\n        color: var(--neutral-black);\n      }\n\n      .hc-card-body {\n        padding: 1.5rem;\n      }\n\n      .hc-card-title {\n        margin-bottom: 1rem;\n      }\n\n      .hc-card-content {\n        padding: 1rem 0;\n      }\n    `,\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CardComponent implements AfterContentInit {\n  @Input() header?: string\n  @Input() style?: IStyle\n  @Input() styleClass?: string\n\n  headerTemplate!: TemplateRef<TemplateDirective>\n\n  @ContentChildren(TemplateDirective) templates!: QueryList<TemplateDirective>\n\n  ngAfterContentInit(): void {\n    this.templates.forEach((item) => {\n      switch (item.getType()) {\n        case 'header':\n          this.headerTemplate = item.template\n          break\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-card {\n        background-color: var(--neutral-white);\n        width: 100%;\n        box-shadow: 0px 12px 26px #101e730f;\n        border-radius: 0.5rem;\n        color: var(--neutral-black);\n      }\n\n      .hc-card-body {\n        padding: 1.5rem;\n      }\n\n      .hc-card-title {\n        margin-bottom: 1rem;\n      }\n\n      .hc-card-content {\n        padding: 1rem 0;\n      }\n    \n",
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-0d614da2a9ec8aa38bac3651652149921eec974ea5120e6eb63230302d84edf911f19f6a0dbe9424a008c8119871cd1fe79cca99cc2d4b1fd8ba1a12779fcd65",
            "file": "src/app/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "CHECKBOX_VALUE_ACCESSOR"
                }
            ],
            "selector": "hc-checkbox",
            "styleUrls": [
                "checkbox.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"hc-checkbox\">\n  <div class=\"hc-hidden-accessible\">\n    <input\n      type=\"checkbox\"\n      #cb\n      [attr.id]=\"id\"\n      [attr.name]=\"name\"\n      [attr.aria-checked]=\"checked()\"\n      [value]=\"value\"\n      [checked]=\"checked()\"\n      [disabled]=\"disabled\"\n      (focus)=\"onFocus()\"\n      (blur)=\"onBlur()\"\n    />\n  </div>\n  <div\n    class=\"hc-checkbox-box\"\n    [ngClass]=\"classesCheckbox\"\n    [attr.data-testid]=\"'checkbox-' + id\"\n    (click)=\"onClick($event, cb, true)\"\n  >\n    <span class=\"material-symbols-outlined\" *ngIf=\"checked()\">check</span>\n  </div>\n  <label\n    *ngIf=\"label\"\n    [attr.for]=\"id\"\n    [attr.data-testid]=\"'label-' + id\"\n    [ngClass]=\"classesLabel\"\n    (click)=\"onClick($event, cb, true)\"\n  >\n    {{ label }}\n  </label>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "binary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "falseValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "trueValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string | any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "focused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | boolean",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                }
            ],
            "methodsClass": [
                {
                    "name": "checked",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "checkbox",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "focus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "checkbox",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "focus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateModel",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "model",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  Provider,\n  forwardRef,\n} from '@angular/core'\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms'\nimport { includes, isEqual } from 'lodash'\n\nexport const CHECKBOX_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxComponent),\n  multi: true,\n}\n\n@Component({\n  selector: 'hc-checkbox',\n  template: `\n    <div class=\"hc-checkbox\">\n      <div class=\"hc-hidden-accessible\">\n        <input\n          type=\"checkbox\"\n          #cb\n          [attr.id]=\"id\"\n          [attr.name]=\"name\"\n          [attr.aria-checked]=\"checked()\"\n          [value]=\"value\"\n          [checked]=\"checked()\"\n          [disabled]=\"disabled\"\n          (focus)=\"onFocus()\"\n          (blur)=\"onBlur()\"\n        />\n      </div>\n      <div\n        class=\"hc-checkbox-box\"\n        [ngClass]=\"classesCheckbox\"\n        [attr.data-testid]=\"'checkbox-' + id\"\n        (click)=\"onClick($event, cb, true)\"\n      >\n        <span class=\"material-symbols-outlined\" *ngIf=\"checked()\">check</span>\n      </div>\n      <label\n        *ngIf=\"label\"\n        [attr.for]=\"id\"\n        [attr.data-testid]=\"'label-' + id\"\n        [ngClass]=\"classesLabel\"\n        (click)=\"onClick($event, cb, true)\"\n      >\n        {{ label }}\n      </label>\n    </div>\n  `,\n  styleUrls: ['checkbox.component.scss'],\n  providers: [CHECKBOX_VALUE_ACCESSOR],\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n  model!: string[] | boolean\n  focused = false\n\n  @Input() binary = false\n  @Input() disabled = false\n  @Input() id?: string\n  @Input() falseValue = false\n  @Input() formControl?: FormControl\n  @Input() label?: string\n  @Input() name?: string\n  @Input() readonly = false\n  @Input() trueValue = true\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  @Input() value!: string | any\n\n  @Output() onChange = new EventEmitter()\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onModelChange = (model: string[] | boolean) => {}\n  onModelTouched = () => {}\n\n  constructor(public cd: ChangeDetectorRef) {}\n\n  writeValue(model: string[]): void {\n    this.model = model\n    this.cd.markForCheck()\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onModelChange = fn\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onModelTouched = fn\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled\n    this.cd.markForCheck()\n  }\n\n  onClick(event: Event, checkbox: HTMLInputElement, focus: boolean): void {\n    event.preventDefault()\n\n    if (this.disabled || this.readonly) {\n      return\n    }\n\n    this.updateModel(event)\n\n    if (focus) {\n      checkbox.focus()\n    }\n  }\n\n  updateModel(event: Event) {\n    let newModelValue: string[] | boolean\n\n    if (!this.binary && Array.isArray(this.model)) {\n      if (this.checked()) {\n        newModelValue = this.model.filter((val: string) => !isEqual(val, this.value))\n      } else {\n        newModelValue = this.model.length ? [...this.model, this.value] : [this.value]\n      }\n\n      this.onModelChange(newModelValue)\n      this.model = newModelValue\n\n      if (this.formControl) {\n        this.formControl.setValue(newModelValue)\n      }\n    } else {\n      newModelValue = this.checked() ? this.falseValue : this.trueValue\n      this.model = newModelValue\n      this.onModelChange(newModelValue)\n    }\n\n    this.onChange.emit({ checked: newModelValue, originalEvent: event })\n  }\n\n  checked() {\n    return this.binary\n      ? this.model === this.trueValue\n      : includes(this.model as string[], this.value)\n  }\n\n  onFocus() {\n    this.focused = true\n  }\n\n  onBlur() {\n    this.focused = false\n    this.onModelTouched()\n  }\n\n  get classesCheckbox() {\n    return {\n      ['hc-checkbox-highlight']: this.checked(),\n      ['hc-checkbox-focus']: this.focused,\n      ['hc-checkbox-disabled']: this.disabled,\n    }\n  }\n\n  get classesLabel() {\n    return {\n      ['hc-checkbox-label']: true,\n      ['hc-checkbox-label-disabled']: this.disabled,\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-checkbox {\n  display: inline-flex;\n  user-select: none;\n  vertical-align: bottom;\n  position: relative;\n  align-items: center;\n\n  &:not(.hc-checkbox-disabled) {\n    .hc-checkbox-focus {\n      outline: 0;\n      outline-offset: 0;\n      box-shadow: 0 0 0 0.1rem var(--primary-hover);\n    }\n  }\n}\n\n.hc-hidden-accessible {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.hc-checkbox-box {\n  display: flex;\n  justify-content: center;\n  cursor: pointer;\n  align-items: center;\n  border: 2px solid var(--neutral-gray-lighter);\n  background: var(--neutral-white);\n  width: 1.5rem;\n  height: 1.5rem;\n  border-radius: 0.4rem;\n  transition: background-color 0.2s, color 0.2s, border-color 0.2s, box-shadow 0.2s;\n}\n\n.hc-checkbox-highlight {\n  border-color: var(--primary-default);\n  background-color: var(--primary-default);\n  color: var(--neutral-white);\n}\n\n.hc-checkbox-label {\n  margin-left: 0.5rem;\n  line-height: 1;\n  color: var(--neutral-black);\n  cursor: pointer;\n}\n\n.hc-checkbox-disabled {\n  cursor: default;\n  pointer-events: none;\n  border: 2px solid var(--neutral-divider);\n}\n\n.hc-checkbox-label-disabled {\n  cursor: default;\n  pointer-events: none;\n  color: var(--neutral-divider);\n}\n",
                    "styleUrl": "checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 80,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "classesCheckbox": {
                    "name": "classesCheckbox",
                    "getSignature": {
                        "name": "classesCheckbox",
                        "type": "",
                        "returnType": "",
                        "line": 156
                    }
                },
                "classesLabel": {
                    "name": "classesLabel",
                    "getSignature": {
                        "name": "classesLabel",
                        "type": "",
                        "returnType": "",
                        "line": 164
                    }
                }
            }
        },
        {
            "name": "CreatePatientComponent",
            "id": "component-CreatePatientComponent-86d644d423f720b63bcc44b2f22aa3f7770437a01e2a6dcf16f9e2ad3a08c0b59271bb0a3c8fe365dafd5c28bac24dd161cd09ebbcaa8f28e518ea4b264c6108",
            "file": "src/app/modules/patients/create-patient/create-patient.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-patient",
            "styleUrls": [],
            "styles": [],
            "template": "<form [formGroup]=\"form\" (submit)=\"onSubmit(form)\">\n  <hc-input\n    formControlName=\"name\"\n    placeholder=\"Name\"\n    [submitted]=\"submitted\"\n  ></hc-input>\n  <hc-input\n    formControlName=\"email\"\n    placeholder=\"Email\"\n    type=\"email\"\n    [submitted]=\"submitted\"\n  ></hc-input>\n  <hc-input\n    formControlName=\"phone\"\n    placeholder=\"Phone\"\n    type=\"tel\"\n    [submitted]=\"submitted\"\n  ></hc-input>\n  <hc-input\n    formControlName=\"age\"\n    placeholder=\"Age\"\n    type=\"number\"\n    [submitted]=\"submitted\"\n  ></hc-input>\n  <hc-input\n    formControlName=\"status\"\n    placeholder=\"Status\"\n    [submitted]=\"submitted\"\n  ></hc-input>\n  <hc-input\n    formControlName=\"address\"\n    placeholder=\"Address\"\n    [submitted]=\"submitted\"\n  ></hc-input>\n  <hc-button type=\"submit\" ariaLabel=\"submit\" theme=\"contained\" color=\"primary\">\n    Create patient\n  </hc-button>\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    name: ['', [Validators.required]],\n    email: ['', [Validators.required]],\n    age: ['', [Validators.required]],\n    address: ['', [Validators.required]],\n    phone: ['', [Validators.required]],\n    status: ['', [Validators.required]],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FormBuilder, FormGroup, Validators } from '@angular/forms'\n\nimport { Component } from '@angular/core'\nimport { PatientsService } from '../patients.service'\n\n@Component({\n  selector: 'app-create-patient',\n  template: `\n    <form [formGroup]=\"form\" (submit)=\"onSubmit(form)\">\n      <hc-input\n        formControlName=\"name\"\n        placeholder=\"Name\"\n        [submitted]=\"submitted\"\n      ></hc-input>\n      <hc-input\n        formControlName=\"email\"\n        placeholder=\"Email\"\n        type=\"email\"\n        [submitted]=\"submitted\"\n      ></hc-input>\n      <hc-input\n        formControlName=\"phone\"\n        placeholder=\"Phone\"\n        type=\"tel\"\n        [submitted]=\"submitted\"\n      ></hc-input>\n      <hc-input\n        formControlName=\"age\"\n        placeholder=\"Age\"\n        type=\"number\"\n        [submitted]=\"submitted\"\n      ></hc-input>\n      <hc-input\n        formControlName=\"status\"\n        placeholder=\"Status\"\n        [submitted]=\"submitted\"\n      ></hc-input>\n      <hc-input\n        formControlName=\"address\"\n        placeholder=\"Address\"\n        [submitted]=\"submitted\"\n      ></hc-input>\n      <hc-button type=\"submit\" ariaLabel=\"submit\" theme=\"contained\" color=\"primary\">\n        Create patient\n      </hc-button>\n    </form>\n  `,\n  styles: [],\n})\nexport class CreatePatientComponent {\n  form: FormGroup = this.fb.group({\n    name: ['', [Validators.required]],\n    email: ['', [Validators.required]],\n    age: ['', [Validators.required]],\n    address: ['', [Validators.required]],\n    phone: ['', [Validators.required]],\n    status: ['', [Validators.required]],\n  })\n  submitted = false\n\n  constructor(private fb: FormBuilder, private patientsService: PatientsService) {}\n\n  onSubmit({ value, valid }: FormGroup) {\n    this.submitted = true\n    if (valid) {\n      this.patientsService.create(value).subscribe((response) => {\n        console.log(response)\n        this.submitted = false\n        this.form.patchValue({\n          name: '',\n          email: '',\n          age: '',\n          address: '',\n          phone: '',\n          status: '',\n        })\n        // this.form.updateValueAndValidity()\n      })\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "patientsService",
                        "type": "PatientsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "patientsService",
                        "type": "PatientsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-59ef4c6cdb4c96f2e1f98731f037d4893ab968193d21245bc032f836ff3ed75a4fdf4085c6362af0a78cb97688dfbfc87ba852e9c973cdaaae01befff449b180",
            "file": "src/app/modules/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TableService"
                }
            ],
            "selector": "app-dashboard",
            "styleUrls": [
                "dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnsLastPayments",
                    "defaultValue": "[\n    {\n      header: 'Date',\n      field: 'date',\n    },\n    {\n      header: 'Recipient',\n      field: 'recipient',\n    },\n    {\n      header: 'Amount',\n      field: 'amount',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "events",
                    "defaultValue": "[\n    {\n      status: 'New prescription',\n      date: new Date(),\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'monitor_heart',\n      color: '#FAC032',\n    },\n    {\n      status: 'Appointment',\n      date: new Date(),\n      description:\n        'Esse sanctus ea nec. An nam nonumy veritus theophrastus. No laoreet intellegebat pro, ea omnes graecis eloquentiam quo.',\n      icon: 'local_hospital',\n      color: '#FF6760',\n    },\n    {\n      status: 'Medication',\n      date: new Date(),\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur nam nisi veniam.',\n      icon: 'vaccines',\n      color: '#558EFF',\n    },\n    {\n      status: 'Operation',\n      date: new Date(),\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'healing',\n      color: '#16D090',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITimelineEventsAndMettings[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "informationsIntroductions",
                    "defaultValue": "[\n    {\n      title: 'Address',\n      description: '795 Folsom Ave, Suite 600 San Francisco, CADGE 94107',\n    },\n    {\n      title: 'Email',\n      description: 'denta@gmail.com',\n    },\n    {\n      title: 'Phone',\n      description: '0126596452',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIntroduction[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "lastPatients",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILastPatients[]",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "lastPayments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILastPayments[]",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "meetings",
                    "defaultValue": "[\n    {\n      status: 'New patient',\n      date: new Date(),\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'personal_injury',\n      color: '#E74F48',\n    },\n    {\n      status: 'Examination',\n      date: new Date(),\n      description:\n        'Esse sanctus ea nec. An nam nonumy veritus theophrastus. No laoreet intellegebat pro, ea omnes graecis eloquentiam quo.',\n      icon: 'radiology',\n      color: '#EFAD0A',\n    },\n    {\n      status: 'Medication',\n      date: new Date(),\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur nam nisi veniam.',\n      icon: 'vaccines',\n      color: '#558EFF',\n    },\n    {\n      status: 'Appointment',\n      date: new Date(),\n      description:\n        'Esse sanctus ea nec. An nam nonumy veritus theophrastus. No laoreet intellegebat pro, ea omnes graecis eloquentiam quo.',\n      icon: 'local_hospital',\n      color: '#FF6760',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITimelineEventsAndMettings[]",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "tableLastPatients",
                    "defaultValue": "[\n    {\n      header: 'Name',\n      field: 'name',\n    },\n    {\n      header: 'Visit Time',\n      field: 'visitTime',\n    },\n    {\n      header: 'Date',\n      field: 'date',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 107
                }
            ],
            "methodsClass": [
                {
                    "name": "getLastPatients",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLastPayments",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { ILastPayments, PaymentsService } from '../../services/payments/payments.service'\n\nimport { AppointmentsService } from '../appointments/appointments.service'\nimport { IColumn } from './../../components/table/table.component'\nimport { ILastPatients } from './../appointments/appointments.service'\nimport { ITimelineEventsAndMettings } from './components/timeline-events-and-meetings/timeline-events-and-meetings.component'\nimport { TableService } from '../../components/table/table.service'\n\ninterface IIntroduction {\n  title: string\n  description: string\n}\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: 'dashboard.component.html',\n  styleUrls: ['dashboard.component.scss'],\n  providers: [TableService],\n})\nexport class DashboardComponent implements OnInit {\n  informationsIntroductions: IIntroduction[] = [\n    {\n      title: 'Address',\n      description: '795 Folsom Ave, Suite 600 San Francisco, CADGE 94107',\n    },\n    {\n      title: 'Email',\n      description: 'denta@gmail.com',\n    },\n    {\n      title: 'Phone',\n      description: '0126596452',\n    },\n  ]\n\n  events: ITimelineEventsAndMettings[] = [\n    {\n      status: 'New prescription',\n      date: new Date(),\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'monitor_heart',\n      color: '#FAC032',\n    },\n    {\n      status: 'Appointment',\n      date: new Date(),\n      description:\n        'Esse sanctus ea nec. An nam nonumy veritus theophrastus. No laoreet intellegebat pro, ea omnes graecis eloquentiam quo.',\n      icon: 'local_hospital',\n      color: '#FF6760',\n    },\n    {\n      status: 'Medication',\n      date: new Date(),\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur nam nisi veniam.',\n      icon: 'vaccines',\n      color: '#558EFF',\n    },\n    {\n      status: 'Operation',\n      date: new Date(),\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'healing',\n      color: '#16D090',\n    },\n  ]\n\n  meetings: ITimelineEventsAndMettings[] = [\n    {\n      status: 'New patient',\n      date: new Date(),\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'personal_injury',\n      color: '#E74F48',\n    },\n    {\n      status: 'Examination',\n      date: new Date(),\n      description:\n        'Esse sanctus ea nec. An nam nonumy veritus theophrastus. No laoreet intellegebat pro, ea omnes graecis eloquentiam quo.',\n      icon: 'radiology',\n      color: '#EFAD0A',\n    },\n    {\n      status: 'Medication',\n      date: new Date(),\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur nam nisi veniam.',\n      icon: 'vaccines',\n      color: '#558EFF',\n    },\n    {\n      status: 'Appointment',\n      date: new Date(),\n      description:\n        'Esse sanctus ea nec. An nam nonumy veritus theophrastus. No laoreet intellegebat pro, ea omnes graecis eloquentiam quo.',\n      icon: 'local_hospital',\n      color: '#FF6760',\n    },\n  ]\n\n  tableLastPatients: IColumn[] = [\n    {\n      header: 'Name',\n      field: 'name',\n    },\n    {\n      header: 'Visit Time',\n      field: 'visitTime',\n    },\n    {\n      header: 'Date',\n      field: 'date',\n    },\n  ]\n\n  columnsLastPayments: IColumn[] = [\n    {\n      header: 'Date',\n      field: 'date',\n    },\n    {\n      header: 'Recipient',\n      field: 'recipient',\n    },\n    {\n      header: 'Amount',\n      field: 'amount',\n    },\n  ]\n\n  lastPayments: ILastPayments[] = []\n  lastPatients: ILastPatients[] = []\n\n  constructor(\n    private appointmentsService: AppointmentsService,\n    private paymentsService: PaymentsService\n  ) {}\n\n  ngOnInit(): void {\n    this.getLastPatients()\n    this.getLastPayments()\n  }\n\n  getLastPatients() {\n    this.appointmentsService.getLastPatients().subscribe((patients) => {\n      this.lastPatients = patients\n    })\n  }\n\n  getLastPayments() {\n    this.paymentsService.getLastPayments().subscribe((payments) => {\n      this.lastPayments = payments\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  margin: 2rem;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 2rem;\n}\n\n.wrapper-introduction-information:not(:last-child) {\n  margin-bottom: 1rem;\n}\n\np.small2 {\n  color: var(--neutral-gray);\n  margin-bottom: 0.5rem;\n}\n\np.body2 {\n  color: var(--neutral-black);\n}\n",
                    "styleUrl": "dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "appointmentsService",
                        "type": "AppointmentsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "paymentsService",
                        "type": "PaymentsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 138,
                "jsdoctags": [
                    {
                        "name": "appointmentsService",
                        "type": "AppointmentsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "paymentsService",
                        "type": "PaymentsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <div>\n    <hc-card header=\"Introduction\" [style]=\"{ 'margin-bottom': '2rem' }\">\n      <div\n        class=\"wrapper-introduction-information\"\n        *ngFor=\"let information of informationsIntroductions\"\n      >\n        <p class=\"small2\">{{ information.title }}</p>\n        <p class=\"body2\">{{ information.description }}</p>\n      </div>\n    </hc-card>\n\n    <hc-card header=\"Latest Notifications\" [style]=\"{ 'margin-bottom': '2rem' }\">\n      <hc-tabs>\n        <hc-tab-panel header=\"App Notifications\">Content 1</hc-tab-panel>\n        <hc-tab-panel header=\"Feeds\">Content 2</hc-tab-panel>\n      </hc-tabs>\n    </hc-card>\n\n    <hc-card header=\"Last patients\" styleClass=\"hc-card-body-no-padding\">\n      <hc-table [columns]=\"tableLastPatients\" [value]=\"lastPatients\" [responsive]=\"true\">\n        <ng-template hcTemplate=\"header\" let-columns>\n          <tr>\n            <th\n              *ngFor=\"let column of columns\"\n              [ngStyle]=\"column.header === 'Date' ? { 'text-align': 'right' } : null\"\n            >\n              {{ column.header }}\n            </th>\n          </tr>\n        </ng-template>\n        <ng-template hcTemplate=\"body\" let-patient>\n          <tr>\n            <td style=\"display: flex; align-items: center\">\n              <hc-avatar\n                [image]=\"patient.photo\"\n                [circle]=\"true\"\n                size=\"small\"\n                [style]=\"{ 'margin-right': '0.5rem' }\"\n              ></hc-avatar>\n              {{ patient.name }}\n            </td>\n            <td>{{ patient.visitTime | date: 'hh:mm' }}</td>\n            <td style=\"text-align: right\">{{ patient.date | date: 'dd/MM/yyyy' }}</td>\n          </tr>\n        </ng-template>\n      </hc-table>\n    </hc-card>\n\n    <hc-card\n      header=\"Last payments\"\n      styleClass=\"hc-card-body-no-padding\"\n      [style]=\"{ 'margin-top': '1.5rem' }\"\n    >\n      <hc-table\n        [columns]=\"columnsLastPayments\"\n        [value]=\"lastPayments\"\n        [responsive]=\"true\"\n      >\n        <ng-template hcTemplate=\"header\" let-columns>\n          <tr>\n            <th>Date</th>\n            <th>Recipient</th>\n            <th style=\"text-align: right; padding-right: 1.5rem\">Amount</th>\n          </tr>\n        </ng-template>\n        <ng-template hcTemplate=\"body\" let-payment>\n          <tr>\n            <td>{{ payment.date | date: 'dd/MM/yyyy' }}</td>\n            <td>{{ payment.recipient }}</td>\n            <td style=\"text-align: right\">\n              <hc-tag\n                [rounded]=\"true\"\n                severity=\"success\"\n                [style]=\"{ 'padding': '0.5rem 1.25rem' }\"\n              >\n                {{ payment.amount | currency }}\n              </hc-tag>\n            </td>\n          </tr>\n        </ng-template>\n      </hc-table>\n    </hc-card>\n  </div>\n  <div>\n    <hc-card>\n      <hc-timeline-events-and-meetings\n        title=\"Events\"\n        [timeline]=\"events\"\n      ></hc-timeline-events-and-meetings>\n      <hc-timeline-events-and-meetings\n        title=\"Meetings\"\n        [timeline]=\"meetings\"\n      ></hc-timeline-events-and-meetings>\n    </hc-card>\n  </div>\n</div>\n"
        },
        {
            "name": "DocsComponent",
            "id": "component-DocsComponent-f03de094183140cff76873569766ce497e8af47c0da4a59d131cd5f744603430a9aee5e29cee841f3c6febc06ee7c631c8e8ad79b74b4b4edf87315c07180e0c",
            "file": "src/app/modules/docs/docs/docs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-docs",
            "styleUrls": [],
            "styles": [
                "\n      .wrapper-layout {\n        display: grid;\n        grid-template-columns: 256px calc(100% - 256px);\n      }\n\n      aside {\n        background-color: white;\n        padding: 24px;\n      }\n\n      main {\n      }\n\n      .menu-category {\n        padding: 0.5rem 0.25rem;\n        font-weight: 700;\n        color: var(--neutral-black);\n        font-size: 16px;\n      }\n\n      .menu-item {\n        color: var(--neutral-black);\n        padding: 0.5rem 0.75rem;\n        border-radius: 10px;\n        cursor: pointer;\n      }\n\n      .menu-item-active {\n        color: var(--primary-default);\n        font-weight: 700;\n        background-color: var(--primary-lightest);\n      }\n    "
            ],
            "template": "<div class=\"wrapper-layout\">\n  <hc-sidebar>\n    <hc-logo\n      [style]=\"{ margin: '1.5rem', cursor: 'pointer' }\"\n      routerLink=\"/home\"\n    ></hc-logo>\n    <hc-menu [model]=\"menu\" [style]=\"{ margin: '0.25rem 1.5rem' }\"></hc-menu>\n  </hc-sidebar>\n  <main style=\"margin: 4rem 4rem;\">\n    <router-outlet></router-outlet>\n  </main>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "defaultValue": "[\n    {\n      label: 'Form',\n      items: [\n        { label: 'Input Text', routerLink: '/docs/form/inputtext' },\n        { label: 'Checkbox', routerLink: '/docs/form/checkbox' },\n        { label: 'Switch', routerLink: '/docs/form/switch' },\n        { label: 'Select', routerLink: '/docs/form/select' },\n      ],\n    },\n    {\n      label: 'Table',\n      items: [\n        { label: 'Basic', routerLink: '/docs/table/basic' },\n        {\n          label: 'Dynamic',\n          routerLink: '/docs/table/dynamic',\n        },\n        {\n          label: 'Gridlines',\n          routerLink: '/docs/table/gridlines',\n        },\n        {\n          label: 'Page',\n          routerLink: '/docs/table/page',\n          queryParams: { page: 1, limit: 5 },\n          routerLinkActiveOptions: {\n            matrixParams: 'ignored',\n            queryParams: 'ignored',\n            paths: 'exact',\n            fragment: 'ignored',\n          },\n        },\n        {\n          label: 'Sort',\n          routerLink: '/docs/table/sort',\n          queryParams: { sortColumn: 'code', sortDirection: 'ASC' },\n          routerLinkActiveOptions: {\n            matrixParams: 'ignored',\n            queryParams: 'ignored',\n            paths: 'exact',\n            fragment: 'ignored',\n          },\n        },\n        {\n          label: 'Selection',\n          routerLink: '/docs/table/selection',\n          queryParams: { page: 1, limit: 5 },\n          routerLinkActiveOptions: {\n            matrixParams: 'ignored',\n            queryParams: 'ignored',\n            paths: 'exact',\n            fragment: 'ignored',\n          },\n        },\n        {\n          label: 'Limit',\n          routerLink: '/docs/table/limit',\n          queryParams: { page: 1, limit: 5 },\n          routerLinkActiveOptions: {\n            matrixParams: 'ignored',\n            queryParams: 'ignored',\n            paths: 'exact',\n            fragment: 'ignored',\n          },\n        },\n        {\n          label: 'Select all',\n          routerLink: '/docs/table/selectall',\n          queryParams: { page: 1, limit: 5 },\n          routerLinkActiveOptions: {\n            matrixParams: 'ignored',\n            queryParams: 'ignored',\n            paths: 'exact',\n            fragment: 'ignored',\n          },\n        },\n        {\n          label: 'Scroll',\n          routerLink: '/docs/table/scroll',\n        },\n        {\n          label: 'Row Expand',\n          routerLink: '/docs/table/rowexpand',\n        },\n        { label: 'Toggle', routerLink: '/docs/table/toggle' },\n      ],\n    },\n    {\n      label: 'Data',\n      items: [\n        {\n          label: 'Pagination',\n          routerLink: '/docs/data/pagination',\n        },\n        {\n          label: 'Timeline',\n          routerLink: '/docs/data/timeline',\n        },\n      ],\n    },\n    {\n      label: 'Misc',\n      items: [\n        {\n          label: 'Skeleton',\n          routerLink: '/docs/misc/skeleton',\n        },\n        {\n          label: 'Tag',\n          routerLink: '/docs/misc/tag',\n        },\n      ],\n    },\n    {\n      label: 'Overlay',\n      items: [\n        {\n          label: 'Modal',\n          routerLink: '/docs/overlay/modal',\n        },\n      ],\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methodsClass": [
                {
                    "name": "goToRoute",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToRouteRelativePath",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ActivatedRoute, Router } from '@angular/router'\n\nimport { Component } from '@angular/core'\nimport { IMenuItem } from 'src/app/components/menu/menu-item.component'\n\n@Component({\n  selector: 'app-docs',\n  template: `\n    <div class=\"wrapper-layout\">\n      <hc-sidebar>\n        <hc-logo\n          [style]=\"{ margin: '1.5rem', cursor: 'pointer' }\"\n          routerLink=\"/home\"\n        ></hc-logo>\n        <hc-menu [model]=\"menu\" [style]=\"{ margin: '0.25rem 1.5rem' }\"></hc-menu>\n      </hc-sidebar>\n      <main style=\"margin: 4rem 4rem;\">\n        <router-outlet></router-outlet>\n      </main>\n    </div>\n  `,\n  styles: [\n    `\n      .wrapper-layout {\n        display: grid;\n        grid-template-columns: 256px calc(100% - 256px);\n      }\n\n      aside {\n        background-color: white;\n        padding: 24px;\n      }\n\n      main {\n      }\n\n      .menu-category {\n        padding: 0.5rem 0.25rem;\n        font-weight: 700;\n        color: var(--neutral-black);\n        font-size: 16px;\n      }\n\n      .menu-item {\n        color: var(--neutral-black);\n        padding: 0.5rem 0.75rem;\n        border-radius: 10px;\n        cursor: pointer;\n      }\n\n      .menu-item-active {\n        color: var(--primary-default);\n        font-weight: 700;\n        background-color: var(--primary-lightest);\n      }\n    `,\n  ],\n})\nexport class DocsComponent {\n  menu: IMenuItem[] = [\n    {\n      label: 'Form',\n      items: [\n        { label: 'Input Text', routerLink: '/docs/form/inputtext' },\n        { label: 'Checkbox', routerLink: '/docs/form/checkbox' },\n        { label: 'Switch', routerLink: '/docs/form/switch' },\n        { label: 'Select', routerLink: '/docs/form/select' },\n      ],\n    },\n    {\n      label: 'Table',\n      items: [\n        { label: 'Basic', routerLink: '/docs/table/basic' },\n        {\n          label: 'Dynamic',\n          routerLink: '/docs/table/dynamic',\n        },\n        {\n          label: 'Gridlines',\n          routerLink: '/docs/table/gridlines',\n        },\n        {\n          label: 'Page',\n          routerLink: '/docs/table/page',\n          queryParams: { page: 1, limit: 5 },\n          routerLinkActiveOptions: {\n            matrixParams: 'ignored',\n            queryParams: 'ignored',\n            paths: 'exact',\n            fragment: 'ignored',\n          },\n        },\n        {\n          label: 'Sort',\n          routerLink: '/docs/table/sort',\n          queryParams: { sortColumn: 'code', sortDirection: 'ASC' },\n          routerLinkActiveOptions: {\n            matrixParams: 'ignored',\n            queryParams: 'ignored',\n            paths: 'exact',\n            fragment: 'ignored',\n          },\n        },\n        {\n          label: 'Selection',\n          routerLink: '/docs/table/selection',\n          queryParams: { page: 1, limit: 5 },\n          routerLinkActiveOptions: {\n            matrixParams: 'ignored',\n            queryParams: 'ignored',\n            paths: 'exact',\n            fragment: 'ignored',\n          },\n        },\n        {\n          label: 'Limit',\n          routerLink: '/docs/table/limit',\n          queryParams: { page: 1, limit: 5 },\n          routerLinkActiveOptions: {\n            matrixParams: 'ignored',\n            queryParams: 'ignored',\n            paths: 'exact',\n            fragment: 'ignored',\n          },\n        },\n        {\n          label: 'Select all',\n          routerLink: '/docs/table/selectall',\n          queryParams: { page: 1, limit: 5 },\n          routerLinkActiveOptions: {\n            matrixParams: 'ignored',\n            queryParams: 'ignored',\n            paths: 'exact',\n            fragment: 'ignored',\n          },\n        },\n        {\n          label: 'Scroll',\n          routerLink: '/docs/table/scroll',\n        },\n        {\n          label: 'Row Expand',\n          routerLink: '/docs/table/rowexpand',\n        },\n        { label: 'Toggle', routerLink: '/docs/table/toggle' },\n      ],\n    },\n    {\n      label: 'Data',\n      items: [\n        {\n          label: 'Pagination',\n          routerLink: '/docs/data/pagination',\n        },\n        {\n          label: 'Timeline',\n          routerLink: '/docs/data/timeline',\n        },\n      ],\n    },\n    {\n      label: 'Misc',\n      items: [\n        {\n          label: 'Skeleton',\n          routerLink: '/docs/misc/skeleton',\n        },\n        {\n          label: 'Tag',\n          routerLink: '/docs/misc/tag',\n        },\n      ],\n    },\n    {\n      label: 'Overlay',\n      items: [\n        {\n          label: 'Modal',\n          routerLink: '/docs/overlay/modal',\n        },\n      ],\n    },\n  ]\n\n  constructor(private router: Router, private route: ActivatedRoute) {}\n\n  goToRoute(route: string): void {\n    this.router.navigate([route], { relativeTo: this.route })\n  }\n\n  goToRouteRelativePath(route: string): void {\n    this.router.navigateByUrl(route)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .wrapper-layout {\n        display: grid;\n        grid-template-columns: 256px calc(100% - 256px);\n      }\n\n      aside {\n        background-color: white;\n        padding: 24px;\n      }\n\n      main {\n      }\n\n      .menu-category {\n        padding: 0.5rem 0.25rem;\n        font-weight: 700;\n        color: var(--neutral-black);\n        font-size: 16px;\n      }\n\n      .menu-item {\n        color: var(--neutral-black);\n        padding: 0.5rem 0.75rem;\n        border-radius: 10px;\n        cursor: pointer;\n      }\n\n      .menu-item-active {\n        color: var(--primary-default);\n        font-weight: 700;\n        background-color: var(--primary-lightest);\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 183,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-089e01d2da20bea693e95384be9cea34d22e7323e4790d9fb4dd1c3b2106331fec3388062f1029dc51edc8e93251755df537f07628e7aa558ded705230254960",
            "file": "src/app/components/dropdown/dropdown.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-dropdown",
            "styleUrls": [
                "dropdown.component.scss"
            ],
            "styles": [],
            "template": "<div\n  *ngIf=\"render\"\n  class=\"hc-dropdown-panel\"\n  [ngStyle]=\"style\"\n  (click)=\"onOverlayClick($event)\"\n  [@animation]=\"{\n    value: overlayVisible ? 'open' : 'close',\n    params: {\n      showTransitionParams: showTransitionOptions,\n      hideTransitionParams: hideTransitionOptions\n    }\n  }\"\n  (@animation.start)=\"onAnimationStart($event)\"\n  (@animation.done)=\"onAnimationEnd($event)\"\n>\n  <div class=\"hc-dropdown-content\" [style]=\"styleContent\">\n    <ng-content></ng-content>\n    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "defaultValue": "'body'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "string | HTMLElement",
                    "decorators": []
                },
                {
                    "name": "autoZIndex",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 109,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "baseZIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 110,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "dismissable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 111,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "focusOnShow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 112,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideTransitionOptions",
                    "defaultValue": "'.1s linear'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showTransitionOptions",
                    "defaultValue": "'.12s cubic-bezier(0, 0, 0.2, 1)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 114,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 115,
                    "type": "IStyle",
                    "decorators": []
                },
                {
                    "name": "styleContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 116,
                    "type": "IStyle",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<unknown>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 119,
                    "type": "EventEmitter"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 118,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 124,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HcConfig",
                    "optional": false,
                    "description": "",
                    "line": 125,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLDivElement",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "contentTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "destroyCallback",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "documentClickListener",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "documentResizeListener",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventListener | null",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isOverlayAnimationInProgress",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "overlayEventListener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "overlayService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OverlayService",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "overlaySubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "overlayVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "render",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 128,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scrollHandler",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConnectedOverlayScrollHandler | null",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "selfClick",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "target",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TemplateDirective"
                        }
                    ]
                },
                {
                    "name": "zone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "align",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "appendContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "bindDocumentClickListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "bindDocumentResizeListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "bindScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 341,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasTargetChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 401,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAnimationEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAnimationStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onContainerDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 355,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOverlayClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "IMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 392,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onWindowResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreAppend",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 386,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement | EventTarget | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement | EventTarget | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unbindDocumentClickListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 365,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unbindDocumentResizeListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 373,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unbindScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 380,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  QueryList,\n  Renderer2,\n  TemplateRef,\n  ViewRef,\n} from '@angular/core'\nimport {\n  AnimationEvent,\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations'\nimport {\n  ConnectedOverlayScrollHandler,\n  IConnectedOverlayScrollHandler,\n} from 'src/app/common/connected-overlay-scroll-handler/connected-overlay-scroll-handler'\n\nimport { DomHandler } from './../../common/dom-handler/dom-handler'\nimport { HcConfig } from 'src/app/common/hc-config/hc-config.service'\nimport { IMessage } from './../../common/overlay/overlay.service'\nimport { IStyle } from './../../common/models/style.model'\nimport { OverlayService } from 'src/app/common/overlay/overlay.service'\nimport { Subscription } from 'rxjs'\nimport { TemplateDirective } from 'src/app/directives/template/template.directive'\nimport { ZIndexUtils } from 'src/app/common/z-index-utils/z-index-utils'\n\n@Component({\n  selector: 'hc-dropdown',\n  template: `\n    <div\n      *ngIf=\"render\"\n      class=\"hc-dropdown-panel\"\n      [ngStyle]=\"style\"\n      (click)=\"onOverlayClick($event)\"\n      [@animation]=\"{\n        value: overlayVisible ? 'open' : 'close',\n        params: {\n          showTransitionParams: showTransitionOptions,\n          hideTransitionParams: hideTransitionOptions\n        }\n      }\"\n      (@animation.start)=\"onAnimationStart($event)\"\n      (@animation.done)=\"onAnimationEnd($event)\"\n    >\n      <div class=\"hc-dropdown-content\" [style]=\"styleContent\">\n        <ng-content></ng-content>\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n      </div>\n    </div>\n  `,\n  styleUrls: ['dropdown.component.scss'],\n  animations: [\n    trigger('animation', [\n      state(\n        'void',\n        style({\n          transform: 'scaleY(0.8)',\n          opacity: 0,\n        })\n      ),\n      state(\n        'close',\n        style({\n          opacity: 0,\n        })\n      ),\n      state(\n        'open',\n        style({\n          transform: 'translateY(0)',\n          opacity: 1,\n        })\n      ),\n      transition('void => open', animate('{{showTransitionParams}}')),\n      transition('open => close', animate('{{hideTransitionParams}}')),\n    ]),\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DropdownComponent implements AfterContentInit, OnDestroy {\n  contentTemplate!: TemplateRef<HTMLElement>\n  container!: HTMLDivElement\n  destroyCallback: (() => void) | null = null\n  documentClickListener: (() => void) | null = null\n  documentResizeListener: EventListener | null = null\n  isOverlayAnimationInProgress = false\n  render = false\n  overlayVisible = false\n  overlayEventListener!: (event: Node | null) => void\n  overlaySubscription!: Subscription\n  selfClick = false\n  scrollHandler: IConnectedOverlayScrollHandler | null = null\n  target: HTMLElement | null = null\n\n  @Input() appendTo: string | HTMLElement = 'body'\n  @Input() autoZIndex = true\n  @Input() baseZIndex = 0\n  @Input() dismissable = true\n  @Input() focusOnShow = true\n  @Input() hideTransitionOptions = '.1s linear'\n  @Input() showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)'\n  @Input() style?: IStyle\n  @Input() styleContent?: IStyle\n\n  @Output() onShow = new EventEmitter<null>()\n  @Output() onHide = new EventEmitter<unknown>()\n\n  @ContentChildren(TemplateDirective) templates!: QueryList<TemplateDirective>\n\n  constructor(\n    public cd: ChangeDetectorRef,\n    public config: HcConfig,\n    public el: ElementRef,\n    public zone: NgZone,\n    public renderer: Renderer2,\n    public overlayService: OverlayService\n  ) {}\n\n  ngAfterContentInit(): void {\n    this.templates.forEach((item) => {\n      switch (item.getType()) {\n        case 'content':\n          this.contentTemplate = item.template\n          break\n\n        default:\n          this.contentTemplate = item.template\n          break\n      }\n\n      this.cd.markForCheck()\n    })\n  }\n\n  toggle(event: Event, target?: HTMLElement): void {\n    if (this.isOverlayAnimationInProgress) {\n      return\n    }\n\n    if (this.overlayVisible) {\n      if (this.hasTargetChanged(event, target)) {\n        this.destroyCallback = () => {\n          this.show(null, target || event?.currentTarget || event?.target)\n        }\n      }\n\n      this.hide()\n    } else {\n      this.show(event, target)\n    }\n  }\n\n  show(event: Event | null, target?: HTMLElement | EventTarget | null): void {\n    if (this.isOverlayAnimationInProgress) {\n      return\n    }\n\n    this.target = (target || event?.currentTarget || event?.target) as HTMLElement\n    this.overlayVisible = true\n    this.render = true\n    this.cd.markForCheck()\n  }\n\n  hide() {\n    if (this.isOverlayAnimationInProgress) {\n      return\n    }\n\n    this.overlayVisible = false\n    this.cd.markForCheck()\n  }\n\n  focus(): void {\n    const focusable = DomHandler.findSingleElement(this.container, '[autofocus]')\n    if (focusable) {\n      this.zone.runOutsideAngular(() => {\n        setTimeout(() => focusable.focus(), 5)\n      })\n    }\n  }\n\n  hasTargetChanged(event: Event, target: HTMLElement | null | undefined): boolean {\n    return (\n      this.target != null &&\n      this.target !== (target || event.currentTarget || event.target)\n    )\n  }\n\n  onAnimationStart(event: AnimationEvent): void {\n    if (event.toState === 'open') {\n      this.container = event.element\n      this.onShow.emit(null)\n      this.appendContainer()\n      this.align()\n      this.bindDocumentClickListener()\n      this.bindDocumentResizeListener()\n      this.bindScrollListener()\n\n      if (this.focusOnShow) {\n        this.focus()\n      }\n\n      this.overlayEventListener = (event: Node | null) => {\n        if (this.container && this.container.contains(event)) {\n          this.selfClick = true\n        }\n      }\n\n      this.overlaySubscription = this.overlayService.clickObservable.subscribe(\n        () => this.overlayEventListener\n      )\n    }\n\n    this.isOverlayAnimationInProgress = true\n  }\n\n  onAnimationEnd(event: AnimationEvent): void {\n    switch (event.toState) {\n      case 'void':\n        if (this.destroyCallback) {\n          this.destroyCallback()\n          this.destroyCallback = null\n        }\n\n        if (this.overlaySubscription) {\n          this.overlaySubscription.unsubscribe()\n        }\n        break\n\n      case 'close':\n        if (this.autoZIndex) {\n          ZIndexUtils.clear(this.container)\n        }\n\n        if (this.overlaySubscription) {\n          this.overlaySubscription.unsubscribe()\n        }\n\n        this.onContainerDestroy()\n        this.onHide.emit({})\n        this.render = false\n        break\n    }\n\n    this.isOverlayAnimationInProgress = false\n  }\n\n  appendContainer(): void {\n    if (this.appendTo) {\n      if (this.appendTo === 'body') {\n        document.body.appendChild(this.container)\n      } else {\n        DomHandler.appendChild(this.container, this.appendTo as HTMLElement)\n      }\n    }\n  }\n\n  align(): void {\n    if (this.autoZIndex) {\n      ZIndexUtils.set(\n        'overlay',\n        this.container,\n        this.baseZIndex + this.config.zIndex.overlay\n      )\n    }\n\n    if (this.target) {\n      DomHandler.absolutePosition(this.container, this.target)\n\n      const containerOffset = DomHandler.getOffset(this.container)\n      const targetOffset = DomHandler.getOffset(this.target)\n      let arrowLeft = 0\n\n      if (containerOffset.left < targetOffset.left) {\n        arrowLeft = targetOffset.left - containerOffset.left\n      }\n\n      this.container.style.setProperty('--overlayArrowLeft', `${arrowLeft}px`)\n\n      if (containerOffset.top < targetOffset.top) {\n        DomHandler.addClass(this.container, 'p-dropdown-panel-flipped')\n      }\n    }\n  }\n\n  bindDocumentClickListener(): void {\n    if (!this.documentClickListener && this.dismissable) {\n      this.zone.runOutsideAngular(() => {\n        const documentEvent = DomHandler.isIOS() ? 'touchstart' : 'click'\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document'\n\n        this.documentClickListener = this.renderer.listen(\n          documentTarget,\n          documentEvent,\n          (event) => {\n            if (\n              !this.container.contains(event.target) &&\n              this.target !== event.target &&\n              !this.target?.contains(event.target) &&\n              !this.selfClick\n            ) {\n              this.zone.run(() => {\n                this.hide()\n              })\n            }\n\n            this.selfClick = false\n            this.cd.markForCheck()\n          }\n        )\n      })\n    }\n  }\n\n  bindDocumentResizeListener(): void {\n    this.documentResizeListener = this.onWindowResize.bind(this)\n    if (this.documentResizeListener) {\n      window.addEventListener('resize', this.documentResizeListener)\n    }\n  }\n\n  onWindowResize(): void {\n    if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n      this.hide()\n    }\n  }\n\n  bindScrollListener(): void {\n    if (!this.scrollHandler) {\n      if (this.target) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n          if (this.overlayVisible) {\n            this.hide()\n          }\n        })\n      }\n    } else {\n      this.scrollHandler.bindScrollListener()\n    }\n  }\n\n  onContainerDestroy(): void {\n    if (!(this.cd as ViewRef).destroy) {\n      this.target = null\n    }\n\n    this.unbindDocumentClickListener()\n    this.unbindDocumentResizeListener()\n    this.unbindScrollListener()\n  }\n\n  unbindDocumentClickListener(): void {\n    if (this.documentClickListener) {\n      this.documentClickListener()\n      this.documentClickListener = null\n      this.selfClick = false\n    }\n  }\n\n  unbindDocumentResizeListener(): void {\n    if (this.documentResizeListener) {\n      window.removeEventListener('resize', this.documentResizeListener)\n      this.documentResizeListener = null\n    }\n  }\n\n  unbindScrollListener() {\n    if (this.scrollHandler) {\n      this.scrollHandler.unbindScrollListener()\n    }\n  }\n\n  restoreAppend(): void {\n    if (this.container && this.appendTo) {\n      this.el.nativeElement.appendChild(this.container)\n    }\n  }\n\n  onOverlayClick(event: IMessage): void {\n    this.overlayService.add({\n      originalEvent: event,\n      target: this.el.nativeElement,\n    })\n\n    this.selfClick = true\n  }\n\n  ngOnDestroy(): void {\n    if (this.scrollHandler) {\n      this.scrollHandler.destroy()\n      this.scrollHandler = null\n    }\n\n    if (this.container && this.autoZIndex) {\n      ZIndexUtils.clear(this.container)\n    }\n\n    if (!(this.cd as ViewRef).destroyed) {\n      this.target = null\n    }\n\n    this.destroyCallback = null\n    if (this.container) {\n      this.restoreAppend()\n      this.onContainerDestroy()\n    }\n\n    if (this.overlaySubscription) {\n      this.overlaySubscription.unsubscribe()\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-dropdown-panel {\n  position: absolute;\n  margin-top: 0.5rem;\n  top: 0;\n  left: 0;\n  background-color: var(--neutral-white);\n  border-radius: 0.5rem;\n\n  &:after,\n  &:before {\n    bottom: 100%;\n    left: 1.25rem;\n    content: ' ';\n    height: 0;\n    width: 0;\n    position: absolute;\n    pointer-events: none;\n  }\n\n  &:after {\n    border-width: 0.5rem;\n    margin-left: -0.5rem;\n  }\n\n  &:before {\n    border-width: 10px;\n    margin-left: -10px;\n  }\n\n  .hc-dropdown-content {\n    box-shadow: 0 2px 4px -1px #0003, 0 4px 5px #00000024, 0 1px 10px #0000001f;\n    min-width: 112px;\n    border-radius: 0.5rem;\n    padding: 0.5rem 0;\n  }\n}\n",
                    "styleUrl": "dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "HcConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 121,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "HcConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlayService",
                        "type": "OverlayService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterContentInit",
                "OnDestroy"
            ]
        },
        {
            "name": "DropdownNotificationsComponent",
            "id": "component-DropdownNotificationsComponent-090cd0a7ee6841a410e7b67e432c99dc2d35e9826ece9472397f2b640022dfdca7a898c681436ce78c1dee296b65b7b2aece383d9505c46407cd2f3c1b843009",
            "file": "src/app/modules/home/components/dropdown-notifications/dropdown-notifications.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-dropdown-notifications",
            "styleUrls": [],
            "styles": [
                "\n      .hc-notifications-header {\n        background: linear-gradient(90deg, var(--primary-dark), var(--primary-default));\n        color: var(--neutral-white);\n        padding: 1.5rem;\n        border-top-left-radius: 0.5rem;\n        border-top-right-radius: 0.5rem;\n        display: flex;\n        align-items: flex-end;\n\n        p {\n          margin-left: 0.5rem;\n          line-height: 18px;\n        }\n      }\n\n      .hc-notification-item {\n        padding: 0.75rem 1.5rem 0.75rem 1.5rem;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n\n        &:first-child {\n          padding-top: 1.5rem;\n        }\n\n        &:last-child {\n          padding-bottom: 1.5rem;\n        }\n      }\n\n      .hc-wrapper-icon-and-description {\n        display: flex;\n        align-items: center;\n      }\n\n      .hc-notication-title-and-description {\n        margin-left: 0.5rem;\n      }\n\n      .hc-notification-description {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        max-width: 200px;\n        color: var(--neutral-gray);\n      }\n\n      .hc-notification-badge {\n        color: var(--neutral-gray-dark);\n        background-color: var(--neutral-divider);\n        padding: 4px 8px;\n        border-radius: 4px;\n      }\n\n      .hc-notification-title {\n        cursor: pointer;\n\n        &:hover {\n          color: var(--primary-default);\n        }\n      }\n\n      .hc-notification-footer {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: 0.5rem;\n        border-top: 1px solid var(--neutral-divider);\n      }\n    "
            ],
            "template": "<div>\n  <header class=\"hc-notifications-header\">\n    <h6>Notifications</h6>\n    <p class=\"small2\">{{ reports }} notifications</p>\n  </header>\n  <div>\n    <div class=\"hc-notification-item\" *ngFor=\"let notification of notifications\">\n      <div class=\"hc-wrapper-icon-and-description\">\n        <hc-icon\n          [icon]=\"notification.icon\"\n          size=\"large\"\n          theme=\"contained\"\n          [color]=\"notification.color\"\n        ></hc-icon>\n        <div class=\"hc-notication-title-and-description\">\n          <div class=\"subtitle1 hc-notification-title\">{{ notification.title }}</div>\n          <div class=\"small2 hc-notification-description\">\n            {{ notification.description }}\n          </div>\n        </div>\n      </div>\n      <div>\n        <div class=\"hc-notification-badge small2\">{{ notification.timeAgo }}</div>\n      </div>\n    </div>\n  </div>\n  <footer class=\"hc-notification-footer\">\n    <hc-button theme=\"text\" color=\"primary\">View all</hc-button>\n  </footer>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "IItemNotification[]",
                    "decorators": []
                },
                {
                    "name": "reports",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 120,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nexport interface IItemNotification {\n  title: string\n  description: string\n  icon: string\n  color: string\n  timeAgo: string\n}\n\n@Component({\n  selector: 'hc-dropdown-notifications',\n  template: `\n    <div>\n      <header class=\"hc-notifications-header\">\n        <h6>Notifications</h6>\n        <p class=\"small2\">{{ reports }} notifications</p>\n      </header>\n      <div>\n        <div class=\"hc-notification-item\" *ngFor=\"let notification of notifications\">\n          <div class=\"hc-wrapper-icon-and-description\">\n            <hc-icon\n              [icon]=\"notification.icon\"\n              size=\"large\"\n              theme=\"contained\"\n              [color]=\"notification.color\"\n            ></hc-icon>\n            <div class=\"hc-notication-title-and-description\">\n              <div class=\"subtitle1 hc-notification-title\">{{ notification.title }}</div>\n              <div class=\"small2 hc-notification-description\">\n                {{ notification.description }}\n              </div>\n            </div>\n          </div>\n          <div>\n            <div class=\"hc-notification-badge small2\">{{ notification.timeAgo }}</div>\n          </div>\n        </div>\n      </div>\n      <footer class=\"hc-notification-footer\">\n        <hc-button theme=\"text\" color=\"primary\">View all</hc-button>\n      </footer>\n    </div>\n  `,\n  styles: [\n    `\n      .hc-notifications-header {\n        background: linear-gradient(90deg, var(--primary-dark), var(--primary-default));\n        color: var(--neutral-white);\n        padding: 1.5rem;\n        border-top-left-radius: 0.5rem;\n        border-top-right-radius: 0.5rem;\n        display: flex;\n        align-items: flex-end;\n\n        p {\n          margin-left: 0.5rem;\n          line-height: 18px;\n        }\n      }\n\n      .hc-notification-item {\n        padding: 0.75rem 1.5rem 0.75rem 1.5rem;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n\n        &:first-child {\n          padding-top: 1.5rem;\n        }\n\n        &:last-child {\n          padding-bottom: 1.5rem;\n        }\n      }\n\n      .hc-wrapper-icon-and-description {\n        display: flex;\n        align-items: center;\n      }\n\n      .hc-notication-title-and-description {\n        margin-left: 0.5rem;\n      }\n\n      .hc-notification-description {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        max-width: 200px;\n        color: var(--neutral-gray);\n      }\n\n      .hc-notification-badge {\n        color: var(--neutral-gray-dark);\n        background-color: var(--neutral-divider);\n        padding: 4px 8px;\n        border-radius: 4px;\n      }\n\n      .hc-notification-title {\n        cursor: pointer;\n\n        &:hover {\n          color: var(--primary-default);\n        }\n      }\n\n      .hc-notification-footer {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: 0.5rem;\n        border-top: 1px solid var(--neutral-divider);\n      }\n    `,\n  ],\n})\nexport class DropdownNotificationsComponent {\n  @Input() reports!: number\n  @Input() notifications!: IItemNotification[]\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-notifications-header {\n        background: linear-gradient(90deg, var(--primary-dark), var(--primary-default));\n        color: var(--neutral-white);\n        padding: 1.5rem;\n        border-top-left-radius: 0.5rem;\n        border-top-right-radius: 0.5rem;\n        display: flex;\n        align-items: flex-end;\n\n        p {\n          margin-left: 0.5rem;\n          line-height: 18px;\n        }\n      }\n\n      .hc-notification-item {\n        padding: 0.75rem 1.5rem 0.75rem 1.5rem;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n\n        &:first-child {\n          padding-top: 1.5rem;\n        }\n\n        &:last-child {\n          padding-bottom: 1.5rem;\n        }\n      }\n\n      .hc-wrapper-icon-and-description {\n        display: flex;\n        align-items: center;\n      }\n\n      .hc-notication-title-and-description {\n        margin-left: 0.5rem;\n      }\n\n      .hc-notification-description {\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        max-width: 200px;\n        color: var(--neutral-gray);\n      }\n\n      .hc-notification-badge {\n        color: var(--neutral-gray-dark);\n        background-color: var(--neutral-divider);\n        padding: 4px 8px;\n        border-radius: 4px;\n      }\n\n      .hc-notification-title {\n        cursor: pointer;\n\n        &:hover {\n          color: var(--primary-default);\n        }\n      }\n\n      .hc-notification-footer {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: 0.5rem;\n        border-top: 1px solid var(--neutral-divider);\n      }\n    \n"
        },
        {
            "name": "DropdownProfileComponent",
            "id": "component-DropdownProfileComponent-691694a22fff66ebac5cf8ff72154985b26c2749433b90ccb1928c4629af2d8ede681481bded8f8371b626c0753f8e88bb13bea0154b3fc01cc3299bf5f3429e",
            "file": "src/app/modules/home/components/dropdown-profile/dropdown-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-dropdown-profile",
            "styleUrls": [],
            "styles": [
                "\n      .hc-dropdown-container-information {\n        padding: 1rem;\n        border-bottom: 1px solid var(--neutral-divider);\n        display: flex;\n        align-items: center;\n      }\n    "
            ],
            "template": "<div class=\"hc-dropdown-container-information\" *ngIf=\"user\">\n  <div style=\"margin-right: 1rem\">\n    <hc-avatar size=\"large\" [image]=\"user.photo\"></hc-avatar>\n  </div>\n  <div>\n    <div class=\"body1\" style=\"font-weight: 700\">{{ user.name }}</div>\n    <div class=\"body2\" style=\"font-weight: 700; color: var(--neutral-gray)\">\n      {{ user.email }}\n    </div>\n  </div>\n</div>\n<hc-menu [model]=\"menu\" [style]=\"{ margin: '0.25rem 1rem' }\"></hc-menu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "IMe",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "defaultValue": "[\n    {\n      label: 'My Profile',\n      command: () => {\n        this.goTo('user')\n      },\n    },\n    { label: 'My Appontiments' },\n    {\n      separator: true,\n    },\n    { label: 'Account Settings', command: () => this.goTo('user/edit') },\n    {\n      label: 'Sign Out',\n      command: () => {\n        this.onLogout()\n      },\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "goTo",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ActivatedRoute, Router } from '@angular/router'\nimport { Component, Input } from '@angular/core'\n\nimport { AuthenticationService } from './../../../authentication/authentication.service'\nimport { IMe } from './../../../user/services/user.service'\nimport { IMenuItem } from './../../../../components/menu/menu-item.component'\n\n@Component({\n  selector: 'hc-dropdown-profile',\n  template: `\n    <div class=\"hc-dropdown-container-information\" *ngIf=\"user\">\n      <div style=\"margin-right: 1rem\">\n        <hc-avatar size=\"large\" [image]=\"user.photo\"></hc-avatar>\n      </div>\n      <div>\n        <div class=\"body1\" style=\"font-weight: 700\">{{ user.name }}</div>\n        <div class=\"body2\" style=\"font-weight: 700; color: var(--neutral-gray)\">\n          {{ user.email }}\n        </div>\n      </div>\n    </div>\n    <hc-menu [model]=\"menu\" [style]=\"{ margin: '0.25rem 1rem' }\"></hc-menu>\n  `,\n  styles: [\n    `\n      .hc-dropdown-container-information {\n        padding: 1rem;\n        border-bottom: 1px solid var(--neutral-divider);\n        display: flex;\n        align-items: center;\n      }\n    `,\n  ],\n})\nexport class DropdownProfileComponent {\n  @Input() user!: IMe\n\n  menu: IMenuItem[] = [\n    {\n      label: 'My Profile',\n      command: () => {\n        this.goTo('user')\n      },\n    },\n    { label: 'My Appontiments' },\n    {\n      separator: true,\n    },\n    { label: 'Account Settings', command: () => this.goTo('user/edit') },\n    {\n      label: 'Sign Out',\n      command: () => {\n        this.onLogout()\n      },\n    },\n  ]\n\n  constructor(\n    private authenticationService: AuthenticationService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  goTo(path: string): void {\n    this.router.navigate([path], { relativeTo: this.route })\n  }\n\n  onLogout() {\n    this.authenticationService.logout()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-dropdown-container-information {\n        padding: 1rem;\n        border-bottom: 1px solid var(--neutral-divider);\n        display: flex;\n        align-items: center;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "EditComponent",
            "id": "component-EditComponent-55973a391c9dac4d71b670e36386a36548cbf8a0149b135eb0374caf07b4d03fb2a8fd514b3dd5722e8a0a60f4a489457049b6ee978b8d56d94bfe4eed4292fb",
            "file": "src/app/modules/user/edit/edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit",
            "styleUrls": [],
            "styles": [
                "\n      .hc-edit-container {\n        padding: 2rem;\n      }\n\n      .hc-edit-wrapper-cards {\n        display: grid;\n        grid-template-columns: 635px 1fr;\n        gap: 2rem;\n      }\n\n      .hc-form-control {\n        margin-bottom: 0.5rem;\n      }\n    "
            ],
            "template": "<div class=\"hc-edit-container\">\n  <h2 style=\"margin-bottom: 1.5rem\">Edit account</h2>\n  <div class=\"hc-edit-wrapper-cards\">\n    <hc-edit-user-account\n      *ngIf=\"user\"\n      [user]=\"user\"\n      (onEditUser)=\"onEditUser($event)\"\n    ></hc-edit-user-account>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfile",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "IProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "IProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { IProfile, UserService } from './../services/user.service'\n\n@Component({\n  selector: 'app-edit',\n  template: `\n    <div class=\"hc-edit-container\">\n      <h2 style=\"margin-bottom: 1.5rem\">Edit account</h2>\n      <div class=\"hc-edit-wrapper-cards\">\n        <hc-edit-user-account\n          *ngIf=\"user\"\n          [user]=\"user\"\n          (onEditUser)=\"onEditUser($event)\"\n        ></hc-edit-user-account>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .hc-edit-container {\n        padding: 2rem;\n      }\n\n      .hc-edit-wrapper-cards {\n        display: grid;\n        grid-template-columns: 635px 1fr;\n        gap: 2rem;\n      }\n\n      .hc-form-control {\n        margin-bottom: 0.5rem;\n      }\n    `,\n  ],\n})\nexport class EditComponent implements OnInit {\n  user!: IProfile\n\n  constructor(private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.userService.getProfile().subscribe((user) => {\n      this.user = user\n    })\n  }\n\n  onEditUser(user: IProfile): void {\n    console.log(user)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-edit-container {\n        padding: 2rem;\n      }\n\n      .hc-edit-wrapper-cards {\n        display: grid;\n        grid-template-columns: 635px 1fr;\n        gap: 2rem;\n      }\n\n      .hc-form-control {\n        margin-bottom: 0.5rem;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "EditUserAccountComponent",
            "id": "component-EditUserAccountComponent-31344c323834030a25b58a73c004448f58e8cb8ed256beaf9be1c57a5d599b771efb92762c19989e3acc48763bf802c3af51aa30278fb3062d982fefdd312cf3",
            "file": "src/app/modules/user/components/edit-user-account/edit-user-account.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-edit-user-account",
            "styleUrls": [],
            "styles": [
                "\n      .hc-form-two-input {\n        display: flex;\n\n        div {\n          flex: 1;\n        }\n\n        div:first-child {\n          margin-right: 1rem;\n        }\n      }\n\n      .hc-form-button {\n        display: flex;\n        justify-content: flex-end;\n        padding-top: 1rem;\n      }\n    "
            ],
            "template": "<hc-card>\n  <form [formGroup]=\"form\" (submit)=\"onSubmit(form)\">\n    <div class=\"hc-form-control\">\n      <hc-input\n        formControlName=\"name\"\n        id=\"name\"\n        label=\"Name\"\n        [submitted]=\"submitted\"\n      ></hc-input>\n    </div>\n    <div class=\"hc-form-control hc-form-two-input\">\n      <div>\n        <hc-input\n          type=\"number\"\n          formControlName=\"age\"\n          id=\"age\"\n          label=\"Age\"\n          [submitted]=\"submitted\"\n        ></hc-input>\n      </div>\n      <div>\n        <hc-select\n          [options]=\"genders\"\n          formControlName=\"gender\"\n          id=\"gender\"\n          labelTitle=\"Gender\"\n          optionLabel=\"description\"\n        ></hc-select>\n      </div>\n    </div>\n    <div class=\"form-control\">\n      <hc-input\n        type=\"tel\"\n        formControlName=\"phone\"\n        id=\"phone\"\n        label=\"Phone number\"\n        [submitted]=\"submitted\"\n        [inputMask]=\"phoneMask\"\n      ></hc-input>\n    </div>\n    <div class=\"form-control\">\n      <hc-input\n        formControlName=\"lastVisit\"\n        id=\"lastVisit\"\n        label=\"Last visit\"\n      ></hc-input>\n    </div>\n    <div class=\"form-control\">\n      <hc-select\n        [options]=\"status\"\n        formControlName=\"status\"\n        id=\"status\"\n        labelTitle=\"Status\"\n        optionLabel=\"description\"\n      ></hc-select>\n    </div>\n    <div class=\"hc-form-button\">\n      <hc-button color=\"primary\" type=\"submit\">Save changes</hc-button>\n    </div>\n  </form>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "IProfile",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onEditUser",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    name: ['', [Validators.required]],\n    age: ['', [Validators.required]],\n    gender: ['', [Validators.required]],\n    phone: ['', [Validators.required]],\n    lastVisit: [{ value: '', disabled: true }],\n    status: ['', [Validators.required]],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "genders",
                    "defaultValue": "[\n    { code: 'FEMALE', description: 'Female' },\n    { code: 'MALE', description: 'Male' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "phoneMask",
                    "defaultValue": "createMask('(99) 9999-9999[9]')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "status",
                    "defaultValue": "[\n    { code: 'APPROVED', description: 'Approved ' },\n    { code: 'PENDING', description: 'Pending' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms'\n\nimport { IProfile } from '../../services/user.service'\nimport { createMask } from '@ngneat/input-mask'\n\n@Component({\n  selector: 'hc-edit-user-account',\n  template: `\n    <hc-card>\n      <form [formGroup]=\"form\" (submit)=\"onSubmit(form)\">\n        <div class=\"hc-form-control\">\n          <hc-input\n            formControlName=\"name\"\n            id=\"name\"\n            label=\"Name\"\n            [submitted]=\"submitted\"\n          ></hc-input>\n        </div>\n        <div class=\"hc-form-control hc-form-two-input\">\n          <div>\n            <hc-input\n              type=\"number\"\n              formControlName=\"age\"\n              id=\"age\"\n              label=\"Age\"\n              [submitted]=\"submitted\"\n            ></hc-input>\n          </div>\n          <div>\n            <hc-select\n              [options]=\"genders\"\n              formControlName=\"gender\"\n              id=\"gender\"\n              labelTitle=\"Gender\"\n              optionLabel=\"description\"\n            ></hc-select>\n          </div>\n        </div>\n        <div class=\"form-control\">\n          <hc-input\n            type=\"tel\"\n            formControlName=\"phone\"\n            id=\"phone\"\n            label=\"Phone number\"\n            [submitted]=\"submitted\"\n            [inputMask]=\"phoneMask\"\n          ></hc-input>\n        </div>\n        <div class=\"form-control\">\n          <hc-input\n            formControlName=\"lastVisit\"\n            id=\"lastVisit\"\n            label=\"Last visit\"\n          ></hc-input>\n        </div>\n        <div class=\"form-control\">\n          <hc-select\n            [options]=\"status\"\n            formControlName=\"status\"\n            id=\"status\"\n            labelTitle=\"Status\"\n            optionLabel=\"description\"\n          ></hc-select>\n        </div>\n        <div class=\"hc-form-button\">\n          <hc-button color=\"primary\" type=\"submit\">Save changes</hc-button>\n        </div>\n      </form>\n    </hc-card>\n  `,\n  styles: [\n    `\n      .hc-form-two-input {\n        display: flex;\n\n        div {\n          flex: 1;\n        }\n\n        div:first-child {\n          margin-right: 1rem;\n        }\n      }\n\n      .hc-form-button {\n        display: flex;\n        justify-content: flex-end;\n        padding-top: 1rem;\n      }\n    `,\n  ],\n})\nexport class EditUserAccountComponent implements OnInit {\n  @Input() user!: IProfile\n\n  @Output() onEditUser = new EventEmitter()\n\n  form: FormGroup = this.fb.group({\n    name: ['', [Validators.required]],\n    age: ['', [Validators.required]],\n    gender: ['', [Validators.required]],\n    phone: ['', [Validators.required]],\n    lastVisit: [{ value: '', disabled: true }],\n    status: ['', [Validators.required]],\n  })\n  genders = [\n    { code: 'FEMALE', description: 'Female' },\n    { code: 'MALE', description: 'Male' },\n  ]\n  status = [\n    { code: 'APPROVED', description: 'Approved ' },\n    { code: 'PENDING', description: 'Pending' },\n  ]\n  submitted = false\n\n  phoneMask = createMask('(99) 9999-9999[9]')\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    if (this.user) {\n      this.form.patchValue({\n        name: this.user.name,\n        age: this.user.age,\n        gender: this.genders.find((g) => g.code === this.user.gender),\n        phone: this.user.contact.phone,\n        lastVisit: this.user.history[this.user.history.length - 1].lastVisit,\n        status: this.status.find((f) => f.code === this.user.status),\n      })\n    }\n  }\n\n  get phone() {\n    return this.form.get('phone') as FormControl\n  }\n\n  onSubmit({ value, valid }: FormGroup): void {\n    this.submitted = true\n    if (valid) {\n      this.onEditUser.emit(value)\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-form-two-input {\n        display: flex;\n\n        div {\n          flex: 1;\n        }\n\n        div:first-child {\n          margin-right: 1rem;\n        }\n      }\n\n      .hc-form-button {\n        display: flex;\n        justify-content: flex-end;\n        padding-top: 1rem;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 117,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "phone": {
                    "name": "phone",
                    "getSignature": {
                        "name": "phone",
                        "type": "",
                        "returnType": "",
                        "line": 134
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-b97e2e006b1071afdd7b66781650101929f339999aa0b3af0854edab20a16abf40ed7f98455274fe79ca741021a99b5e9cede65e23926b4d7ffa2a4cb4e48a61",
            "file": "src/app/modules/home/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-header",
            "styleUrls": [],
            "styles": [
                "\n      .wrapper-button-and-badge {\n        position: relative;\n\n        hc-badge {\n          position: absolute;\n          right: 0.5rem;\n          border: 3px solid var(--neutral-background);\n          border-radius: 50%;\n        }\n      }\n    "
            ],
            "template": "<header>\n  <hc-toolbar\n    [style]=\"{\n      'padding': '0.5rem 2rem',\n      'background-color': 'var(--neutral-background)'\n    }\"\n  >\n    <ng-template hcTemplate=\"left\">\n      <hc-search placeholder=\"Search\" [style]=\"{ 'width': '350px' }\"></hc-search>\n    </ng-template>\n    <ng-template hcTemplate=\"right\">\n      <div class=\"wrapper-button-and-badge\" #notificationTarget>\n        <hc-badge value=\"5\"></hc-badge>\n        <hc-button\n          icon=\"notifications\"\n          theme=\"text\"\n          [style]=\"{\n            'margin-right': '0.5rem'\n          }\"\n          (onClick)=\"dropdownNotificiations.toggle($event, notificationTarget)\"\n        ></hc-button>\n        <hc-dropdown\n          #dropdownNotificiations\n          [style]=\"{ width: '375px' }\"\n          [styleContent]=\"{ padding: '0' }\"\n        >\n          <hc-dropdown-notifications\n            [reports]=\"5\"\n            [notifications]=\"notitifcations\"\n          ></hc-dropdown-notifications>\n        </hc-dropdown>\n      </div>\n      <div #actualTarget *ngIf=\"user\">\n        <hc-avatar\n          [image]=\"user.photo\"\n          [style]=\"{ cursor: 'pointer' }\"\n          (click)=\"dropdown.toggle($event, actualTarget)\"\n        ></hc-avatar>\n        <hc-dropdown #dropdown [style]=\"{ width: '275px' }\">\n          <hc-dropdown-profile [user]=\"user\"></hc-dropdown-profile>\n        </hc-dropdown>\n      </div>\n    </ng-template>\n  </hc-toolbar>\n</header>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "IMe",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "notitifcations",
                    "defaultValue": "[\n    {\n      color: '#fac032',\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'monitor_heart',\n      timeAgo: '1 hr',\n      title: 'New Description',\n    },\n    {\n      color: '#ff6760',\n      description:\n        'Esse sanctus ea nec. An nam nonumy veritus theophrastus. No laoreet intellegebat pro, ea omnes graecis eloquentiam quo.',\n      icon: 'local_hospital',\n      timeAgo: '2 hr',\n      title: 'Appointment',\n    },\n    {\n      color: '#558eff',\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur nam nisi veniam.',\n      icon: 'vaccines',\n      timeAgo: '5 hr',\n      title: 'Medication',\n    },\n    {\n      color: '#16d090',\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'healing',\n      timeAgo: '2 days',\n      title: 'Operation',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IItemNotification[]",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nimport { IItemNotification } from './../dropdown-notifications/dropdown-notifications.component'\nimport { IMe } from './../../../user/services/user.service'\n\n@Component({\n  selector: 'hc-header',\n  template: `\n    <header>\n      <hc-toolbar\n        [style]=\"{\n          'padding': '0.5rem 2rem',\n          'background-color': 'var(--neutral-background)'\n        }\"\n      >\n        <ng-template hcTemplate=\"left\">\n          <hc-search placeholder=\"Search\" [style]=\"{ 'width': '350px' }\"></hc-search>\n        </ng-template>\n        <ng-template hcTemplate=\"right\">\n          <div class=\"wrapper-button-and-badge\" #notificationTarget>\n            <hc-badge value=\"5\"></hc-badge>\n            <hc-button\n              icon=\"notifications\"\n              theme=\"text\"\n              [style]=\"{\n                'margin-right': '0.5rem'\n              }\"\n              (onClick)=\"dropdownNotificiations.toggle($event, notificationTarget)\"\n            ></hc-button>\n            <hc-dropdown\n              #dropdownNotificiations\n              [style]=\"{ width: '375px' }\"\n              [styleContent]=\"{ padding: '0' }\"\n            >\n              <hc-dropdown-notifications\n                [reports]=\"5\"\n                [notifications]=\"notitifcations\"\n              ></hc-dropdown-notifications>\n            </hc-dropdown>\n          </div>\n          <div #actualTarget *ngIf=\"user\">\n            <hc-avatar\n              [image]=\"user.photo\"\n              [style]=\"{ cursor: 'pointer' }\"\n              (click)=\"dropdown.toggle($event, actualTarget)\"\n            ></hc-avatar>\n            <hc-dropdown #dropdown [style]=\"{ width: '275px' }\">\n              <hc-dropdown-profile [user]=\"user\"></hc-dropdown-profile>\n            </hc-dropdown>\n          </div>\n        </ng-template>\n      </hc-toolbar>\n    </header>\n  `,\n  styles: [\n    `\n      .wrapper-button-and-badge {\n        position: relative;\n\n        hc-badge {\n          position: absolute;\n          right: 0.5rem;\n          border: 3px solid var(--neutral-background);\n          border-radius: 50%;\n        }\n      }\n    `,\n  ],\n})\nexport class HeaderComponent {\n  @Input() user!: IMe\n\n  notitifcations: IItemNotification[] = [\n    {\n      color: '#fac032',\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'monitor_heart',\n      timeAgo: '1 hr',\n      title: 'New Description',\n    },\n    {\n      color: '#ff6760',\n      description:\n        'Esse sanctus ea nec. An nam nonumy veritus theophrastus. No laoreet intellegebat pro, ea omnes graecis eloquentiam quo.',\n      icon: 'local_hospital',\n      timeAgo: '2 hr',\n      title: 'Appointment',\n    },\n    {\n      color: '#558eff',\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur nam nisi veniam.',\n      icon: 'vaccines',\n      timeAgo: '5 hr',\n      title: 'Medication',\n    },\n    {\n      color: '#16d090',\n      description:\n        'Aenean lacinia bibendum nulla sed consectetur. Nullam id dolor id nibh ultricies vehicula ut id elit.',\n      icon: 'healing',\n      timeAgo: '2 days',\n      title: 'Operation',\n    },\n  ]\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .wrapper-button-and-badge {\n        position: relative;\n\n        hc-badge {\n          position: absolute;\n          right: 0.5rem;\n          border: 3px solid var(--neutral-background);\n          border-radius: 50%;\n        }\n      }\n    \n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-f484f48fdb16c8902636a1beabb0796d27965328cc098dc3d530a1d4724a15e0baf42c58079e8985dd728926dbb5607beb7f55788a5cf70e80f448b6032c17fa",
            "file": "src/app/modules/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [
                "\n      .wrapper-home {\n        display: flex;\n      }\n    "
            ],
            "template": "<div class=\"wrapper-home\">   <hc-sidebar>\n     <hc-logo [style]=\"{ margin: '1.5rem' }\"></hc-logo>\n     <hc-menu [model]=\"menuItems\" [style]=\"{ margin: '0.25rem 1.5rem' }\"></hc-menu>\n   </hc-sidebar>\n   <div style=\"width: 100%;\">\n     <hc-header [user]=\"user\"></hc-header>\n     <div style=\"margin-left: 1rem\">\n       <hc-breadcrumb [model]=\"breadcrumbs$ | async\"></hc-breadcrumb>\n     </div>\n     <div>\n       <router-outlet></router-outlet>\n     </div>\n   </div>\n </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breadcrumbs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IBreadcrumbItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[\n    {\n      label: 'MEDICINE',\n      items: [\n        { label: 'Dashboard', routerLink: 'dashboard', icon: 'dashboard' },\n        { label: 'Appontiments', routerLink: 'appointments', icon: 'vaccines' },\n        { label: 'Doctors', routerLink: 'doctors', icon: 'medication_liquid' },\n        { label: 'Departaments', routerLink: 'departaments', icon: 'group' },\n        { label: 'Patients', routerLink: 'patients', icon: 'badge' },\n        { label: 'Payments', routerLink: 'payments', icon: 'payments' },\n      ],\n    },\n    {\n      separator: true,\n    },\n    {\n      label: 'SETTINGS',\n      items: [\n        { label: 'Docs', routerLink: '/docs', icon: 'description' },\n        { label: 'Help', routerLink: 'help', icon: 'help' },\n      ],\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMe",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "getMe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\nimport { BreadcrumbService } from './../../components/breadcrumb/breadcrumb.service'\nimport { IBreadcrumbItem } from '../../components/breadcrumb/breadcrumb.component'\nimport { IMe } from '../user/services/user.service'\nimport { IMenuItem } from './../../components/menu/menu-item.component'\nimport { Observable } from 'rxjs'\nimport { UserService } from './../user/services/user.service'\n\n@Component({\n  selector: 'app-home',\n  template: ` <div class=\"wrapper-home\">\n    <hc-sidebar>\n      <hc-logo [style]=\"{ margin: '1.5rem' }\"></hc-logo>\n      <hc-menu [model]=\"menuItems\" [style]=\"{ margin: '0.25rem 1.5rem' }\"></hc-menu>\n    </hc-sidebar>\n    <div style=\"width: 100%;\">\n      <hc-header [user]=\"user\"></hc-header>\n      <div style=\"margin-left: 1rem\">\n        <hc-breadcrumb [model]=\"breadcrumbs$ | async\"></hc-breadcrumb>\n      </div>\n      <div>\n        <router-outlet></router-outlet>\n      </div>\n    </div>\n  </div>`,\n  styles: [\n    `\n      .wrapper-home {\n        display: flex;\n      }\n    `,\n  ],\n})\nexport class HomeComponent implements OnInit {\n  user!: IMe\n\n  menuItems: IMenuItem[] = [\n    {\n      label: 'MEDICINE',\n      items: [\n        { label: 'Dashboard', routerLink: 'dashboard', icon: 'dashboard' },\n        { label: 'Appontiments', routerLink: 'appointments', icon: 'vaccines' },\n        { label: 'Doctors', routerLink: 'doctors', icon: 'medication_liquid' },\n        { label: 'Departaments', routerLink: 'departaments', icon: 'group' },\n        { label: 'Patients', routerLink: 'patients', icon: 'badge' },\n        { label: 'Payments', routerLink: 'payments', icon: 'payments' },\n      ],\n    },\n    {\n      separator: true,\n    },\n    {\n      label: 'SETTINGS',\n      items: [\n        { label: 'Docs', routerLink: '/docs', icon: 'description' },\n        { label: 'Help', routerLink: 'help', icon: 'help' },\n      ],\n    },\n  ]\n\n  breadcrumbs$: Observable<IBreadcrumbItem[]>\n\n  constructor(\n    private userService: UserService,\n    private breadcrumbService: BreadcrumbService\n  ) {\n    this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$\n  }\n\n  ngOnInit(): void {\n    this.getMe()\n  }\n\n  getMe(): void {\n    this.userService.getMe().subscribe((me) => {\n      this.user = me\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .wrapper-home {\n        display: flex;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "breadcrumbService",
                        "type": "BreadcrumbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breadcrumbService",
                        "type": "BreadcrumbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-2cadf43b93b8508f057d7f40332039c530dcf1f516af115b5338c251fd6a293f2f2846d35629ab34a9a4f0f3cb168fc110c780db16ef99b7e9ad37b3a550da99",
            "file": "src/app/components/icon/icon.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-icon",
            "styleUrls": [],
            "styles": [
                "\n      .hc-icon {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .icon-size-small {\n        font-size: 16px;\n      }\n\n      .icon-size-normal {\n        font-size: 20px;\n      }\n\n      .icon-size-large {\n        font-size: 24px;\n      }\n\n      .hc-icon-theme-contained {\n        padding: 0.5rem;\n        width: 2.5rem;\n        height: 2.5rem;\n        border-radius: 0.3rem;\n      }\n    "
            ],
            "template": "<div\n  #wrapperIcon\n  [ngClass]=\"classes\"\n  class=\"material-symbols-outlined hc-icon\"\n  [ngStyle]=\"style\"\n>\n  {{ icon }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "\"small\" | \"normal\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "IStyle",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "\"default\" | \"contained\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "wrapperIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'wrapperIcon'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core'\n\nimport { IStyle } from './../../common/models/style.model'\n\n@Component({\n  selector: 'hc-icon',\n  template: `\n    <div\n      #wrapperIcon\n      [ngClass]=\"classes\"\n      class=\"material-symbols-outlined hc-icon\"\n      [ngStyle]=\"style\"\n    >\n      {{ icon }}\n    </div>\n  `,\n  styles: [\n    `\n      .hc-icon {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .icon-size-small {\n        font-size: 16px;\n      }\n\n      .icon-size-normal {\n        font-size: 20px;\n      }\n\n      .icon-size-large {\n        font-size: 24px;\n      }\n\n      .hc-icon-theme-contained {\n        padding: 0.5rem;\n        width: 2.5rem;\n        height: 2.5rem;\n        border-radius: 0.3rem;\n      }\n    `,\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class IconComponent implements AfterViewInit {\n  @Input() icon!: string\n  @Input() size: 'small' | 'normal' | 'large' = 'normal'\n  @Input() theme: 'default' | 'contained' = 'default'\n  @Input() color?: string\n  @Input() style?: IStyle\n\n  @ViewChild('wrapperIcon') wrapperIcon!: ElementRef\n\n  ngAfterViewInit(): void {\n    if (this.wrapperIcon && this.theme === 'contained') {\n      this.wrapperIcon.nativeElement.style.backgroundColor = `${this.color}40`\n      this.wrapperIcon.nativeElement.style.color = this.color\n    }\n  }\n\n  public get classes() {\n    return {\n      [`icon-size-${this.size}`]: true,\n      [`hc-icon-theme-${this.theme}`]: true,\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-icon {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .icon-size-small {\n        font-size: 16px;\n      }\n\n      .icon-size-normal {\n        font-size: 20px;\n      }\n\n      .icon-size-large {\n        font-size: 24px;\n      }\n\n      .hc-icon-theme-contained {\n        padding: 0.5rem;\n        width: 2.5rem;\n        height: 2.5rem;\n        border-radius: 0.3rem;\n      }\n    \n",
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 70
                    }
                }
            }
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-5c2cc8ac37886fedb410200fcc6c33c21c1d7b2b2160d719d4fff1d61ef06c2de575cb23cd66cbbce5ebcf42940017398637830f378c349487fc1eb49e82c1f6",
            "file": "src/app/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-input",
            "styleUrls": [
                "input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appendIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputMask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "InputmaskOptions<>",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "\"text\" | \"tel\" | \"password\" | \"email\" | \"number\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "appendIconClickEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "onAppendIconClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerNgControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCharacterSpecialFromMask",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core'\nimport { ControlValueAccessor, NgControl } from '@angular/forms'\n\nimport { InputmaskOptions } from '@ngneat/input-mask'\n\n@Component({\n  selector: 'hc-input',\n  templateUrl: 'input.component.html',\n  styleUrls: ['input.component.scss'],\n})\nexport class InputComponent implements ControlValueAccessor {\n  @Input() type: 'text' | 'tel' | 'password' | 'email' | 'number' = 'text'\n  @Input() placeholder = ''\n  @Input() ariaLabel?: string\n  @Input() formControlName!: string\n  @Input() submitted = false\n  @Input() id?: string\n  @Input() label?: string\n  @Input() appendIcon?: string\n  @Input() inputMask!: InputmaskOptions<unknown>\n\n  @Output() appendIconClickEvent = new EventEmitter()\n\n  disabled = false\n  isFocus = false\n  value!: string\n\n  onChange!: (value: string) => void\n  onTouched!: () => void\n\n  constructor(public ngControl: NgControl, private elem: ElementRef) {\n    this.registerNgControl()\n  }\n\n  registerNgControl(): void {\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this\n    } else {\n      throw new Error(\n        `You need pass the [\"formControlName\"] in the ${this.elem.nativeElement.tagName.toLowerCase()}`\n      )\n    }\n  }\n\n  writeValue(value: string): void {\n    this.value = value\n  }\n\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled\n  }\n\n  onAppendIconClick() {\n    this.appendIconClickEvent.emit()\n  }\n\n  onInputChange(value: string): void {\n    this.onChange(value)\n  }\n\n  onFocus(): void {\n    this.isFocus = true\n  }\n\n  onBlur(): void {\n    this.isFocus = false\n    this.onTouched()\n  }\n\n  removeCharacterSpecialFromMask(value: string): string {\n    if (this.inputMask) {\n      return value.replace(/[^a-zA-Z0-9]/g, '')\n    }\n\n    return value\n  }\n\n  get labelClasses() {\n    return {\n      ['hc-input-label']: true,\n      ['hc-input-label-focus']: this.isFocus,\n      ['hc-input-label-error']:\n        this.ngControl.invalid &&\n        (this.submitted || this.ngControl.dirty || this.ngControl.touched),\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper-input-and-error {\n  height: 84px;\n}\n\n.wrapper-input {\n  display: flex;\n  border: 1px solid var(--neutral-gray);\n  border-radius: 8px;\n}\n\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  appearance: none;\n  margin: 0;\n}\n\ninput[type='number'] {\n  appearance: textfield;\n}\n\ninput {\n  width: 100%;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 20px;\n  padding: 14px 16px;\n  color: var(--neutral-black);\n  outline: 0;\n  border: none;\n  border-radius: 8px;\n\n  &::placeholder {\n    font-size: 16px;\n    font-weight: 400;\n    color: var(--neutral-gray);\n    line-height: 20px !important;\n    letter-spacing: 0.1px;\n  }\n\n  &:disabled {\n    background-color: var(--neutral-background);\n    border: 1px solid var(--neutral-divider);\n    color: var(--neutral-gray-light);\n  }\n}\n\n.input-focus {\n  border: 1.5px solid var(--primary-default);\n}\n\n.input-error {\n  border: 1px solid var(--red-default);\n}\n\nbutton {\n  border: none;\n  background-color: var(--neutral-white);\n  cursor: pointer;\n  padding: 10px 16px;\n  color: var(--neutral-gray-light);\n  outline: 0;\n  border-radius: 8px;\n}\n\n.icon-error {\n  color: var(--red-default);\n}\n\n.error-message {\n  color: var(--red-default);\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n}\n\n.hc-input-label {\n  display: block;\n  margin-bottom: 6px;\n  color: var(--neutral-gray);\n}\n\n.hc-input-label-focus {\n  color: var(--primary-default);\n}\n\n.hc-input-label-error {\n  color: var(--red-default);\n}\n",
                    "styleUrl": "input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elem",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "labelClasses": {
                    "name": "labelClasses",
                    "getSignature": {
                        "name": "labelClasses",
                        "type": "",
                        "returnType": "",
                        "line": 86
                    }
                }
            },
            "templateData": "<div class=\"wrapper-input-and-error\">\n  <label [attr.for]=\"id\" *ngIf=\"label\" [ngClass]=\"labelClasses\">{{ label }}</label>\n  <div\n    class=\"wrapper-input\"\n    [ngClass]=\"{\n      'input-focus': isFocus,\n      'input-error':\n        ngControl.invalid && (submitted || ngControl.dirty || ngControl.touched)\n    }\"\n  >\n    <input\n      #input\n      [type]=\"type\"\n      [value]=\"value\"\n      [disabled]=\"disabled\"\n      [attr.placeholder]=\"placeholder\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.id]=\"id\"\n      (focus)=\"onFocus()\"\n      (blur)=\"onBlur()\"\n      (change)=\"onInputChange(input.value)\"\n      [inputMask]=\"inputMask\"\n    />\n    <button\n      *ngIf=\"appendIcon\"\n      type=\"button\"\n      class=\"material-symbols-outlined append-icon\"\n      aria-label=\"append-icon-button\"\n      [disabled]=\"disabled\"\n      (click)=\"onAppendIconClick()\"\n      [ngClass]=\"{\n        'icon-error':\n          ngControl.invalid && (submitted || ngControl.dirty || ngControl.touched)\n      }\"\n    >\n      {{ appendIcon }}\n    </button>\n  </div>\n  <div\n    *ngIf=\"ngControl.invalid && (submitted || ngControl.dirty || ngControl.touched)\"\n    class=\"error-message\"\n  >\n    <span\n      class=\"material-symbols-outlined\"\n      style=\"font-size: 18px; margin-right: 4px; margin-top: 3px\"\n      >info</span\n    >\n    <p *ngIf=\"ngControl.errors?.['required']\">The {{ ngControl.name }} is required!</p>\n    <p *ngIf=\"ngControl.errors?.['email']\">Invalid email address</p>\n    <p *ngIf=\"ngControl.errors?.['passwordStrength']\">\n      Your password must be 8-20 characters long, contain letters uppercase and lowercase,\n      special characters\n    </p>\n  </div>\n</div>\n"
        },
        {
            "name": "InvoicesComponent",
            "id": "component-InvoicesComponent-48f789d24334b22f644a411c2868a5f09172a2eb4a26a0d2a12e72c10c918e06af4fc42eaa836fd9192c46dfe6a00e43b438614ac4e57e5743f0318a85e9b1a9",
            "file": "src/app/modules/invoices/invoices.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-invoices",
            "styleUrls": [
                "./invoices.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./invoices.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hcDtOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "invoices",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IInvoice[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { CurrencyPipe, DatePipe } from '@angular/common'\n\ninterface IInvoice {\n  company: string\n  date: string | null\n  recipient: string\n  status: string\n  amount: string | null\n}\n\nconst RESPONSE = [\n  {\n    company: 'Sterling Cooper Ltd.',\n    date: new Date().toISOString(),\n    recipient: 'Leslie Alexander',\n    status: 'PAID',\n    amount: 293.01,\n  },\n  {\n    company: 'Acme Co.',\n    date: new Date().toISOString(),\n    recipient: 'Ronald Richards',\n    status: 'SCHEDULED',\n    amount: 596.28,\n  },\n  {\n    company: 'Sirius Cybernetics Co.',\n    date: new Date().toISOString(),\n    recipient: 'Jane Cooper',\n    status: 'UNPAID',\n    amount: 219.78,\n  },\n]\n\n@Component({\n  selector: 'app-invoices',\n  templateUrl: './invoices.component.html',\n  styleUrls: ['./invoices.component.scss'],\n})\nexport class InvoicesComponent implements OnInit {\n  hcDtOptions!: any\n  invoices: IInvoice[] = []\n\n  constructor(private datePipe: DatePipe, private currencyPipe: CurrencyPipe) {}\n\n  ngOnInit(): void {\n    this.invoices = RESPONSE.map((row) => ({\n      company: row.company,\n      date: this.datePipe.transform(row.date, 'dd/MM/yyyy'),\n      recipient: row.recipient,\n      status: row.status,\n      amount: this.currencyPipe.transform(row.amount, 'BRL'),\n    }))\n\n    this.hcDtOptions = {\n      columns: [\n        {\n          title: 'Company',\n          data: 'company',\n        },\n        {\n          title: 'Date',\n          data: 'date',\n          textColor: '#A0A4A8',\n        },\n        {\n          title: 'Recipient',\n          data: 'recipient',\n        },\n        {\n          title: 'Status',\n          data: 'status',\n        },\n        {\n          title: 'Amount',\n          data: 'amount',\n        },\n      ],\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./invoices.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currencyPipe",
                        "type": "CurrencyPipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currencyPipe",
                        "type": "CurrencyPipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div style=\"padding: 32px\">\n  <hc-table [hcDtOptions]=\"hcDtOptions\" (sortColumnEvent)=\"tableBaseService.sort($event)\">\n  </hc-table>\n</div> -->\n"
        },
        {
            "name": "LinkComponent",
            "id": "component-LinkComponent-6b72850761d5a72ea0320e85ff34723c3fcb22ce078a086268ce978110a7469ea8ff5a25761c5a312a5a8aee5d700f367b1f547d754b4e0c2949c3909860f98a",
            "file": "src/app/components/link/link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-link",
            "styleUrls": [],
            "styles": [
                "\n      a {\n        font-size: 14px;\n        line-height: 14px;\n        letter-spacing: 0.2px;\n        font-weight: bold;\n        color: var(--primary-default);\n        cursor: pointer;\n        text-decoration: none;\n      }\n    "
            ],
            "template": "<a [routerLink]=\"router\" [attr.aria-label]=\"ariaLabel\" role=\"link\">\n  <ng-content></ng-content>\n</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'hc-link',\n  template: `\n    <a [routerLink]=\"router\" [attr.aria-label]=\"ariaLabel\" role=\"link\">\n      <ng-content></ng-content>\n    </a>\n  `,\n  styles: [\n    `\n      a {\n        font-size: 14px;\n        line-height: 14px;\n        letter-spacing: 0.2px;\n        font-weight: bold;\n        color: var(--primary-default);\n        cursor: pointer;\n        text-decoration: none;\n      }\n    `,\n  ],\n})\nexport class LinkComponent {\n  @Input() router!: string\n  @Input() ariaLabel?: string\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      a {\n        font-size: 14px;\n        line-height: 14px;\n        letter-spacing: 0.2px;\n        font-weight: bold;\n        color: var(--primary-default);\n        cursor: pointer;\n        text-decoration: none;\n      }\n    \n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-380a21013fbe320b9fbebab4b7916aac0cb9b8cfdeabd4acc564f5869a59a52cf9b45d529d5cfa102d6afd20f8028173f6a662810499b331afb5da7e9c2aecef",
            "file": "src/app/modules/authentication/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "../scss/authentication.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    login: ['', [Validators.required]],\n    password: ['', [Validators.required]],\n    rememberMe: [{ value: true, disabled: false }],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isVisiblePassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AuthenticationService } from './../authentication.service'\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'\n\nimport { Component } from '@angular/core'\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['../scss/authentication.scss'],\n})\nexport class LoginComponent {\n  form: FormGroup = this.fb.group({\n    login: ['', [Validators.required]],\n    password: ['', [Validators.required]],\n    rememberMe: [{ value: true, disabled: false }],\n  })\n  isVisiblePassword = false\n  submitted = false\n\n  constructor(\n    private fb: FormBuilder,\n    private authenticationService: AuthenticationService\n  ) {}\n\n  toggleVisible() {\n    this.isVisiblePassword = !this.isVisiblePassword\n  }\n\n  onSubmit({ value, valid }: FormGroup) {\n    this.submitted = true\n    if (valid) {\n      this.authenticationService.login(value)\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: grid;\n  grid-template-columns: 1.5fr 2fr;\n  height: 100vh;\n}\n\n.wrapper-form {\n  padding: 40px 96px;\n}\n\n.wrapper-section-page-not-found {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n}\n\n.title {\n  color: var(--neutral-black);\n}\n\n.description {\n  color: var(--neutral-gray-dark);\n}\n\n@mixin background {\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n}\n\n.background-login {\n  @include background;\n  background-image: url('/assets/imgs/login.jpg');\n}\n\n.background-register {\n  @include background;\n  background-image: url('/assets/imgs/register.jpg');\n}\n\n.background-404 {\n  @include background;\n  background-image: url('/assets/imgs/404.jpg');\n}\n",
                    "styleUrl": "../scss/authentication.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"container\">\n  <div class=\"wrapper-form\">\n    <h1 class=\"title\" style=\"margin-bottom: 12px\">Sign in</h1>\n    <p class=\"body1 description\" style=\"margin-bottom: 40px\">\n      Sign in to access your Account\n    </p>\n    <form [formGroup]=\"form\" (submit)=\"onSubmit(form)\">\n      <hc-input\n        placeholder=\"Login\"\n        ariaLabel=\"login\"\n        formControlName=\"login\"\n        [submitted]=\"submitted\"\n      ></hc-input>\n      <hc-input\n        placeholder=\"Password\"\n        ariaLabel=\"password\"\n        formControlName=\"password\"\n        [submitted]=\"submitted\"\n        [type]=\"isVisiblePassword ? 'text' : 'password'\"\n        [appendIcon]=\"isVisiblePassword ? 'visibility' : 'visibility_off'\"\n        (appendIconClickEvent)=\"toggleVisible()\"\n      ></hc-input>\n      <hc-switch\n        ariaLabel=\"remember me\"\n        formControlName=\"rememberMe\"\n        label=\"Remember me\"\n      ></hc-switch>\n      <div style=\"margin-top: 40px; margin-bottom: 100px\">\n        <hc-button type=\"submit\" color=\"primary\" ariaLabel=\"sign in\">\n          <hc-icon\n            icon=\"login\"\n            [style]=\"{ 'margin-top': '4px', 'margin-right': '8px' }\"\n          ></hc-icon>\n          Sign In\n        </hc-button>\n      </div>\n    </form>\n    <div>\n      <hc-link router=\"/\" ariaLabel=\"forgot password\">Forgot password?</hc-link>\n    </div>\n    <div style=\"margin-top: 8px\">\n      <span class=\"body2\">Don't have an account?</span>\n      <hc-link ariaLabel=\"sign up\" router=\"/auth/register\"> Sign up!</hc-link>\n    </div>\n  </div>\n  <div class=\"background-login\"></div>\n</div>\n"
        },
        {
            "name": "LogoComponent",
            "id": "component-LogoComponent-389c38efc4992ac09931cddfa80a1470b96aea6683123c1736e374cbcacf322e9f3a8d3070292885aecde499706df074ac8d338b5a283714be85df3f8d373bec",
            "file": "src/app/components/logo/logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-logo",
            "styleUrls": [],
            "styles": [
                "\n      .hc-logo-wrapper {\n        display: flex;\n        align-items: center;\n      }\n\n      .hc-logo {\n        margin-right: 1rem;\n      }\n\n      .hc-logo-text {\n        font-size: 1.5rem;\n        color: var(--primary-default);\n      }\n    "
            ],
            "template": "<div class=\"hc-logo-wrapper\" [ngStyle]=\"style\">\n  <div class=\"hc-logo\">\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      version=\"1.1\"\n      id=\"Layer_1\"\n      x=\"0px\"\n      y=\"0px\"\n      width=\"40\"\n      height=\"40\"\n      viewBox=\"0 0 512 512\"\n      style=\"enable-background:new 0 0 512 512;\"\n      xml:space=\"preserve\"\n    >\n      <circle style=\"fill:#336cfb;\" cx=\"256\" cy=\"256\" r=\"256\" />\n      <path\n        style=\"fill:#102866;\"\n        d=\"M497.447,341.237L383.564,227.354l-35.204,30.787L215.093,126.309l-34.506,154.784l-27.298,17.798  L348.979,494.58C418.13,467.611,472.66,411.448,497.447,341.237z\"\n      />\n      <g>\n        <path\n          style=\"fill:#FFFFFF;\"\n          d=\"M184.889,312.889L184.889,312.889c-23.564,0-42.667-19.103-42.667-42.667V156.444   c0-23.564,19.103-42.667,42.667-42.667l0,0c23.564,0,42.667,19.103,42.667,42.667v113.778   C227.556,293.786,208.453,312.889,184.889,312.889z\"\n        />\n        <path\n          style=\"fill:#FFFFFF;\"\n          d=\"M227.556,156.444c0-23.564-19.103-42.667-42.667-42.667s-42.667,19.103-42.667,42.667v55.884h85.333   V156.444z\"\n        />\n      </g>\n      <path\n        style=\"fill:#D0D1D3;\"\n        d=\"M227.556,156.444c0-23.564-19.103-42.667-42.667-42.667c-0.048,0-0.095,0.003-0.143,0.003v98.547  h42.81V156.444z\"\n      />\n      <path\n        style=\"fill:#FF314F;\"\n        d=\"M142.222,212.328v57.894c0,23.564,19.103,42.667,42.667,42.667s42.667-19.103,42.667-42.667v-57.894  H142.222z\"\n      />\n      <path\n        style=\"fill:#A30F44;\"\n        d=\"M184.746,212.328v100.559c0.048,0,0.095,0.003,0.143,0.003c23.564,0,42.667-19.103,42.667-42.667  V212.33h-42.81V212.328z\"\n      />\n      <g>\n        <path\n          style=\"fill:#FFFFFF;\"\n          d=\"M379.225,222.808L379.225,222.808c17.479,15.803,18.839,42.784,3.034,60.263l-76.305,84.397   c-15.803,17.479-42.784,18.837-60.263,3.034l0,0c-17.479-15.803-18.839-42.784-3.034-60.263l76.305-84.397   C334.764,208.363,361.744,207.005,379.225,222.808z\"\n        />\n        <path\n          style=\"fill:#FFFFFF;\"\n          d=\"M242.655,310.239c-15.803,17.479-14.445,44.46,3.034,60.263   c17.479,15.803,44.46,14.445,60.264-3.034l37.478-41.453l-63.298-57.229L242.655,310.239z\"\n        />\n      </g>\n      <path\n        style=\"fill:#D0D1D3;\"\n        d=\"M244.991,369.838c0.234,0.221,0.459,0.448,0.698,0.664c17.479,15.803,44.46,14.445,60.263-3.034  l37.478-41.451l-31.965-28.901L244.991,369.838z\"\n      />\n      <path\n        style=\"fill:#FF314F;\"\n        d=\"M343.431,326.016l38.828-42.944c15.803-17.479,14.445-44.46-3.034-60.263s-44.46-14.445-60.264,3.034  l-38.828,42.944L343.431,326.016z\"\n      />\n      <path\n        style=\"fill:#A30F44;\"\n        d=\"M379.313,222.892l-67.846,74.223l31.965,28.901l38.828-42.944  C398.034,265.623,396.705,238.707,379.313,222.892z\"\n      />\n    </svg>\n  </div>\n  <h1 class=\"hc-logo-text\">Healthcare</h1>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "IStyle",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nimport { IStyle } from './../../common/models/style.model'\n\n@Component({\n  selector: 'hc-logo',\n  template: `\n    <div class=\"hc-logo-wrapper\" [ngStyle]=\"style\">\n      <div class=\"hc-logo\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          version=\"1.1\"\n          id=\"Layer_1\"\n          x=\"0px\"\n          y=\"0px\"\n          width=\"40\"\n          height=\"40\"\n          viewBox=\"0 0 512 512\"\n          style=\"enable-background:new 0 0 512 512;\"\n          xml:space=\"preserve\"\n        >\n          <circle style=\"fill:#336cfb;\" cx=\"256\" cy=\"256\" r=\"256\" />\n          <path\n            style=\"fill:#102866;\"\n            d=\"M497.447,341.237L383.564,227.354l-35.204,30.787L215.093,126.309l-34.506,154.784l-27.298,17.798  L348.979,494.58C418.13,467.611,472.66,411.448,497.447,341.237z\"\n          />\n          <g>\n            <path\n              style=\"fill:#FFFFFF;\"\n              d=\"M184.889,312.889L184.889,312.889c-23.564,0-42.667-19.103-42.667-42.667V156.444   c0-23.564,19.103-42.667,42.667-42.667l0,0c23.564,0,42.667,19.103,42.667,42.667v113.778   C227.556,293.786,208.453,312.889,184.889,312.889z\"\n            />\n            <path\n              style=\"fill:#FFFFFF;\"\n              d=\"M227.556,156.444c0-23.564-19.103-42.667-42.667-42.667s-42.667,19.103-42.667,42.667v55.884h85.333   V156.444z\"\n            />\n          </g>\n          <path\n            style=\"fill:#D0D1D3;\"\n            d=\"M227.556,156.444c0-23.564-19.103-42.667-42.667-42.667c-0.048,0-0.095,0.003-0.143,0.003v98.547  h42.81V156.444z\"\n          />\n          <path\n            style=\"fill:#FF314F;\"\n            d=\"M142.222,212.328v57.894c0,23.564,19.103,42.667,42.667,42.667s42.667-19.103,42.667-42.667v-57.894  H142.222z\"\n          />\n          <path\n            style=\"fill:#A30F44;\"\n            d=\"M184.746,212.328v100.559c0.048,0,0.095,0.003,0.143,0.003c23.564,0,42.667-19.103,42.667-42.667  V212.33h-42.81V212.328z\"\n          />\n          <g>\n            <path\n              style=\"fill:#FFFFFF;\"\n              d=\"M379.225,222.808L379.225,222.808c17.479,15.803,18.839,42.784,3.034,60.263l-76.305,84.397   c-15.803,17.479-42.784,18.837-60.263,3.034l0,0c-17.479-15.803-18.839-42.784-3.034-60.263l76.305-84.397   C334.764,208.363,361.744,207.005,379.225,222.808z\"\n            />\n            <path\n              style=\"fill:#FFFFFF;\"\n              d=\"M242.655,310.239c-15.803,17.479-14.445,44.46,3.034,60.263   c17.479,15.803,44.46,14.445,60.264-3.034l37.478-41.453l-63.298-57.229L242.655,310.239z\"\n            />\n          </g>\n          <path\n            style=\"fill:#D0D1D3;\"\n            d=\"M244.991,369.838c0.234,0.221,0.459,0.448,0.698,0.664c17.479,15.803,44.46,14.445,60.263-3.034  l37.478-41.451l-31.965-28.901L244.991,369.838z\"\n          />\n          <path\n            style=\"fill:#FF314F;\"\n            d=\"M343.431,326.016l38.828-42.944c15.803-17.479,14.445-44.46-3.034-60.263s-44.46-14.445-60.264,3.034  l-38.828,42.944L343.431,326.016z\"\n          />\n          <path\n            style=\"fill:#A30F44;\"\n            d=\"M379.313,222.892l-67.846,74.223l31.965,28.901l38.828-42.944  C398.034,265.623,396.705,238.707,379.313,222.892z\"\n          />\n        </svg>\n      </div>\n      <h1 class=\"hc-logo-text\">Healthcare</h1>\n    </div>\n  `,\n  styles: [\n    `\n      .hc-logo-wrapper {\n        display: flex;\n        align-items: center;\n      }\n\n      .hc-logo {\n        margin-right: 1rem;\n      }\n\n      .hc-logo-text {\n        font-size: 1.5rem;\n        color: var(--primary-default);\n      }\n    `,\n  ],\n})\nexport class LogoComponent {\n  @Input() style?: IStyle\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-logo-wrapper {\n        display: flex;\n        align-items: center;\n      }\n\n      .hc-logo {\n        margin-right: 1rem;\n      }\n\n      .hc-logo-text {\n        font-size: 1.5rem;\n        color: var(--primary-default);\n      }\n    \n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-25a53808fb6cea3206b75ee652491f6f185a5353d24d7625dabf75a6e107f977a9e38e82772dde6c10886820c6547f297bcf7acbfdfcfeee84fca108e42704e2",
            "file": "src/app/components/menu/menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-menu",
            "styleUrls": [],
            "styles": [
                "\n      ul {\n        list-style-type: none;\n      }\n\n      .hc-submenu-header {\n        color: var(--neutral-gray);\n        padding: 0.75rem 1.25rem;\n      }\n\n      .hc-menu-separator {\n        border-top: 1px solid var(--neutral-gray-lighter);\n        margin: 0.25rem 0;\n      }\n    "
            ],
            "template": "<div>\n  <ul role=\"menu\">\n    <ng-template ngFor let-submenu *ngIf=\"hasSubMenu()\" [ngForOf]=\"model\">\n      <li class=\"hc-menu-separator\" *ngIf=\"submenu.separator\" role=\"separator\"></li>\n      <li\n        *ngIf=\"!submenu.separator\"\n        class=\"hc-submenu-header\"\n        role=\"none\"\n        [ngStyle]=\"style\"\n        [attr.data-automationid]=\"submenu.automationId\"\n      >\n        <span class=\"body2\">{{ submenu.label }}</span>\n      </li>\n      <ng-template ngFor let-item [ngForOf]=\"submenu.items\">\n        <li\n          class=\"hc-menu-item\"\n          role=\"none\"\n          [hc-menu-item]=\"item\"\n          [ngStyle]=\"style\"\n        ></li>\n      </ng-template>\n    </ng-template>\n    <ng-template ngFor let-item [ngForOf]=\"model\" *ngIf=\"!hasSubMenu()\">\n      <li class=\"hc-menu-separator\" *ngIf=\"item.separator\" role=\"separator\"></li>\n      <li\n        class=\"hc-menu-item\"\n        *ngIf=\"!item.separator\"\n        [hc-menu-item]=\"item\"\n        role=\"none\"\n        [ngStyle]=\"style\"\n      ></li>\n    </ng-template>\n  </ul>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "IStyle",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "hasSubMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "itemClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "IMenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "IMenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core'\n\nimport { IMenuItem } from './menu-item.component'\nimport { IStyle } from './../../common/models/style.model'\n\n@Component({\n  selector: 'hc-menu',\n  template: `\n    <div>\n      <ul role=\"menu\">\n        <ng-template ngFor let-submenu *ngIf=\"hasSubMenu()\" [ngForOf]=\"model\">\n          <li class=\"hc-menu-separator\" *ngIf=\"submenu.separator\" role=\"separator\"></li>\n          <li\n            *ngIf=\"!submenu.separator\"\n            class=\"hc-submenu-header\"\n            role=\"none\"\n            [ngStyle]=\"style\"\n            [attr.data-automationid]=\"submenu.automationId\"\n          >\n            <span class=\"body2\">{{ submenu.label }}</span>\n          </li>\n          <ng-template ngFor let-item [ngForOf]=\"submenu.items\">\n            <li\n              class=\"hc-menu-item\"\n              role=\"none\"\n              [hc-menu-item]=\"item\"\n              [ngStyle]=\"style\"\n            ></li>\n          </ng-template>\n        </ng-template>\n        <ng-template ngFor let-item [ngForOf]=\"model\" *ngIf=\"!hasSubMenu()\">\n          <li class=\"hc-menu-separator\" *ngIf=\"item.separator\" role=\"separator\"></li>\n          <li\n            class=\"hc-menu-item\"\n            *ngIf=\"!item.separator\"\n            [hc-menu-item]=\"item\"\n            role=\"none\"\n            [ngStyle]=\"style\"\n          ></li>\n        </ng-template>\n      </ul>\n    </div>\n  `,\n  styles: [\n    `\n      ul {\n        list-style-type: none;\n      }\n\n      .hc-submenu-header {\n        color: var(--neutral-gray);\n        padding: 0.75rem 1.25rem;\n      }\n\n      .hc-menu-separator {\n        border-top: 1px solid var(--neutral-gray-lighter);\n        margin: 0.25rem 0;\n      }\n    `,\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MenuComponent {\n  @Input() model!: IMenuItem[]\n  @Input() style?: IStyle\n\n  hasSubMenu(): boolean {\n    if (this.model) {\n      for (const item of this.model) {\n        if (item.items) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  itemClick(event: Event, item: IMenuItem): void {\n    if (!item.url && !item.routerLink) {\n      event.preventDefault()\n    }\n\n    if (item.command) {\n      item.command({ originalEvent: event, item })\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      ul {\n        list-style-type: none;\n      }\n\n      .hc-submenu-header {\n        color: var(--neutral-gray);\n        padding: 0.75rem 1.25rem;\n      }\n\n      .hc-menu-separator {\n        border-top: 1px solid var(--neutral-gray-lighter);\n        margin: 0.25rem 0;\n      }\n    \n"
        },
        {
            "name": "MenuItemComponent",
            "id": "component-MenuItemComponent-a2efbc0040be32354eaf0d4dd9dd7efe67623c6d7a2e2ea8882fac8f19ade274656472801b1278aa3e2710bb1fc0f6eabda1e89da42329e18fad847bb961a316",
            "file": "src/app/components/menu/menu-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[hc-menu-item]",
            "styleUrls": [],
            "styles": [
                "\n      .hc-menu-item-link {\n        text-decoration: none;\n        color: var(--neutral-gray-dark);\n        padding: 0.75rem 1.25rem;\n        display: flex;\n        align-items: center;\n        font-size: 1rem;\n        border-radius: 0.5rem;\n        cursor: pointer;\n\n        .hc-menu-item-icon {\n          margin-right: 0.5rem;\n          font-size: 20px;\n          color: var(--neutral-gray-lighter);\n        }\n      }\n\n      .hc-menu-item-link:hover {\n        background-color: var(--primary-lightest);\n        color: var(--primary-default);\n\n        .hc-menu-item-icon {\n          color: var(--primary-default);\n        }\n      }\n\n      .hc-menu-item-link-active {\n        background-color: var(--primary-lightest);\n        color: var(--primary-default);\n\n        .hc-menu-item-icon {\n          color: var(--primary-default);\n        }\n      }\n    "
            ],
            "template": "<a\n  *ngIf=\"item && !item?.routerLink\"\n  class=\"hc-menu-item-link subtitle2\"\n  role=\"menuitem\"\n  (click)=\"menu.itemClick($event, item)\"\n>\n  <span *ngIf=\"item.icon\" class=\"material-symbols-outlined hc-menu-item-icon\">\n    {{ item.icon }}\n  </span>\n  <span class=\"hc-menu-item-text\">{{ item.label }}</span>\n</a>\n<a\n  *ngIf=\"item && item.routerLink\"\n  class=\"hc-menu-item-link subtitle2\"\n  role=\"menuitem\"\n  routerLinkActive=\"hc-menu-item-link-active\"\n  [routerLink]=\"item.routerLink\"\n  [queryParams]=\"item.queryParams\"\n  [routerLinkActiveOptions]=\"item.routerLinkActiveOptions || { exact: false }\"\n>\n  <span *ngIf=\"item?.icon\" class=\"material-symbols-outlined hc-menu-item-icon\">\n    {{ item.icon }}\n  </span>\n  <span class=\"hc-menu-item-text\">{{ item.label }}</span>\n</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hc-menu-item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "IMenuItem",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "menuComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuComponent",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nimport { IsActiveMatchOptions } from '@angular/router'\nimport { MenuComponent } from './menu.component'\n\ninterface ICommand {\n  originalEvent: Event\n  item: IMenuItem\n}\n\nexport interface IMenuItem {\n  automationId?: any\n  disabled?: boolean\n  command?: (object: ICommand) => void\n  items?: IMenuItem[]\n  icon?: string\n  label?: string\n  queryParams?: { [key: string]: string | number }\n  routerLink?: any\n  routerLinkActiveOptions?: IsActiveMatchOptions\n  separator?: boolean\n  url?: string\n}\n\n@Component({\n  selector: '[hc-menu-item]',\n  template: `\n    <a\n      *ngIf=\"item && !item?.routerLink\"\n      class=\"hc-menu-item-link subtitle2\"\n      role=\"menuitem\"\n      (click)=\"menu.itemClick($event, item)\"\n    >\n      <span *ngIf=\"item.icon\" class=\"material-symbols-outlined hc-menu-item-icon\">\n        {{ item.icon }}\n      </span>\n      <span class=\"hc-menu-item-text\">{{ item.label }}</span>\n    </a>\n    <a\n      *ngIf=\"item && item.routerLink\"\n      class=\"hc-menu-item-link subtitle2\"\n      role=\"menuitem\"\n      routerLinkActive=\"hc-menu-item-link-active\"\n      [routerLink]=\"item.routerLink\"\n      [queryParams]=\"item.queryParams\"\n      [routerLinkActiveOptions]=\"item.routerLinkActiveOptions || { exact: false }\"\n    >\n      <span *ngIf=\"item?.icon\" class=\"material-symbols-outlined hc-menu-item-icon\">\n        {{ item.icon }}\n      </span>\n      <span class=\"hc-menu-item-text\">{{ item.label }}</span>\n    </a>\n  `,\n  styles: [\n    `\n      .hc-menu-item-link {\n        text-decoration: none;\n        color: var(--neutral-gray-dark);\n        padding: 0.75rem 1.25rem;\n        display: flex;\n        align-items: center;\n        font-size: 1rem;\n        border-radius: 0.5rem;\n        cursor: pointer;\n\n        .hc-menu-item-icon {\n          margin-right: 0.5rem;\n          font-size: 20px;\n          color: var(--neutral-gray-lighter);\n        }\n      }\n\n      .hc-menu-item-link:hover {\n        background-color: var(--primary-lightest);\n        color: var(--primary-default);\n\n        .hc-menu-item-icon {\n          color: var(--primary-default);\n        }\n      }\n\n      .hc-menu-item-link-active {\n        background-color: var(--primary-lightest);\n        color: var(--primary-default);\n\n        .hc-menu-item-icon {\n          color: var(--primary-default);\n        }\n      }\n    `,\n  ],\n})\nexport class MenuItemComponent {\n  @Input('hc-menu-item') item?: IMenuItem\n\n  menu: MenuComponent\n\n  constructor(public menuComponent: MenuComponent) {\n    this.menu = menuComponent\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-menu-item-link {\n        text-decoration: none;\n        color: var(--neutral-gray-dark);\n        padding: 0.75rem 1.25rem;\n        display: flex;\n        align-items: center;\n        font-size: 1rem;\n        border-radius: 0.5rem;\n        cursor: pointer;\n\n        .hc-menu-item-icon {\n          margin-right: 0.5rem;\n          font-size: 20px;\n          color: var(--neutral-gray-lighter);\n        }\n      }\n\n      .hc-menu-item-link:hover {\n        background-color: var(--primary-lightest);\n        color: var(--primary-default);\n\n        .hc-menu-item-icon {\n          color: var(--primary-default);\n        }\n      }\n\n      .hc-menu-item-link-active {\n        background-color: var(--primary-lightest);\n        color: var(--primary-default);\n\n        .hc-menu-item-icon {\n          color: var(--primary-default);\n        }\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "menuComponent",
                        "type": "MenuComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 97,
                "jsdoctags": [
                    {
                        "name": "menuComponent",
                        "type": "MenuComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-760a67e6f50421f7ed489ac68c931a5bdcdd00edad5079223996cb5c0e038b45733f0f10a77f7d5b323f3556084cb2bfeb161d56749ab3dbae5fefae246b64db",
            "file": "src/app/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-modal",
            "styleUrls": [
                "modal.component.scss"
            ],
            "styles": [],
            "template": "<div *ngIf=\"maskVisible\" [ngClass]=\"classes\">\n  <div\n    *ngIf=\"visible\"\n    [attr.aria-labelledby]=\"id + '-label'\"\n    [ngClass]=\"containerClasses\"\n    [ngStyle]=\"style\"\n    [@animation]=\"{\n      value: 'visible',\n      params: { transform: transformOptions, transition: transitionOptions }\n    }\"\n    (@animation.start)=\"onAnimationStart($event)\"\n    (@animation.done)=\"onAnimationEnd($event)\"\n    role=\"modal\"\n  >\n    <div class=\"hc-modal-header\">\n      <span [attr.id]=\"id + '-label'\" class=\"hc-modal-title\">{{ header }}</span>\n      <div class=\"hc-modal-header-icons\">\n        <button\n          *ngIf=\"closable\"\n          type=\"button\"\n          class=\"hc-modal-header-icon\"\n          [attr.aria-label]=\"closeAriaLabel\"\n          [attr.tabindex]=\"closeTabindex\"\n          (click)=\"close($event)\"\n        >\n          <span class=\"material-symbols-outlined hc-modal-header-close\">\n            {{ closeIcon }}\n          </span>\n        </button>\n      </div>\n    </div>\n    <div class=\"hc-modal-content\">\n      <ng-content></ng-content>\n    </div>\n    <div class=\"hc-modal-footer\" *ngIf=\"footerTemplate\">\n      <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "string | HTMLElement",
                    "decorators": []
                },
                {
                    "name": "autoZIndex",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "baseZIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "closable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closeAriaLabel",
                    "defaultValue": "'close'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "closeIcon",
                    "defaultValue": "'x'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "closeTabindex",
                    "defaultValue": "'-1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dismissableMask",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "focusOnShow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "modal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 109,
                    "type": "IStyle",
                    "decorators": []
                },
                {
                    "name": "transitionOptions",
                    "defaultValue": "'150ms cubic-bezier(0, 0, 0.2, 1)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 110,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 118,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "EventEmitter"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 114,
                    "type": "EventEmitter"
                },
                {
                    "name": "visibleChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 112,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HcConfig",
                    "optional": false,
                    "description": "",
                    "line": 130,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "container",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLDivElement | null",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "footerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "maskVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 116,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TemplateDirective"
                        }
                    ]
                },
                {
                    "name": "transformOptions",
                    "defaultValue": "'scale(0.7)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "wrapper",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "zone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 130,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "appendContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "moveOnTop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAnimationEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAnimationStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onContainerDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  NgZone,\n  Output,\n  QueryList,\n  TemplateRef,\n} from '@angular/core'\nimport {\n  AnimationEvent,\n  animate,\n  animation,\n  style,\n  transition,\n  trigger,\n  useAnimation,\n} from '@angular/animations'\n\nimport { DomHandler } from '../../common/dom-handler/dom-handler'\nimport { HcConfig } from '../../common/hc-config/hc-config.service'\nimport { IStyle } from './../../common/models/style.model'\nimport { TemplateDirective } from 'src/app/directives/template/template.directive'\nimport { ZIndexUtils } from 'src/app/common/z-index-utils/z-index-utils'\n\nconst showAnimation = animation([\n  style({ transform: '{{transform}}', opacity: 0 }),\n  animate('{{transition}}'),\n])\n\nconst hideAnimation = animation([\n  animate('{{transition}}', style({ transform: '{{transform}}', opacity: 0 })),\n])\n\n@Component({\n  selector: 'hc-modal',\n  template: `\n    <div *ngIf=\"maskVisible\" [ngClass]=\"classes\">\n      <div\n        *ngIf=\"visible\"\n        [attr.aria-labelledby]=\"id + '-label'\"\n        [ngClass]=\"containerClasses\"\n        [ngStyle]=\"style\"\n        [@animation]=\"{\n          value: 'visible',\n          params: { transform: transformOptions, transition: transitionOptions }\n        }\"\n        (@animation.start)=\"onAnimationStart($event)\"\n        (@animation.done)=\"onAnimationEnd($event)\"\n        role=\"modal\"\n      >\n        <div class=\"hc-modal-header\">\n          <span [attr.id]=\"id + '-label'\" class=\"hc-modal-title\">{{ header }}</span>\n          <div class=\"hc-modal-header-icons\">\n            <button\n              *ngIf=\"closable\"\n              type=\"button\"\n              class=\"hc-modal-header-icon\"\n              [attr.aria-label]=\"closeAriaLabel\"\n              [attr.tabindex]=\"closeTabindex\"\n              (click)=\"close($event)\"\n            >\n              <span class=\"material-symbols-outlined hc-modal-header-close\">\n                {{ closeIcon }}\n              </span>\n            </button>\n          </div>\n        </div>\n        <div class=\"hc-modal-content\">\n          <ng-content></ng-content>\n        </div>\n        <div class=\"hc-modal-footer\" *ngIf=\"footerTemplate\">\n          <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n        </div>\n      </div>\n    </div>\n  `,\n  animations: [\n    trigger('animation', [\n      transition('void => visible', [useAnimation(showAnimation)]),\n      transition('visible => void', [useAnimation(hideAnimation)]),\n    ]),\n  ],\n  styleUrls: ['modal.component.scss'],\n})\nexport class ModalComponent implements AfterContentInit {\n  _visible = false\n\n  container: HTMLDivElement | null = null\n  maskVisible = false\n  transformOptions = 'scale(0.7)'\n  wrapper: HTMLElement | null = null\n  footerTemplate!: TemplateRef<TemplateDirective>\n\n  @Input() appendTo?: string | HTMLElement\n  @Input() autoZIndex = true\n  @Input() baseZIndex = 0\n  @Input() closable = true\n  @Input() closeAriaLabel = 'close'\n  @Input() closeIcon = 'x'\n  @Input() closeTabindex = '-1'\n  @Input() dismissableMask = false\n  @Input() focusOnShow = true\n  @Input() id?: string\n  @Input() header?: string\n  @Input() modal = false\n  @Input() style?: IStyle\n  @Input() transitionOptions = '150ms cubic-bezier(0, 0, 0.2, 1)'\n\n  @Output() visibleChange = new EventEmitter<boolean>()\n  @Output() onHide = new EventEmitter()\n  @Output() onShow = new EventEmitter()\n\n  @ContentChildren(TemplateDirective) templates!: QueryList<TemplateDirective>\n\n  @Input() get visible(): boolean {\n    return this._visible\n  }\n\n  set visible(value: boolean) {\n    this._visible = value\n\n    if (this._visible && !this.maskVisible) {\n      this.maskVisible = true\n    }\n  }\n\n  constructor(public config: HcConfig, public zone: NgZone) {}\n\n  ngAfterContentInit(): void {\n    this.templates.forEach((item) => {\n      switch (item.getType()) {\n        case 'footer':\n          this.footerTemplate = item.template\n          break\n      }\n    })\n  }\n\n  close(event: Event): void {\n    this.visibleChange.emit(false)\n    event.preventDefault()\n  }\n\n  moveOnTop(): void {\n    if (this.autoZIndex && this.container && this.wrapper) {\n      ZIndexUtils.set('modal', this.container, this.baseZIndex + this.config.zIndex.modal)\n      this.wrapper.style.zIndex = String(parseInt(this.container.style.zIndex, 10) - 1)\n    }\n  }\n\n  appendContainer(): void {\n    if (this.appendTo && this.wrapper) {\n      if (this.appendTo === 'body') {\n        document.body.appendChild(this.wrapper)\n      } else {\n        DomHandler.appendChild(this.wrapper, this.appendTo as HTMLElement)\n      }\n    }\n  }\n\n  focus(): void {\n    if (this.container) {\n      const focusable = DomHandler.findSingleElement(this.container, '[autofocus]')\n      if (focusable) {\n        this.zone.runOutsideAngular(() => {\n          setTimeout(() => focusable.focus(), 5)\n        })\n      }\n    }\n  }\n\n  onContainerDestroy(): void {\n    this.maskVisible = false\n\n    if (this.container && this.autoZIndex) {\n      ZIndexUtils.clear(this.container)\n    }\n\n    this.container = null\n    this.wrapper = null\n  }\n\n  onAnimationStart(event: AnimationEvent): void {\n    switch (event.toState) {\n      case 'visible':\n        this.container = event.element\n        if (this.container && this.container.parentElement) {\n          this.wrapper = this.container.parentElement\n          this.appendContainer()\n\n          if (this.id) {\n            this.container.setAttribute(this.id, '')\n          }\n        }\n\n        this.moveOnTop()\n\n        if (this.focusOnShow) {\n          this.focus()\n        }\n\n        break\n      case 'void':\n        if (this.wrapper && this.modal) {\n          DomHandler.addClass(this.wrapper, 'hc-modal-overlay-leave')\n        }\n        break\n    }\n  }\n\n  onAnimationEnd(event: AnimationEvent): void {\n    switch (event.toState) {\n      case 'void':\n        this.onContainerDestroy()\n        this.onHide.emit()\n        break\n      case 'visible':\n        this.onShow.emit()\n        break\n    }\n  }\n\n  get classes() {\n    return {\n      ['hc-modal-mask']: true,\n      ['hc-modal-overlay hc-modal-overlay-enter']: this.modal,\n    }\n  }\n\n  get containerClasses() {\n    return {\n      ['hc-modal']: true,\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-modal-mask {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.hc-modal-overlay {\n  background-color: rgba(0, 0, 0, 0.4);\n  transition-duration: 0.2s;\n}\n\n.hc-modal {\n  display: flex;\n  flex-direction: column;\n  pointer-events: auto;\n  max-height: 90%;\n  transform: scale(1);\n  position: relative;\n  border-radius: 1rem;\n  box-shadow: 0 1px 3px rgb(0 0 0 / 30%);\n  border: 0 none;\n}\n\n.hc-modal-header {\n  border-bottom: 1px solid var(--neutral-divider);\n  background-color: var(--neutral-white);\n  color: var(--neutral-black);\n  padding: 1.5rem;\n  border-top-left-radius: 1rem;\n  border-top-right-radius: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-shrink: 0;\n\n  .hc-modal-header-icon {\n    width: 2rem;\n    height: 2rem;\n    color: var(--primary-black);\n    border: 0 none;\n    background-color: transparent;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n  }\n\n  .hc-modal-header-close {\n    font-size: 1rem;\n    cursor: pointer;\n  }\n\n  .hc-modal-title {\n    font-weight: bold;\n    font-size: 20px;\n    line-height: 26px;\n    letter-spacing: 0.2px;\n  }\n}\n\n.hc-modal-content {\n  background: var(--neutral-white);\n  color: var(--neutral-black);\n  padding: 1.5rem 1.5rem 1rem 1.5rem;\n  overflow-y: auto;\n  flex-grow: 1;\n}\n\n.hc-modal-footer {\n  border-top: 0 none;\n  display: flex;\n  justify-content: flex-end;\n  background: var(--neutral-white);\n  color: var(--neutral-black);\n  padding: 0 1.5rem 1.5rem 1.5rem;\n  border-bottom-left-radius: 0.5rem;\n  border-bottom-right-radius: 0.5rem;\n}\n\n.hc-modal-overlay-leave {\n  animation: hc-modal-overlay-leave-animation 150ms forwards;\n}\n\n@keyframes hc-modal-overlay-leave-animation {\n  from {\n    background-color: var(--maskbg);\n  }\n  to {\n    background-color: transpaten;\n  }\n}\n",
                    "styleUrl": "modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "HcConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 128,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "HcConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterContentInit"
            ],
            "accessors": {
                "visible": {
                    "name": "visible",
                    "setSignature": {
                        "name": "visible",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 122,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "visible",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 118
                    }
                },
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 226
                    }
                },
                "containerClasses": {
                    "name": "containerClasses",
                    "getSignature": {
                        "name": "containerClasses",
                        "type": "",
                        "returnType": "",
                        "line": 233
                    }
                }
            }
        },
        {
            "name": "MswComponent",
            "id": "component-MswComponent-e116be4e3e661e4d40678c5e041a278b891d6f942e03f1c5ad5796cdddf5b46c49f0b88a953e819ec326ef965c4dc7159be44a627fc51662904366de5972d889",
            "file": "src/app/components/msw/msw.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-msw",
            "styleUrls": [],
            "styles": [
                "\n      .wrapper-msw {\n        display: flex;\n        align-items: center;\n        width: 400px;\n\n        div {\n          margin: 4px;\n        }\n      }\n\n      button {\n        border: none;\n        color: var(--neutral-white);\n        padding: 4px;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n      }\n\n      .start {\n        background-color: var(--green-default);\n      }\n\n      .stop {\n        background-color: var(--red-default);\n      }\n    "
            ],
            "template": "<div class=\"wrapper-msw\">\n  <div>\n    <svg\n      viewBox=\"0 0 122 122\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n      height=\"40\"\n      width=\"40\"\n    >\n      <title>msw-logo</title>\n      <g id=\"msw-logo\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n        <g id=\"Group\" transform=\"translate(-44.297427, -47.574576)\" stroke-width=\"21\">\n          <g\n            transform=\"translate(107.297427, 108.074576) rotate(-42.000000) translate(-107.297427, -108.074576) translate(36.297427, 26.574576)\"\n          >\n            <path\n              d=\"M75.1396666,46.668325 C78.6024919,46.668325 81.7374919,48.0719124 84.0067856,50.341206 C86.2760793,52.6104997 87.6796666,55.7454997 87.6796666,59.208325 C87.6796666,62.3036716 86.534852,65.2896505 84.4655356,67.5916279 L84.4655356,67.5916279 L48.2320648,107.898963 C47.5120934,108.699884 46.5356444,109.133155 45.5389581,109.186204 C44.5422718,109.239252 43.5253482,108.912077 42.7244276,108.192106 L42.7244276,108.192106 L6.19781435,67.5916279 C3.88282918,65.0163603 2.8308369,61.7465599 3.00140781,58.5418302 C3.17197873,55.3371004 4.56511284,52.1974412 7.14038046,49.882456 C9.44235787,47.8131396 12.4283368,46.668325 15.5236833,46.668325 L15.5236833,46.668325 Z\"\n              id=\"back\"\n              stroke=\"#7A1818\"\n              transform=\"translate(45.331675, 81.500000) rotate(90.000000) translate(-45.331675, -81.500000) \"\n            ></path>\n            <path\n              d=\"M145.86082,46.668325 C146.937775,46.668325 147.912775,47.1048474 148.618536,47.8106086 C149.324297,48.5163698 149.76082,49.4913698 149.76082,50.568325 C149.76082,51.5309926 149.404777,52.4596464 148.76121,53.1755724 L148.76121,53.1755724 L99.5687149,107.898963 C98.8487435,108.699884 97.8722944,109.133155 96.8756081,109.186204 C95.8789218,109.239252 94.8619983,108.912077 94.0610777,108.192106 L94.0610777,108.192106 L44.5754404,53.1755724 C43.8554689,52.3746518 43.5282943,51.3577282 43.5813427,50.3610419 C43.634391,49.3643556 44.0676624,48.3879066 44.868583,47.6679352 C45.584509,47.0243679 46.5131627,46.668325 47.4758303,46.668325 L47.4758303,46.668325 Z\"\n              id=\"front\"\n              stroke=\"#FF6A33\"\n              transform=\"translate(96.668325, 81.500000) rotate(-90.000000) translate(-96.668325, -81.500000) \"\n            ></path>\n          </g>\n        </g>\n      </g>\n    </svg>\n  </div>\n  <div>Mock Service Worker</div>\n  <div>\n    <button\n      (click)=\"toggleStartOrStopMockServiceWorker()\"\n      [ngClass]=\"{ 'start': !isStart, 'stop': isStart }\"\n      aria-label=\"msw\"\n    >\n      <span class=\"material-symbols-outlined\" style=\"font-size: 34px\">\n        {{ isStart ? 'stop_circle' : 'play_circle' }}\n      </span>\n    </button>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isStart",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setInitialState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startMoCkServiceWorker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startOrStopMockServiceWorker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stopMockServiceWorker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleStartOrStopMockServiceWorker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\nimport { MswService } from './msw.service'\nimport { worker } from 'src/mocks/browser'\n\n@Component({\n  selector: 'hc-msw',\n  template: `\n    <div class=\"wrapper-msw\">\n      <div>\n        <svg\n          viewBox=\"0 0 122 122\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          height=\"40\"\n          width=\"40\"\n        >\n          <title>msw-logo</title>\n          <g id=\"msw-logo\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <g id=\"Group\" transform=\"translate(-44.297427, -47.574576)\" stroke-width=\"21\">\n              <g\n                transform=\"translate(107.297427, 108.074576) rotate(-42.000000) translate(-107.297427, -108.074576) translate(36.297427, 26.574576)\"\n              >\n                <path\n                  d=\"M75.1396666,46.668325 C78.6024919,46.668325 81.7374919,48.0719124 84.0067856,50.341206 C86.2760793,52.6104997 87.6796666,55.7454997 87.6796666,59.208325 C87.6796666,62.3036716 86.534852,65.2896505 84.4655356,67.5916279 L84.4655356,67.5916279 L48.2320648,107.898963 C47.5120934,108.699884 46.5356444,109.133155 45.5389581,109.186204 C44.5422718,109.239252 43.5253482,108.912077 42.7244276,108.192106 L42.7244276,108.192106 L6.19781435,67.5916279 C3.88282918,65.0163603 2.8308369,61.7465599 3.00140781,58.5418302 C3.17197873,55.3371004 4.56511284,52.1974412 7.14038046,49.882456 C9.44235787,47.8131396 12.4283368,46.668325 15.5236833,46.668325 L15.5236833,46.668325 Z\"\n                  id=\"back\"\n                  stroke=\"#7A1818\"\n                  transform=\"translate(45.331675, 81.500000) rotate(90.000000) translate(-45.331675, -81.500000) \"\n                ></path>\n                <path\n                  d=\"M145.86082,46.668325 C146.937775,46.668325 147.912775,47.1048474 148.618536,47.8106086 C149.324297,48.5163698 149.76082,49.4913698 149.76082,50.568325 C149.76082,51.5309926 149.404777,52.4596464 148.76121,53.1755724 L148.76121,53.1755724 L99.5687149,107.898963 C98.8487435,108.699884 97.8722944,109.133155 96.8756081,109.186204 C95.8789218,109.239252 94.8619983,108.912077 94.0610777,108.192106 L94.0610777,108.192106 L44.5754404,53.1755724 C43.8554689,52.3746518 43.5282943,51.3577282 43.5813427,50.3610419 C43.634391,49.3643556 44.0676624,48.3879066 44.868583,47.6679352 C45.584509,47.0243679 46.5131627,46.668325 47.4758303,46.668325 L47.4758303,46.668325 Z\"\n                  id=\"front\"\n                  stroke=\"#FF6A33\"\n                  transform=\"translate(96.668325, 81.500000) rotate(-90.000000) translate(-96.668325, -81.500000) \"\n                ></path>\n              </g>\n            </g>\n          </g>\n        </svg>\n      </div>\n      <div>Mock Service Worker</div>\n      <div>\n        <button\n          (click)=\"toggleStartOrStopMockServiceWorker()\"\n          [ngClass]=\"{ 'start': !isStart, 'stop': isStart }\"\n          aria-label=\"msw\"\n        >\n          <span class=\"material-symbols-outlined\" style=\"font-size: 34px\">\n            {{ isStart ? 'stop_circle' : 'play_circle' }}\n          </span>\n        </button>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .wrapper-msw {\n        display: flex;\n        align-items: center;\n        width: 400px;\n\n        div {\n          margin: 4px;\n        }\n      }\n\n      button {\n        border: none;\n        color: var(--neutral-white);\n        padding: 4px;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n      }\n\n      .start {\n        background-color: var(--green-default);\n      }\n\n      .stop {\n        background-color: var(--red-default);\n      }\n    `,\n  ],\n})\nexport class MswComponent implements OnInit {\n  isStart = false\n\n  constructor(private mswService: MswService) {}\n\n  ngOnInit(): void {\n    this.setInitialState()\n    this.startOrStopMockServiceWorker()\n  }\n\n  setInitialState(): void {\n    this.isStart = this.mswService.getMockServiceWorkerLocalStorage()\n  }\n\n  toggleStartOrStopMockServiceWorker() {\n    this.isStart = !this.isStart\n    this.mswService.setMockServiceWorkerLocalStorage(this.isStart)\n    this.startOrStopMockServiceWorker()\n  }\n\n  startOrStopMockServiceWorker() {\n    if (this.isStart) {\n      this.startMoCkServiceWorker()\n    } else {\n      this.stopMockServiceWorker()\n    }\n  }\n\n  startMoCkServiceWorker() {\n    worker.start()\n  }\n\n  stopMockServiceWorker() {\n    worker.stop()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .wrapper-msw {\n        display: flex;\n        align-items: center;\n        width: 400px;\n\n        div {\n          margin: 4px;\n        }\n      }\n\n      button {\n        border: none;\n        color: var(--neutral-white);\n        padding: 4px;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n      }\n\n      .start {\n        background-color: var(--green-default);\n      }\n\n      .stop {\n        background-color: var(--red-default);\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mswService",
                        "type": "MswService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 89,
                "jsdoctags": [
                    {
                        "name": "mswService",
                        "type": "MswService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageBasicComponent",
            "id": "component-PageBasicComponent-b3a91408a0cd1708fe4ec33f91ded8353c2cfdbfb0e6a0880e7ae022da59e09e0123f0fb4c6186cfdbccfd4de832e88b8e9a38feb46ad1d126464411e7f9dead",
            "file": "src/app/modules/docs/table/page-basic/page-basic.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-basic",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"hc-docs-title\">\n  <h2>Table Basic</h2>\n  <p class=\"body1\">DataTable é uma coleção que exibe colunas com dados</p>\n</div>\n<div class=\"hc-docs-components\">\n  <hc-card *ngIf=\"products.length\">\n    <hc-table [value]=\"products\" [responsive]=\"true\">\n      <ng-template hcTemplate=\"header\">\n        <tr>\n          <th>Code</th>\n          <th>Name</th>\n          <th>Category</th>\n          <th>Quantity</th>\n        </tr>\n      </ng-template>\n      <ng-template hcTemplate=\"body\" let-product>\n        <tr>\n          <td>{{ product.code }}</td>\n          <td>{{ product.name }}</td>\n          <td>{{ product.category }}</td>\n          <td>{{ product.quantity }}</td>\n        </tr>\n      </ng-template>\n    </hc-table>\n  </hc-card>\n</div>\n<h4 class=\"hc-docs-documentaion\">Documentação</h4>\n<div class=\"hc-docs-section\">\n  <h5>Import:</h5>\n  <markdown src=\"/assets/docs/table/common/import.ts\"></markdown>\n</div>\n<div class=\"hc-docs-section\">\n  <h5>Codigo:</h5>\n  <markdown src=\"/assets/docs/table/basic/basic.html\"></markdown>\n  <markdown src=\"/assets/docs/table/basic/component.ts\"></markdown>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { IProduct, ProductsService } from '../../products.service'\n\n@Component({\n  selector: 'app-page-basic',\n  template: `\n    <div class=\"hc-docs-title\">\n      <h2>Table Basic</h2>\n      <p class=\"body1\">DataTable é uma coleção que exibe colunas com dados</p>\n    </div>\n    <div class=\"hc-docs-components\">\n      <hc-card *ngIf=\"products.length\">\n        <hc-table [value]=\"products\" [responsive]=\"true\">\n          <ng-template hcTemplate=\"header\">\n            <tr>\n              <th>Code</th>\n              <th>Name</th>\n              <th>Category</th>\n              <th>Quantity</th>\n            </tr>\n          </ng-template>\n          <ng-template hcTemplate=\"body\" let-product>\n            <tr>\n              <td>{{ product.code }}</td>\n              <td>{{ product.name }}</td>\n              <td>{{ product.category }}</td>\n              <td>{{ product.quantity }}</td>\n            </tr>\n          </ng-template>\n        </hc-table>\n      </hc-card>\n    </div>\n    <h4 class=\"hc-docs-documentaion\">Documentação</h4>\n    <div class=\"hc-docs-section\">\n      <h5>Import:</h5>\n      <markdown src=\"/assets/docs/table/common/import.ts\"></markdown>\n    </div>\n    <div class=\"hc-docs-section\">\n      <h5>Codigo:</h5>\n      <markdown src=\"/assets/docs/table/basic/basic.html\"></markdown>\n      <markdown src=\"/assets/docs/table/basic/component.ts\"></markdown>\n    </div>\n  `,\n})\nexport class PageBasicComponent implements OnInit {\n  products: IProduct[] = []\n\n  constructor(private productsService: ProductsService) {}\n\n  ngOnInit(): void {\n    this.productsService.getProducts(1, 10).subscribe((response) => {\n      this.products = response.items\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageCheckboxComponent",
            "id": "component-PageCheckboxComponent-2e77cd239380e86d03d7fd7caa942f54854837466685825e397d4070dd674955ca21cdd6953055877b29631ebb2f6274d19198c653c21357a00cb80a5ce610ba",
            "file": "src/app/modules/docs/form/page-checkbox/page-checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-checkbox",
            "styleUrls": [],
            "styles": [
                "\n      .wrapper-checkbox {\n        margin: 0.5rem 0;\n      }\n    "
            ],
            "template": "<hc-card>\n  <div class=\"wrapper-checkbox\">\n    <hc-checkbox\n      label=\"New York\"\n      name=\"group1\"\n      value=\"New York\"\n      [(ngModel)]=\"selectedCities\"\n      id=\"ny\"\n    >\n    </hc-checkbox>\n  </div>\n  <div class=\"wrapper-checkbox\">\n    <hc-checkbox\n      label=\"San Francisco\"\n      name=\"group1\"\n      value=\"San Francisco\"\n      [(ngModel)]=\"selectedCities\"\n      id=\"sf\"\n    >\n    </hc-checkbox>\n  </div>\n  <div class=\"wrapper-checkbox\">\n    <hc-checkbox\n      label=\"Los Angeles\"\n      name=\"group1\"\n      value=\"Los Angeles\"\n      [(ngModel)]=\"selectedCities\"\n      id=\"la\"\n    >\n    </hc-checkbox>\n  </div>\n  <div class=\"wrapper-checkbox\">\n    <hc-checkbox\n      label=\"Chicago\"\n      name=\"group1\"\n      value=\"Chicago\"\n      [(ngModel)]=\"selectedCities\"\n      [disabled]=\"true\"\n      id=\"ch\"\n    >\n    </hc-checkbox>\n  </div>\n  <div class=\"wrapper-checkbox\">\n    <hc-checkbox\n      label=\"Terms\"\n      [binary]=\"true\"\n      [(ngModel)]=\"terms\"\n      id=\"terms\"\n    ></hc-checkbox>\n  </div>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedCities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "terms",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({\n  selector: 'app-page-checkbox',\n  template: `\n    <hc-card>\n      <div class=\"wrapper-checkbox\">\n        <hc-checkbox\n          label=\"New York\"\n          name=\"group1\"\n          value=\"New York\"\n          [(ngModel)]=\"selectedCities\"\n          id=\"ny\"\n        >\n        </hc-checkbox>\n      </div>\n      <div class=\"wrapper-checkbox\">\n        <hc-checkbox\n          label=\"San Francisco\"\n          name=\"group1\"\n          value=\"San Francisco\"\n          [(ngModel)]=\"selectedCities\"\n          id=\"sf\"\n        >\n        </hc-checkbox>\n      </div>\n      <div class=\"wrapper-checkbox\">\n        <hc-checkbox\n          label=\"Los Angeles\"\n          name=\"group1\"\n          value=\"Los Angeles\"\n          [(ngModel)]=\"selectedCities\"\n          id=\"la\"\n        >\n        </hc-checkbox>\n      </div>\n      <div class=\"wrapper-checkbox\">\n        <hc-checkbox\n          label=\"Chicago\"\n          name=\"group1\"\n          value=\"Chicago\"\n          [(ngModel)]=\"selectedCities\"\n          [disabled]=\"true\"\n          id=\"ch\"\n        >\n        </hc-checkbox>\n      </div>\n      <div class=\"wrapper-checkbox\">\n        <hc-checkbox\n          label=\"Terms\"\n          [binary]=\"true\"\n          [(ngModel)]=\"terms\"\n          id=\"terms\"\n        ></hc-checkbox>\n      </div>\n    </hc-card>\n  `,\n  styles: [\n    `\n      .wrapper-checkbox {\n        margin: 0.5rem 0;\n      }\n    `,\n  ],\n})\nexport class PageCheckboxComponent {\n  selectedCities: string[] = []\n  terms = false\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .wrapper-checkbox {\n        margin: 0.5rem 0;\n      }\n    \n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-ccda29fcda04f1cc95358c67d12911044bf664654195a59c04a0ebc174bf19150136ae6b571fc30a9980b59834a47c9542248b1b31692a9bee9a698fe2eada8b",
            "file": "src/app/modules/docs/table/page/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "BaseTableService"
                }
            ],
            "selector": "app-page",
            "styleUrls": [],
            "styles": [],
            "template": "<hc-card *ngIf=\"products && pagination\">\n  <hc-table\n    hcData\n    hcPagination\n    [value]=\"products\"\n    [responsive]=\"true\"\n    [paginator]=\"true\"\n    [pagination]=\"pagination\"\n    (pageEvent)=\"baseTableService.changePage($event)\"\n    [showCurrentPageReport]=\"true\"\n    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"\n  >\n    <ng-template hcTemplate=\"header\">\n      <tr>\n        <th>id</th>\n        <th>Code</th>\n        <th>Name</th>\n        <th>Description</th>\n        <th>Price</th>\n        <th>Category</th>\n        <th>Quantity</th>\n        <th>Inventory Status</th>\n        <th>Rating</th>\n      </tr>\n    </ng-template>\n    <ng-template hcTemplate=\"body\" let-product>\n      <tr>\n        <td>{{ product.id }}</td>\n        <td>{{ product.code }}</td>\n        <td>{{ product.name }}</td>\n        <td>{{ product.description }}</td>\n        <td>{{ product.price | currency: 'USD' }}</td>\n        <td>{{ product.category }}</td>\n        <td>{{ product.quantity }}</td>\n        <td>{{ product.inventoryStatus }}</td>\n        <td>{{ product.rating }}</td>\n      </tr>\n    </ng-template>\n  </hc-table>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "baseTableService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseTableService",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeta",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { IProduct, ProductsService } from '../../products.service'\n\nimport { ActivatedRoute } from '@angular/router'\nimport { BaseTableService } from 'src/app/common/base-table/base-table.service'\nimport { IMeta } from 'src/app/models/pagination.model'\n\n@Component({\n  selector: 'app-page',\n  template: `\n    <hc-card *ngIf=\"products && pagination\">\n      <hc-table\n        hcData\n        hcPagination\n        [value]=\"products\"\n        [responsive]=\"true\"\n        [paginator]=\"true\"\n        [pagination]=\"pagination\"\n        (pageEvent)=\"baseTableService.changePage($event)\"\n        [showCurrentPageReport]=\"true\"\n        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"\n      >\n        <ng-template hcTemplate=\"header\">\n          <tr>\n            <th>id</th>\n            <th>Code</th>\n            <th>Name</th>\n            <th>Description</th>\n            <th>Price</th>\n            <th>Category</th>\n            <th>Quantity</th>\n            <th>Inventory Status</th>\n            <th>Rating</th>\n          </tr>\n        </ng-template>\n        <ng-template hcTemplate=\"body\" let-product>\n          <tr>\n            <td>{{ product.id }}</td>\n            <td>{{ product.code }}</td>\n            <td>{{ product.name }}</td>\n            <td>{{ product.description }}</td>\n            <td>{{ product.price | currency: 'USD' }}</td>\n            <td>{{ product.category }}</td>\n            <td>{{ product.quantity }}</td>\n            <td>{{ product.inventoryStatus }}</td>\n            <td>{{ product.rating }}</td>\n          </tr>\n        </ng-template>\n      </hc-table>\n    </hc-card>\n  `,\n  providers: [BaseTableService],\n})\nexport class PageComponent implements OnInit {\n  products: IProduct[] = []\n  pagination!: IMeta\n\n  constructor(\n    private productsService: ProductsService,\n    public baseTableService: BaseTableService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(() => {\n      this.getProducts()\n    })\n  }\n\n  getProducts(): void {\n    this.productsService\n      .getProducts(\n        this.baseTableService.page,\n        this.baseTableService.limit,\n        this.baseTableService.sortColumn,\n        this.baseTableService.sortDirection\n      )\n      .subscribe((response) => {\n        this.products = response.items\n        this.pagination = response.meta\n      })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "baseTableService",
                        "type": "BaseTableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseTableService",
                        "type": "BaseTableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageDynamicComponent",
            "id": "component-PageDynamicComponent-e8e05f16d74d269386f015a55814e779e574d66c03068ea6decfcd7bfcfa8b74366f15bb937f177ff6ec8481da91167131be675f388103e38d9ac4933a6c3b5b",
            "file": "src/app/modules/docs/table/page-dynamic/page-dynamic.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-dynamic",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"hc-docs-title\">\n  <h2>Table Dynamic Columns</h2>\n  <p class=\"body1\">\n    Colunas podem ser defenida dinamicamente usando a diretiva *ngFor\n  </p>\n</div>\n<div class=\"hc-docs-components\">\n  <hc-card>\n    <hc-table [columns]=\"cols\" [value]=\"products\" [responsive]=\"true\">\n      <ng-template hcTemplate=\"header\" let-columns>\n        <tr>\n          <th *ngFor=\"let column of columns\">\n            {{ column.header }}\n          </th>\n        </tr>\n      </ng-template>\n      <ng-template hcTemplate=\"body\" let-rowData let-columns=\"columns\">\n        <tr>\n          <td *ngFor=\"let col of columns\">\n            {{ rowData[col.field] }}\n          </td>\n        </tr>\n      </ng-template>\n    </hc-table>\n  </hc-card>\n</div>\n<h4 class=\"hc-docs-documentation\">Documentação</h4>\n<div class=\"hc-docs-section\">\n  <h5>Import:</h5>\n  <markdown src=\"/assets/docs/table/common/import.ts\"></markdown>\n</div>\n<div class=\"hc-docs-section\">\n  <h5>Codigo:</h5>\n  <markdown src=\"/assets/docs/table/dynamic/dynamic.html\"></markdown>\n  <markdown src=\"/assets/docs/table/dynamic/component.ts\"></markdown>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cols",
                    "defaultValue": "[\n    { header: 'Code', field: 'code' },\n    { header: 'Name', field: 'name' },\n    { header: 'Category', field: 'category' },\n    { header: 'Quantity', field: 'quantity' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { IProduct, ProductsService } from '../../products.service'\n\nimport { IColumn } from 'src/app/components/table/table.component'\n\n@Component({\n  selector: 'app-page-dynamic',\n  template: `\n    <div class=\"hc-docs-title\">\n      <h2>Table Dynamic Columns</h2>\n      <p class=\"body1\">\n        Colunas podem ser defenida dinamicamente usando a diretiva *ngFor\n      </p>\n    </div>\n    <div class=\"hc-docs-components\">\n      <hc-card>\n        <hc-table [columns]=\"cols\" [value]=\"products\" [responsive]=\"true\">\n          <ng-template hcTemplate=\"header\" let-columns>\n            <tr>\n              <th *ngFor=\"let column of columns\">\n                {{ column.header }}\n              </th>\n            </tr>\n          </ng-template>\n          <ng-template hcTemplate=\"body\" let-rowData let-columns=\"columns\">\n            <tr>\n              <td *ngFor=\"let col of columns\">\n                {{ rowData[col.field] }}\n              </td>\n            </tr>\n          </ng-template>\n        </hc-table>\n      </hc-card>\n    </div>\n    <h4 class=\"hc-docs-documentation\">Documentação</h4>\n    <div class=\"hc-docs-section\">\n      <h5>Import:</h5>\n      <markdown src=\"/assets/docs/table/common/import.ts\"></markdown>\n    </div>\n    <div class=\"hc-docs-section\">\n      <h5>Codigo:</h5>\n      <markdown src=\"/assets/docs/table/dynamic/dynamic.html\"></markdown>\n      <markdown src=\"/assets/docs/table/dynamic/component.ts\"></markdown>\n    </div>\n  `,\n})\nexport class PageDynamicComponent implements OnInit {\n  products: IProduct[] = []\n  cols: IColumn[] = [\n    { header: 'Code', field: 'code' },\n    { header: 'Name', field: 'name' },\n    { header: 'Category', field: 'category' },\n    { header: 'Quantity', field: 'quantity' },\n  ]\n\n  constructor(private productsService: ProductsService) {}\n\n  ngOnInit(): void {\n    this.productsService\n      .getProducts(1, 10)\n      .subscribe((response) => (this.products = response.items))\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageGridlinesComponent",
            "id": "component-PageGridlinesComponent-03fbe20e33cd72aa2d4ad8f0ae49d3244a294e4f8da88971ff485040a72b5bec5d1374489a3a9aa3050fcacf7e5455ce939e6351c624d95fb8387b4823514bfc",
            "file": "src/app/modules/docs/table/page-gridlines/page-gridlines.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-gridlines",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"hc-docs-title\">\n  <h2>Table Gridlines</h2>\n  <p class=\"body1\">\n    adicionando a propriedade <strong>gridlines</strong> exibir bordas entre as\n    celulas\n  </p>\n</div>\n<div class=\"hc-docs-components\">\n  <hc-card>\n    <hc-table hcData [value]=\"products\" [responsive]=\"true\" [gridlines]=\"true\">\n      <ng-template hcTemplate=\"caption\"> Header </ng-template>\n      <ng-template hcTemplate=\"header\">\n        <tr>\n          <th>Code</th>\n          <th>Name</th>\n          <th>Category</th>\n          <th>Quantity</th>\n        </tr>\n      </ng-template>\n      <ng-template hcTemplate=\"body\" let-product>\n        <tr>\n          <td>{{ product.code }}</td>\n          <td>{{ product.name }}</td>\n          <td>{{ product.category }}</td>\n          <td>{{ product.quantity }}</td>\n        </tr>\n      </ng-template>\n      <ng-template hcTemplate=\"summary\"> Footer </ng-template>\n    </hc-table>\n  </hc-card>\n</div>\n<h4 class=\"hc-docs-documentation\">Documentação</h4>\n<div class=\"hc-docs-section\">\n  <h5>Import:</h5>\n  <markdown src=\"/assets/docs/table/common/import.ts\"></markdown>\n</div>\n<div class=\"hc-docs-section\">\n  <h5>Codigo:</h5>\n  <markdown src=\"/assets/docs/table/gridlines/gridlines.html\"></markdown>\n  <markdown src=\"/assets/docs/table/gridlines/component.ts\"></markdown>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { IProduct, ProductsService } from '../../products.service'\n\n@Component({\n  selector: 'app-page-gridlines',\n  template: `\n    <div class=\"hc-docs-title\">\n      <h2>Table Gridlines</h2>\n      <p class=\"body1\">\n        adicionando a propriedade <strong>gridlines</strong> exibir bordas entre as\n        celulas\n      </p>\n    </div>\n    <div class=\"hc-docs-components\">\n      <hc-card>\n        <hc-table hcData [value]=\"products\" [responsive]=\"true\" [gridlines]=\"true\">\n          <ng-template hcTemplate=\"caption\"> Header </ng-template>\n          <ng-template hcTemplate=\"header\">\n            <tr>\n              <th>Code</th>\n              <th>Name</th>\n              <th>Category</th>\n              <th>Quantity</th>\n            </tr>\n          </ng-template>\n          <ng-template hcTemplate=\"body\" let-product>\n            <tr>\n              <td>{{ product.code }}</td>\n              <td>{{ product.name }}</td>\n              <td>{{ product.category }}</td>\n              <td>{{ product.quantity }}</td>\n            </tr>\n          </ng-template>\n          <ng-template hcTemplate=\"summary\"> Footer </ng-template>\n        </hc-table>\n      </hc-card>\n    </div>\n    <h4 class=\"hc-docs-documentation\">Documentação</h4>\n    <div class=\"hc-docs-section\">\n      <h5>Import:</h5>\n      <markdown src=\"/assets/docs/table/common/import.ts\"></markdown>\n    </div>\n    <div class=\"hc-docs-section\">\n      <h5>Codigo:</h5>\n      <markdown src=\"/assets/docs/table/gridlines/gridlines.html\"></markdown>\n      <markdown src=\"/assets/docs/table/gridlines/component.ts\"></markdown>\n    </div>\n  `,\n})\nexport class PageGridlinesComponent implements OnInit {\n  products: IProduct[] = []\n\n  constructor(private productsService: ProductsService) {}\n\n  ngOnInit(): void {\n    this.productsService\n      .getProducts(1, 10)\n      .subscribe((response) => (this.products = response.items))\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageInputTextComponent",
            "id": "component-PageInputTextComponent-e9b846a47f3f5c9b02840282396363156cf32fe34488f1c2163f1c534e5c998eecf907295d47fa62d92f6cdbb99dea576a2eb991bcc579d70de793ae1f063b49",
            "file": "src/app/modules/docs/form/page-input-text/page-input-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-input-text",
            "styleUrls": [],
            "styles": [
                "\n      .input-width {\n        width: 300px;\n\n        h4 {\n          margin-bottom: 0.5rem;\n          font-size: 1.2rem;\n        }\n      }\n    "
            ],
            "template": "<div style=\"margin-bottom: 1rem\">\n  <h2>Input</h2>\n  <p class=\"body1\">Input renders a text field to enter data</p>\n</div>\n<hc-card>\n  <form [formGroup]=\"form\" (submit)=\"onSubmit(form)\">\n    <div class=\"input-width\">\n      <h4>Basic</h4>\n      <hc-input formControlName=\"basic\"></hc-input>\n    </div>\n\n    <div class=\"input-width\">\n      <h4>Right Icon</h4>\n      <hc-input formControlName=\"rightIcon\" appendIcon=\"visibility\"></hc-input>\n    </div>\n\n    <div class=\"input-width\">\n      <h4>Placeholder</h4>\n      <hc-input formControlName=\"placeholder\" placeholder=\"Placeholder\"></hc-input>\n    </div>\n\n    <div class=\"input-width\">\n      <h4>Invalid</h4>\n      <hc-input formControlName=\"username\"></hc-input>\n    </div>\n\n    <div class=\"input-width\">\n      <h4>Disabled</h4>\n      <hc-input formControlName=\"disabled\"></hc-input>\n    </div>\n  </form>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    basic: [''],\n    rightIcon: [''],\n    placeholder: [''],\n    username: ['', [Validators.required]],\n    disabled: [{ value: '', disabled: true }],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'\n\n@Component({\n  selector: 'app-page-input-text',\n  template: `\n    <div style=\"margin-bottom: 1rem\">\n      <h2>Input</h2>\n      <p class=\"body1\">Input renders a text field to enter data</p>\n    </div>\n    <hc-card>\n      <form [formGroup]=\"form\" (submit)=\"onSubmit(form)\">\n        <div class=\"input-width\">\n          <h4>Basic</h4>\n          <hc-input formControlName=\"basic\"></hc-input>\n        </div>\n\n        <div class=\"input-width\">\n          <h4>Right Icon</h4>\n          <hc-input formControlName=\"rightIcon\" appendIcon=\"visibility\"></hc-input>\n        </div>\n\n        <div class=\"input-width\">\n          <h4>Placeholder</h4>\n          <hc-input formControlName=\"placeholder\" placeholder=\"Placeholder\"></hc-input>\n        </div>\n\n        <div class=\"input-width\">\n          <h4>Invalid</h4>\n          <hc-input formControlName=\"username\"></hc-input>\n        </div>\n\n        <div class=\"input-width\">\n          <h4>Disabled</h4>\n          <hc-input formControlName=\"disabled\"></hc-input>\n        </div>\n      </form>\n    </hc-card>\n  `,\n  styles: [\n    `\n      .input-width {\n        width: 300px;\n\n        h4 {\n          margin-bottom: 0.5rem;\n          font-size: 1.2rem;\n        }\n      }\n    `,\n  ],\n})\nexport class PageInputTextComponent implements OnInit {\n  form: FormGroup = this.fb.group({\n    basic: [''],\n    rightIcon: [''],\n    placeholder: [''],\n    username: ['', [Validators.required]],\n    disabled: [{ value: '', disabled: true }],\n  })\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form.controls['username'].markAsTouched()\n  }\n\n  onSubmit({ value }: FormGroup) {\n    console.log(value)\n  }\n\n  onClear() {\n    this.form.reset()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .input-width {\n        width: 300px;\n\n        h4 {\n          margin-bottom: 0.5rem;\n          font-size: 1.2rem;\n        }\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageLimitComponent",
            "id": "component-PageLimitComponent-8e80f3bb2f639443f0b7b924896b476a31e1a1f5c31e83760937f396a438954f68540912346456ceb9be4478032d3670545198f6a4d482778ad21682398e4eff",
            "file": "src/app/modules/docs/table/page-limit/page-limit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "BaseTableService"
                }
            ],
            "selector": "app-page-limit",
            "styleUrls": [],
            "styles": [],
            "template": "<hc-card>\n  <hc-table\n    hcData\n    hcPagination\n    dataKey=\"code\"\n    [responsive]=\"true\"\n    [value]=\"products\"\n    [paginator]=\"true\"\n    [pagination]=\"pagination\"\n    (pageEvent)=\"baseTableService.changePage($event)\"\n    (onLimitChange)=\"baseTableService.changeLimit($event)\"\n    limitLabel=\"Resultador por página\"\n  >\n    <ng-template hcTemplate=\"header\">\n      <tr>\n        <th>id</th>\n        <th>Code</th>\n        <th>Name</th>\n        <th>Description</th>\n        <th>Price</th>\n        <th>Category</th>\n        <th>Quantity</th>\n        <th>Inventory Status</th>\n        <th>Rating</th>\n      </tr>\n    </ng-template>\n    <ng-template hcTemplate=\"body\" let-product>\n      <tr>\n        <td>{{ product.id }}</td>\n        <td>{{ product.code }}</td>\n        <td>{{ product.name }}</td>\n        <td>{{ product.description }}</td>\n        <td>{{ product.price | currency: 'USD' }}</td>\n        <td>{{ product.category }}</td>\n        <td>{{ product.quantity }}</td>\n        <td>{{ product.inventoryStatus }}</td>\n        <td>{{ product.rating }}</td>\n      </tr>\n    </ng-template>\n  </hc-table>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "baseTableService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseTableService",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeta",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "methodsClass": [
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { IProduct, ProductsService } from './../../products.service'\n\nimport { ActivatedRoute } from '@angular/router'\nimport { BaseTableService } from './../../../../common/base-table/base-table.service'\nimport { IMeta } from '../../../../models/pagination.model'\n\n@Component({\n  selector: 'app-page-limit',\n  template: `\n    <hc-card>\n      <hc-table\n        hcData\n        hcPagination\n        dataKey=\"code\"\n        [responsive]=\"true\"\n        [value]=\"products\"\n        [paginator]=\"true\"\n        [pagination]=\"pagination\"\n        (pageEvent)=\"baseTableService.changePage($event)\"\n        (onLimitChange)=\"baseTableService.changeLimit($event)\"\n        limitLabel=\"Resultador por página\"\n      >\n        <ng-template hcTemplate=\"header\">\n          <tr>\n            <th>id</th>\n            <th>Code</th>\n            <th>Name</th>\n            <th>Description</th>\n            <th>Price</th>\n            <th>Category</th>\n            <th>Quantity</th>\n            <th>Inventory Status</th>\n            <th>Rating</th>\n          </tr>\n        </ng-template>\n        <ng-template hcTemplate=\"body\" let-product>\n          <tr>\n            <td>{{ product.id }}</td>\n            <td>{{ product.code }}</td>\n            <td>{{ product.name }}</td>\n            <td>{{ product.description }}</td>\n            <td>{{ product.price | currency: 'USD' }}</td>\n            <td>{{ product.category }}</td>\n            <td>{{ product.quantity }}</td>\n            <td>{{ product.inventoryStatus }}</td>\n            <td>{{ product.rating }}</td>\n          </tr>\n        </ng-template>\n      </hc-table>\n    </hc-card>\n  `,\n  providers: [BaseTableService],\n})\nexport class PageLimitComponent implements OnInit {\n  products: IProduct[] = []\n  pagination!: IMeta\n\n  constructor(\n    private productsService: ProductsService,\n    private route: ActivatedRoute,\n    public baseTableService: BaseTableService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(() => {\n      this.getProducts()\n    })\n  }\n\n  getProducts(): void {\n    this.productsService\n      .getProducts(\n        this.baseTableService.page,\n        this.baseTableService.limit,\n        this.baseTableService.sortColumn,\n        this.baseTableService.sortDirection\n      )\n      .subscribe((response) => {\n        this.products = response.items\n        this.pagination = response.meta\n      })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "baseTableService",
                        "type": "BaseTableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseTableService",
                        "type": "BaseTableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageModalComponent",
            "id": "component-PageModalComponent-b47bd5d30ce430089fbab7254631995add9a5557284d06354baa5574bcf5a61c752b55dd99bddc62d9652a95975451d1950e2dced353511b68c4b3fbc61f97c5",
            "file": "src/app/modules/docs/overlay/page-modal/page-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-modal",
            "styleUrls": [],
            "styles": [],
            "template": "<hc-card>\n  <hc-modal\n    header=\"Title\"\n    [(visible)]=\"display\"\n    [modal]=\"true\"\n    [style]=\"{ width: '500px' }\"\n  >\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n    incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n    exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute\n    irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n    pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui\n    officia deserunt mollit anim id est laborum.\n    <ng-template hcTemplate=\"footer\">\n      <hc-button (click)=\"close()\" color=\"primary\">Ok</hc-button>\n    </ng-template>\n  </hc-modal>\n  <hc-button color=\"primary\" (onClick)=\"show()\">Show</hc-button>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "display",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({\n  selector: 'app-page-modal',\n  template: `\n    <hc-card>\n      <hc-modal\n        header=\"Title\"\n        [(visible)]=\"display\"\n        [modal]=\"true\"\n        [style]=\"{ width: '500px' }\"\n      >\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n        incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n        exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute\n        irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n        pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui\n        officia deserunt mollit anim id est laborum.\n        <ng-template hcTemplate=\"footer\">\n          <hc-button (click)=\"close()\" color=\"primary\">Ok</hc-button>\n        </ng-template>\n      </hc-modal>\n      <hc-button color=\"primary\" (onClick)=\"show()\">Show</hc-button>\n    </hc-card>\n  `,\n  styles: [],\n})\nexport class PageModalComponent {\n  display = true\n\n  show() {\n    this.display = true\n  }\n\n  close() {\n    this.display = false\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "PageNotFoundComponent",
            "id": "component-PageNotFoundComponent-a16c5fa83f99c90c3afb787fb4759a893a9df296d9ef7e995c2c2354fdff10a8f682c63c18e7dc94d112a5954419cc849b9ef382a7b3db6e53515cff71c2644f",
            "file": "src/app/modules/authentication/page-not-found/page-not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-not-found",
            "styleUrls": [
                "../scss/authentication.scss"
            ],
            "styles": [],
            "template": "<div class=\"container\">\n  <div class=\"wrapper-form wrapper-section-page-not-found\">\n    <h1 class=\"title\" style=\"margin-bottom: 16px\">404</h1>\n    <p class=\"body1 description\" style=\"margin-bottom: 48px\">\n      Oops. The page you were looking for doesn't exist.\n    </p>\n    <div>\n      <hc-button\n        routerLink=\"/\"\n        type=\"button\"\n        color=\"primary\"\n        ariaLabel=\"back to home\"\n      >\n        Back to home\n      </hc-button>\n    </div>\n  </div>\n  <div class=\"background-404\"></div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({\n  selector: 'app-page-not-found',\n  template: `\n    <div class=\"container\">\n      <div class=\"wrapper-form wrapper-section-page-not-found\">\n        <h1 class=\"title\" style=\"margin-bottom: 16px\">404</h1>\n        <p class=\"body1 description\" style=\"margin-bottom: 48px\">\n          Oops. The page you were looking for doesn't exist.\n        </p>\n        <div>\n          <hc-button\n            routerLink=\"/\"\n            type=\"button\"\n            color=\"primary\"\n            ariaLabel=\"back to home\"\n          >\n            Back to home\n          </hc-button>\n        </div>\n      </div>\n      <div class=\"background-404\"></div>\n    </div>\n  `,\n  styleUrls: ['../scss/authentication.scss'],\n})\nexport class PageNotFoundComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: grid;\n  grid-template-columns: 1.5fr 2fr;\n  height: 100vh;\n}\n\n.wrapper-form {\n  padding: 40px 96px;\n}\n\n.wrapper-section-page-not-found {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n}\n\n.title {\n  color: var(--neutral-black);\n}\n\n.description {\n  color: var(--neutral-gray-dark);\n}\n\n@mixin background {\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n}\n\n.background-login {\n  @include background;\n  background-image: url('/assets/imgs/login.jpg');\n}\n\n.background-register {\n  @include background;\n  background-image: url('/assets/imgs/register.jpg');\n}\n\n.background-404 {\n  @include background;\n  background-image: url('/assets/imgs/404.jpg');\n}\n",
                    "styleUrl": "../scss/authentication.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PagePaginationComponent",
            "id": "component-PagePaginationComponent-c4d45075102d0f9d810569d47938a2d545e1e5baa0337d7b444b2ac3393fbb1f27983ca812e97ff43048042c3dd39fbd0f7253298d882000341d287a37ac887a",
            "file": "src/app/modules/docs/data/page-pagination/page-pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-pagination",
            "styleUrls": [],
            "styles": [],
            "template": "<hc-card [style]=\"{ 'margin-bottom': '16px' }\">\n  <h4>Basic</h4>\n  <p class=\"body1\" [style]=\"{ 'margin-bottom': '16px' }\">\n    Essa é uma paginação sem lado do servidor ou com uma request sem controle de\n    paginação do lado do servidor\n  </p>\n  <hc-pagination\n    [rows]=\"basicPagination.itemsPerPage\"\n    [totalRecords]=\"basicPagination.totalItems\"\n  ></hc-pagination>\n</hc-card>\n\n<hc-card [style]=\"{ 'margin-bottom': '16px' }\">\n  <h4>Server Side</h4>\n  <p class=\"body\" style=\"margin-bottom: 16px;\">paginação com controle do servidor</p>\n  <hc-pagination\n    [pagination]=\"serverSidePagination\"\n    (pageChangeEvent)=\"onPageChange($event)\"\n  ></hc-pagination>\n</hc-card>\n\n<hc-card [style]=\"{ 'margin-bottom': '16px' }\">\n  <h4>Show current Page</h4>\n  <p class=\"body\" style=\"margin-bottom: 16px;\">\n    mostra a pagina currente no lado direito\n  </p>\n  <hc-pagination\n    [rows]=\"basicPagination.itemsPerPage\"\n    [totalRecords]=\"basicPagination.totalItems\"\n    [showCurrentPageReport]=\"true\"\n    currentPageReportTemplate=\"Mostrando {first} de {last} de {totalRecords} linhas\"\n  ></hc-pagination>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "basicPagination",
                    "defaultValue": "{\n    currentPage: 1,\n    itemCount: 5,\n    itemsPerPage: 5,\n    totalItems: 35,\n    totalPages: 7,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPagination",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "limit",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "serverSidePagination",
                    "defaultValue": "{\n    currentPage: 0,\n    itemCount: 0,\n    itemsPerPage: 0,\n    totalItems: 0,\n    totalPages: 0,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPagination",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methodsClass": [
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IPageChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IPageChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport {\n  IPageChange,\n  IPagination,\n} from 'src/app/components/pagination/pagination.component'\n\nimport { ProductsService } from '../../products.service'\n\n@Component({\n  selector: 'app-page-pagination',\n  template: `\n    <hc-card [style]=\"{ 'margin-bottom': '16px' }\">\n      <h4>Basic</h4>\n      <p class=\"body1\" [style]=\"{ 'margin-bottom': '16px' }\">\n        Essa é uma paginação sem lado do servidor ou com uma request sem controle de\n        paginação do lado do servidor\n      </p>\n      <hc-pagination\n        [rows]=\"basicPagination.itemsPerPage\"\n        [totalRecords]=\"basicPagination.totalItems\"\n      ></hc-pagination>\n    </hc-card>\n\n    <hc-card [style]=\"{ 'margin-bottom': '16px' }\">\n      <h4>Server Side</h4>\n      <p class=\"body\" style=\"margin-bottom: 16px;\">paginação com controle do servidor</p>\n      <hc-pagination\n        [pagination]=\"serverSidePagination\"\n        (pageChangeEvent)=\"onPageChange($event)\"\n      ></hc-pagination>\n    </hc-card>\n\n    <hc-card [style]=\"{ 'margin-bottom': '16px' }\">\n      <h4>Show current Page</h4>\n      <p class=\"body\" style=\"margin-bottom: 16px;\">\n        mostra a pagina currente no lado direito\n      </p>\n      <hc-pagination\n        [rows]=\"basicPagination.itemsPerPage\"\n        [totalRecords]=\"basicPagination.totalItems\"\n        [showCurrentPageReport]=\"true\"\n        currentPageReportTemplate=\"Mostrando {first} de {last} de {totalRecords} linhas\"\n      ></hc-pagination>\n    </hc-card>\n  `,\n  styles: [],\n})\nexport class PagePaginationComponent implements OnInit {\n  page = 1\n  limit = 5\n\n  basicPagination: IPagination = {\n    currentPage: 1,\n    itemCount: 5,\n    itemsPerPage: 5,\n    totalItems: 35,\n    totalPages: 7,\n  }\n\n  serverSidePagination: IPagination = {\n    currentPage: 0,\n    itemCount: 0,\n    itemsPerPage: 0,\n    totalItems: 0,\n    totalPages: 0,\n  }\n\n  constructor(private productsService: ProductsService) {}\n\n  ngOnInit(): void {\n    this.getProducts()\n  }\n\n  getProducts() {\n    this.productsService.getProducts(this.page, this.limit).subscribe((response) => {\n      this.serverSidePagination = response.meta\n    })\n  }\n\n  onPageChange(event: IPageChange) {\n    this.page = event.page\n    this.limit = event.rows\n    this.getProducts()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageRowExpandComponent",
            "id": "component-PageRowExpandComponent-b4c5f2edfaf8185234ec408989829cd388c565a1e63ff2f53fc7dfa8235da9e71382d27890b34f2ed9c3787dbc6647263ee2ed413ce4141e5ede8c7f0bb7d1e7",
            "file": "src/app/modules/docs/table/page-row-expand/page-row-expand.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-row-expand",
            "styleUrls": [],
            "styles": [
                "\n      .hc-wrapper-row-expansion {\n        padding: 1.5rem;\n        display: flex;\n        justify-content: center;\n        width: 100%;\n        background-color: var(--neutral-divider);\n      }\n    "
            ],
            "template": "<hc-card>\n  <hc-table hcRowExpand [value]=\"products\" dataKey=\"code\" [columns]=\"cols\">\n    <ng-template hcTemplate=\"header\" let-columns>\n      <tr>\n        <th style=\"width: 2rem;\"></th>\n        <th *ngFor=\"let column of columns\">{{ column.header }}</th>\n      </tr>\n    </ng-template>\n    <ng-template\n      hcTemplate=\"body\"\n      let-product\n      let-columns=\"columns\"\n      let-expanded=\"expanded\"\n    >\n      <tr>\n        <td>\n          <hc-button\n            size=\"small\"\n            theme=\"text\"\n            [hcRowToggler]=\"product\"\n            [icon]=\"expanded ? 'expand_less' : 'expand_more'\"\n          ></hc-button>\n        </td>\n        <td *ngFor=\"let column of columns\">{{ product[column.field] }}</td>\n      </tr>\n    </ng-template>\n    <ng-template hcTemplate=\"rowexpansion\" let-product>\n      <td colspan=\"5\">\n        <div class=\"hc-wrapper-row-expansion\">\n          <h4>Row expanded - {{ product.code }}! ;D</h4>\n        </div>\n      </td>\n    </ng-template>\n  </hc-table>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cols",
                    "defaultValue": "[\n    {\n      header: 'Code',\n      field: 'code',\n    },\n    {\n      header: 'Name',\n      field: 'name',\n    },\n    {\n      header: 'Category',\n      field: 'category',\n    },\n    {\n      header: 'Quantity',\n      field: 'quantity',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { IProduct, ProductsService } from './../../products.service'\n\nimport { IColumn } from 'src/app/components/table/table.component'\n\n@Component({\n  selector: 'app-page-row-expand',\n  template: `\n    <hc-card>\n      <hc-table hcRowExpand [value]=\"products\" dataKey=\"code\" [columns]=\"cols\">\n        <ng-template hcTemplate=\"header\" let-columns>\n          <tr>\n            <th style=\"width: 2rem;\"></th>\n            <th *ngFor=\"let column of columns\">{{ column.header }}</th>\n          </tr>\n        </ng-template>\n        <ng-template\n          hcTemplate=\"body\"\n          let-product\n          let-columns=\"columns\"\n          let-expanded=\"expanded\"\n        >\n          <tr>\n            <td>\n              <hc-button\n                size=\"small\"\n                theme=\"text\"\n                [hcRowToggler]=\"product\"\n                [icon]=\"expanded ? 'expand_less' : 'expand_more'\"\n              ></hc-button>\n            </td>\n            <td *ngFor=\"let column of columns\">{{ product[column.field] }}</td>\n          </tr>\n        </ng-template>\n        <ng-template hcTemplate=\"rowexpansion\" let-product>\n          <td colspan=\"5\">\n            <div class=\"hc-wrapper-row-expansion\">\n              <h4>Row expanded - {{ product.code }}! ;D</h4>\n            </div>\n          </td>\n        </ng-template>\n      </hc-table>\n    </hc-card>\n  `,\n  styles: [\n    `\n      .hc-wrapper-row-expansion {\n        padding: 1.5rem;\n        display: flex;\n        justify-content: center;\n        width: 100%;\n        background-color: var(--neutral-divider);\n      }\n    `,\n  ],\n})\nexport class PageRowExpandComponent implements OnInit {\n  products: IProduct[] = []\n  cols: IColumn[] = [\n    {\n      header: 'Code',\n      field: 'code',\n    },\n    {\n      header: 'Name',\n      field: 'name',\n    },\n    {\n      header: 'Category',\n      field: 'category',\n    },\n    {\n      header: 'Quantity',\n      field: 'quantity',\n    },\n  ]\n\n  constructor(private productService: ProductsService) {}\n\n  ngOnInit(): void {\n    this.productService.getProducts(1, 10).subscribe((response) => {\n      this.products = response.items\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-wrapper-row-expansion {\n        padding: 1.5rem;\n        display: flex;\n        justify-content: center;\n        width: 100%;\n        background-color: var(--neutral-divider);\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "productService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageScrollComponent",
            "id": "component-PageScrollComponent-2c063a64ae148e1f77496e36c09bfe32a33c4bb89be7c8afaebe2caa82518866fef5da9ed3865a58e5b956832fa5aa4675b96da9db418ee9d1eb580c12053515",
            "file": "src/app/modules/docs/table/page-scroll/page-scroll.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-scroll",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"hc-docs-title\">\n  <h2>DataTable Scroll</h2>\n  <p class=\"body1\">\n    Scrollable é habilitado para rolar na tabela em vertical, hotizontal ou os dois\n    \"<i class=\"hc-docs-value\">both</i>\"\n  </p>\n</div>\n<div class=\"hc-docs-components\">\n  <hc-card>\n    <h6 style=\"margin-bottom: 1rem\">Horizontal</h6>\n    <hc-table\n      [value]=\"products\"\n      [columns]=\"cols\"\n      [scrollable]=\"true\"\n      scrollDirection=\"horizontal\"\n    >\n      <ng-template hcTemplate=\"header\" let-columns>\n        <tr>\n          <th *ngFor=\"let column of columns\" style=\"width: 200px\">\n            {{ column.header }}\n          </th>\n        </tr>\n      </ng-template>\n      <ng-template hcTemplate=\"body\" let-product let-columns=\"columns\">\n        <tr>\n          <td *ngFor=\"let column of columns\" style=\"width: 200px\">\n            {{ product[column.field] }}\n          </td>\n        </tr>\n      </ng-template>\n    </hc-table>\n  </hc-card>\n\n  <hc-card [style]=\"{ 'margin-top': '1rem' }\">\n    <h6 style=\"margin-bottom: 1rem\">Vertical</h6>\n    <hc-table\n      [value]=\"products\"\n      [columns]=\"cols\"\n      [scrollable]=\"true\"\n      scrollDirection=\"vertical\"\n      responsiveLayout=\"scroll\"\n      scrollHeight=\"480px\"\n    >\n      <ng-template hcTemplate=\"header\" let-columns>\n        <tr>\n          <th *ngFor=\"let column of columns\">\n            {{ column.header }}\n          </th>\n        </tr>\n      </ng-template>\n      <ng-template hcTemplate=\"body\" let-product let-columns=\"columns\">\n        <tr>\n          <td *ngFor=\"let column of columns\">\n            {{ product[column.field] }}\n          </td>\n        </tr>\n      </ng-template>\n    </hc-table>\n  </hc-card>\n\n  <hc-card [style]=\"{ 'margin-top': '1rem' }\">\n    <h6 style=\"margin-bottom: 1rem\">Vertical e Horizontal</h6>\n    <hc-table\n      [value]=\"products\"\n      [columns]=\"cols\"\n      [scrollable]=\"true\"\n      scrollDirection=\"both\"\n      responsiveLayout=\"scroll\"\n      scrollHeight=\"480px\"\n    >\n      <ng-template hcTemplate=\"header\" let-columns>\n        <tr>\n          <th *ngFor=\"let column of columns\">\n            {{ column.header }}\n          </th>\n        </tr>\n      </ng-template>\n      <ng-template hcTemplate=\"body\" let-product let-columns=\"columns\">\n        <tr>\n          <td *ngFor=\"let column of columns\">\n            {{ product[column.field] }}\n          </td>\n        </tr>\n      </ng-template>\n    </hc-table>\n  </hc-card>\n</div>\n<h4 class=\"hc-docs-section\">Documentação</h4>\n\n<div class=\"hc-docs-section\">\n  <h5>Import</h5>\n  <markdown src=\"/assets/docs/table/common/import.ts\"></markdown>\n</div>\n<div class=\"hc-docs-section\">\n  <h5>Codigo:</h5>\n  <p class=\"body1\">\n    Use o atributo <i class=\"hc-docs-value\">[scrollable]</i> para todos os tipo de\n    direção e o <i class=\"hc-docs-value\">[sortDirection]</i> para direção desejada\n  </p>\n  <markdown src=\"/assets/docs/table/scroll/scroll.html\"></markdown>\n  <markdown src=\"/assets/docs/table/scroll/component.ts\"></markdown>\n</div>\n\n<div class=\"hc-docs-section\">\n  <h5>Propriedades:</h5>\n  <hc-table [value]=\"props\" [columns]=\"colsProps\">\n    <ng-template hcTemplate=\"header\" let-columns>\n      <tr>\n        <th *ngFor=\"let column of columns\">{{ column.header }}</th>\n      </tr>\n    </ng-template>\n    <ng-template hcTemplate=\"body\" let-prop let-columns=\"columns\">\n      <tr>\n        <td *ngFor=\"let col of columns\">{{ prop[col.field] }}</td>\n      </tr>\n    </ng-template>\n  </hc-table>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cols",
                    "defaultValue": "[\n    { header: 'ID', field: 'id' },\n    { header: 'Code', field: 'code' },\n    { header: 'Name', field: 'name' },\n    { header: 'Description', field: 'description' },\n    { header: 'Price', field: 'price' },\n    { header: 'Category', field: 'category' },\n    { header: 'Quantity', field: 'quantity' },\n    { header: 'Inventory Status', field: 'inventoryStatus' },\n    { header: 'Rating', field: 'rating' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "colsProps",
                    "defaultValue": "[\n    { header: 'Name', field: 'name' },\n    { header: 'Type', field: 'type' },\n    { header: 'Default', field: 'default' },\n    { header: 'Description', field: 'description' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "props",
                    "defaultValue": "[\n    {\n      name: 'scrollable',\n      type: 'boolean',\n      default: 'false',\n      description: 'Para tornar a table scrollable',\n    },\n    {\n      name: 'scrollDirection',\n      type: 'vertical | horizontal | both',\n      default: 'both',\n      description: 'Escholhe a direção do scroll',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 151
                }
            ],
            "methodsClass": [
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { IProduct, ProductsService } from './../../products.service'\n\nimport { IColumn } from './../../../../components/table/table.component'\n\n@Component({\n  selector: 'app-page-scroll',\n  template: `\n    <div class=\"hc-docs-title\">\n      <h2>DataTable Scroll</h2>\n      <p class=\"body1\">\n        Scrollable é habilitado para rolar na tabela em vertical, hotizontal ou os dois\n        \"<i class=\"hc-docs-value\">both</i>\"\n      </p>\n    </div>\n    <div class=\"hc-docs-components\">\n      <hc-card>\n        <h6 style=\"margin-bottom: 1rem\">Horizontal</h6>\n        <hc-table\n          [value]=\"products\"\n          [columns]=\"cols\"\n          [scrollable]=\"true\"\n          scrollDirection=\"horizontal\"\n        >\n          <ng-template hcTemplate=\"header\" let-columns>\n            <tr>\n              <th *ngFor=\"let column of columns\" style=\"width: 200px\">\n                {{ column.header }}\n              </th>\n            </tr>\n          </ng-template>\n          <ng-template hcTemplate=\"body\" let-product let-columns=\"columns\">\n            <tr>\n              <td *ngFor=\"let column of columns\" style=\"width: 200px\">\n                {{ product[column.field] }}\n              </td>\n            </tr>\n          </ng-template>\n        </hc-table>\n      </hc-card>\n\n      <hc-card [style]=\"{ 'margin-top': '1rem' }\">\n        <h6 style=\"margin-bottom: 1rem\">Vertical</h6>\n        <hc-table\n          [value]=\"products\"\n          [columns]=\"cols\"\n          [scrollable]=\"true\"\n          scrollDirection=\"vertical\"\n          responsiveLayout=\"scroll\"\n          scrollHeight=\"480px\"\n        >\n          <ng-template hcTemplate=\"header\" let-columns>\n            <tr>\n              <th *ngFor=\"let column of columns\">\n                {{ column.header }}\n              </th>\n            </tr>\n          </ng-template>\n          <ng-template hcTemplate=\"body\" let-product let-columns=\"columns\">\n            <tr>\n              <td *ngFor=\"let column of columns\">\n                {{ product[column.field] }}\n              </td>\n            </tr>\n          </ng-template>\n        </hc-table>\n      </hc-card>\n\n      <hc-card [style]=\"{ 'margin-top': '1rem' }\">\n        <h6 style=\"margin-bottom: 1rem\">Vertical e Horizontal</h6>\n        <hc-table\n          [value]=\"products\"\n          [columns]=\"cols\"\n          [scrollable]=\"true\"\n          scrollDirection=\"both\"\n          responsiveLayout=\"scroll\"\n          scrollHeight=\"480px\"\n        >\n          <ng-template hcTemplate=\"header\" let-columns>\n            <tr>\n              <th *ngFor=\"let column of columns\">\n                {{ column.header }}\n              </th>\n            </tr>\n          </ng-template>\n          <ng-template hcTemplate=\"body\" let-product let-columns=\"columns\">\n            <tr>\n              <td *ngFor=\"let column of columns\">\n                {{ product[column.field] }}\n              </td>\n            </tr>\n          </ng-template>\n        </hc-table>\n      </hc-card>\n    </div>\n    <h4 class=\"hc-docs-section\">Documentação</h4>\n\n    <div class=\"hc-docs-section\">\n      <h5>Import</h5>\n      <markdown src=\"/assets/docs/table/common/import.ts\"></markdown>\n    </div>\n    <div class=\"hc-docs-section\">\n      <h5>Codigo:</h5>\n      <p class=\"body1\">\n        Use o atributo <i class=\"hc-docs-value\">[scrollable]</i> para todos os tipo de\n        direção e o <i class=\"hc-docs-value\">[sortDirection]</i> para direção desejada\n      </p>\n      <markdown src=\"/assets/docs/table/scroll/scroll.html\"></markdown>\n      <markdown src=\"/assets/docs/table/scroll/component.ts\"></markdown>\n    </div>\n\n    <div class=\"hc-docs-section\">\n      <h5>Propriedades:</h5>\n      <hc-table [value]=\"props\" [columns]=\"colsProps\">\n        <ng-template hcTemplate=\"header\" let-columns>\n          <tr>\n            <th *ngFor=\"let column of columns\">{{ column.header }}</th>\n          </tr>\n        </ng-template>\n        <ng-template hcTemplate=\"body\" let-prop let-columns=\"columns\">\n          <tr>\n            <td *ngFor=\"let col of columns\">{{ prop[col.field] }}</td>\n          </tr>\n        </ng-template>\n      </hc-table>\n    </div>\n  `,\n  styles: [],\n})\nexport class PageScrollComponent implements OnInit {\n  products: IProduct[] = []\n  cols: IColumn[] = [\n    { header: 'ID', field: 'id' },\n    { header: 'Code', field: 'code' },\n    { header: 'Name', field: 'name' },\n    { header: 'Description', field: 'description' },\n    { header: 'Price', field: 'price' },\n    { header: 'Category', field: 'category' },\n    { header: 'Quantity', field: 'quantity' },\n    { header: 'Inventory Status', field: 'inventoryStatus' },\n    { header: 'Rating', field: 'rating' },\n  ]\n\n  colsProps: IColumn[] = [\n    { header: 'Name', field: 'name' },\n    { header: 'Type', field: 'type' },\n    { header: 'Default', field: 'default' },\n    { header: 'Description', field: 'description' },\n  ]\n\n  props = [\n    {\n      name: 'scrollable',\n      type: 'boolean',\n      default: 'false',\n      description: 'Para tornar a table scrollable',\n    },\n    {\n      name: 'scrollDirection',\n      type: 'vertical | horizontal | both',\n      default: 'both',\n      description: 'Escholhe a direção do scroll',\n    },\n  ]\n\n  constructor(private productsService: ProductsService) {}\n\n  ngOnInit(): void {\n    this.getProducts()\n  }\n\n  getProducts(): void {\n    this.productsService.getProducts(1, 10).subscribe((response) => {\n      this.products = response.items\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 164,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageSelectAllComponent",
            "id": "component-PageSelectAllComponent-d9921ccaa26216230a1c97720935e36fbcf3a817c55d9e30f3db213385155466f6504cf1d730cd81bfa77d8dbe76653a64789b97060a2ef498f9d1c8634d06ba",
            "file": "src/app/modules/docs/table/page-select-all/page-select-all.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "BaseTableService"
                }
            ],
            "selector": "app-page-select-all",
            "styleUrls": [],
            "styles": [],
            "template": "<hc-card *ngIf=\"products && pagination\">\n  <hc-table\n    hcSelect\n    hcPagination\n    dataKey=\"code\"\n    [value]=\"products\"\n    [responsive]=\"true\"\n    [paginator]=\"true\"\n    [pagination]=\"pagination\"\n    (pageEvent)=\"baseTableService.changePage($event)\"\n    [selectionPageOnly]=\"true\"\n    [(selection)]=\"selectedProducts\"\n    [(deselection)]=\"desSelectedProdutcs\"\n    [selectAll]=\"selectAll\"\n    (selectAllChange)=\"onSelectAllChange($event)\"\n  >\n    <ng-template hcTemplate=\"optionsHeader\">\n      <hc-select-all\n        *ngIf=\"selectedProducts?.length || selectAll\"\n        [selected]=\"selectedProducts\"\n        [deselected]=\"desSelectedProdutcs\"\n        [totalItems]=\"pagination.totalItems\"\n        [selectAll]=\"selectAll\"\n        (clickEvent)=\"onSelectAll()\"\n      >\n        <hc-button size=\"small\" color=\"primary\" (onClick)=\"onShow()\">\n          <hc-icon size=\"large\" icon=\"approval\"></hc-icon>\n        </hc-button>\n      </hc-select-all>\n    </ng-template>\n    <ng-template hcTemplate=\"header\">\n      <tr>\n        <th>\n          <hc-table-header-checkbox\n            ariaLabel=\"checkbox header\"\n          ></hc-table-header-checkbox>\n        </th>\n        <th>Code</th>\n        <th>Name</th>\n        <th>Category</th>\n        <th>Quantity</th>\n      </tr>\n    </ng-template>\n    <ng-template hcTemplate=\"body\" let-product>\n      <tr>\n        <td>\n          <hc-table-check-box\n            [value]=\"product\"\n            [ariaLabel]=\"'checkbox-' + product.id\"\n          ></hc-table-check-box>\n        </td>\n        <td>{{ product.code }}</td>\n        <td>{{ product.name }}</td>\n        <td>{{ product.category }}</td>\n        <td>{{ product.quantity }}</td>\n      </tr>\n    </ng-template>\n  </hc-table>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "baseTableService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseTableService",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "desSelectedProdutcs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeta",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "selectAll",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "selectedProducts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 82
                }
            ],
            "methodsClass": [
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectAllChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "IHeaderCheckboxEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IHeaderCheckboxEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { IProduct, ProductsService } from '../../products.service'\n\nimport { ActivatedRoute } from '@angular/router'\nimport { BaseTableService } from 'src/app/common/base-table/base-table.service'\nimport { IHeaderCheckboxEvent } from 'src/app/components/table/select.directive'\nimport { IMeta } from 'src/app/models/pagination.model'\n\n@Component({\n  selector: 'app-page-select-all',\n  template: `\n    <hc-card *ngIf=\"products && pagination\">\n      <hc-table\n        hcSelect\n        hcPagination\n        dataKey=\"code\"\n        [value]=\"products\"\n        [responsive]=\"true\"\n        [paginator]=\"true\"\n        [pagination]=\"pagination\"\n        (pageEvent)=\"baseTableService.changePage($event)\"\n        [selectionPageOnly]=\"true\"\n        [(selection)]=\"selectedProducts\"\n        [(deselection)]=\"desSelectedProdutcs\"\n        [selectAll]=\"selectAll\"\n        (selectAllChange)=\"onSelectAllChange($event)\"\n      >\n        <ng-template hcTemplate=\"optionsHeader\">\n          <hc-select-all\n            *ngIf=\"selectedProducts?.length || selectAll\"\n            [selected]=\"selectedProducts\"\n            [deselected]=\"desSelectedProdutcs\"\n            [totalItems]=\"pagination.totalItems\"\n            [selectAll]=\"selectAll\"\n            (clickEvent)=\"onSelectAll()\"\n          >\n            <hc-button size=\"small\" color=\"primary\" (onClick)=\"onShow()\">\n              <hc-icon size=\"large\" icon=\"approval\"></hc-icon>\n            </hc-button>\n          </hc-select-all>\n        </ng-template>\n        <ng-template hcTemplate=\"header\">\n          <tr>\n            <th>\n              <hc-table-header-checkbox\n                ariaLabel=\"checkbox header\"\n              ></hc-table-header-checkbox>\n            </th>\n            <th>Code</th>\n            <th>Name</th>\n            <th>Category</th>\n            <th>Quantity</th>\n          </tr>\n        </ng-template>\n        <ng-template hcTemplate=\"body\" let-product>\n          <tr>\n            <td>\n              <hc-table-check-box\n                [value]=\"product\"\n                [ariaLabel]=\"'checkbox-' + product.id\"\n              ></hc-table-check-box>\n            </td>\n            <td>{{ product.code }}</td>\n            <td>{{ product.name }}</td>\n            <td>{{ product.category }}</td>\n            <td>{{ product.quantity }}</td>\n          </tr>\n        </ng-template>\n      </hc-table>\n    </hc-card>\n  `,\n  providers: [BaseTableService],\n})\nexport class PageSelectAllComponent implements OnInit {\n  products: IProduct[] = []\n  pagination!: IMeta\n\n  selectAll: boolean | null = null\n\n  checked!: boolean\n\n  selectedProducts!: IProduct[]\n\n  desSelectedProdutcs: IProduct[] = []\n\n  constructor(\n    private productsService: ProductsService,\n    public baseTableService: BaseTableService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(() => {\n      this.getProducts()\n    })\n  }\n\n  onSelectAll() {\n    this.selectAll = !this.selectAll\n  }\n\n  getProducts(): void {\n    this.productsService\n      .getProducts(\n        this.baseTableService.page,\n        this.baseTableService.limit,\n        this.baseTableService.sortColumn,\n        this.baseTableService.sortDirection\n      )\n      .subscribe((response) => {\n        this.products = response.items\n        this.pagination = response.meta\n      })\n  }\n\n  onSelectAllChange(event: IHeaderCheckboxEvent) {\n    this.checked = event.checked\n\n    if (this.checked) {\n      this.getProducts()\n    }\n  }\n\n  onShow() {\n    console.log('SELECTED: ', this.selectedProducts)\n    console.log('DESELECTED: ', this.desSelectedProdutcs)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "baseTableService",
                        "type": "BaseTableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseTableService",
                        "type": "BaseTableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PageSelectComponent",
            "id": "component-PageSelectComponent-6e4b4044c96833151b325b0b0d56f2c2137c6997bef983c56ae7b18668cc99d67149d7e2b4925e0c0bd8519b545be44344f94f89b44f519733e24f88baeffa9a",
            "file": "src/app/modules/docs/form/page-select/page-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-select",
            "styleUrls": [],
            "styles": [],
            "template": "<hc-card>\n  <div>\n    <h6 style=\"margin-bottom: 1rem;\">Empty</h6>\n    <hc-select\n      optionLabel=\"name\"\n      [options]=\"cities\"\n      [showClear]=\"true\"\n      [style]=\"{ width: '256px' }\"\n      [(ngModel)]=\"selectedCity\"\n    ></hc-select>\n  </div>\n  <div style=\"margin-top: 1.5rem\">\n    <h6 style=\"margin-bottom: 1rem\">Placeholder</h6>\n    <hc-select\n      placeholder=\"Select city\"\n      optionLabel=\"name\"\n      [options]=\"cities\"\n      [showClear]=\"true\"\n      [style]=\"{ width: '256px' }\"\n      [(ngModel)]=\"selectedCity\"\n    ></hc-select>\n  </div>\n  <div style=\"margin-top: 1.5rem;\">\n    <h6 style=\"margin-bottom: 1rem;\">Disabled</h6>\n    <hc-select\n      placeholder=\"Select\"\n      optionLabel=\"name\"\n      [disabled]=\"true\"\n      [options]=\"cities\"\n      [showClear]=\"true\"\n      [style]=\"{ width: '256px' }\"\n      [(ngModel)]=\"selectedCity\"\n    ></hc-select>\n  </div>\n  <div style=\"margin-top: 1.5rem;\">\n    <h6 style=\"margin-bottom: 1rem;\">ngModel Initial Value</h6>\n    <hc-select\n      placeholder=\"Select\"\n      optionLabel=\"name\"\n      [options]=\"cities\"\n      [showClear]=\"true\"\n      [style]=\"{ width: '256px' }\"\n      [(ngModel)]=\"selectedInitialValue\"\n    ></hc-select>\n  </div>\n  <div style=\"margin-top: 1.5rem;\">\n    <h6 style=\"margin-bottom: 1rem;\">formControlName Initial Value</h6>\n    <form [formGroup]=\"form\" (submit)=\"onShow()\">\n      <hc-select\n        placeholder=\"Select\"\n        optionLabel=\"name\"\n        formControlName=\"city\"\n        [options]=\"cities\"\n        [showClear]=\"true\"\n        [style]=\"{ width: '256px' }\"\n      ></hc-select>\n    </form>\n  </div>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICity[]",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    city: [{ name: 'São Paulo', code: 'SP' }],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "selectedCity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICity",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "selectedInitialValue",
                    "defaultValue": "{ name: 'São Paulo', code: 'SP' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "methodsClass": [
                {
                    "name": "onShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FormBuilder, FormGroup } from '@angular/forms'\n\nimport { Component } from '@angular/core'\n\ninterface ICity {\n  name: string\n  code: string\n}\n\n@Component({\n  selector: 'app-page-select',\n  template: `\n    <hc-card>\n      <div>\n        <h6 style=\"margin-bottom: 1rem;\">Empty</h6>\n        <hc-select\n          optionLabel=\"name\"\n          [options]=\"cities\"\n          [showClear]=\"true\"\n          [style]=\"{ width: '256px' }\"\n          [(ngModel)]=\"selectedCity\"\n        ></hc-select>\n      </div>\n      <div style=\"margin-top: 1.5rem\">\n        <h6 style=\"margin-bottom: 1rem\">Placeholder</h6>\n        <hc-select\n          placeholder=\"Select city\"\n          optionLabel=\"name\"\n          [options]=\"cities\"\n          [showClear]=\"true\"\n          [style]=\"{ width: '256px' }\"\n          [(ngModel)]=\"selectedCity\"\n        ></hc-select>\n      </div>\n      <div style=\"margin-top: 1.5rem;\">\n        <h6 style=\"margin-bottom: 1rem;\">Disabled</h6>\n        <hc-select\n          placeholder=\"Select\"\n          optionLabel=\"name\"\n          [disabled]=\"true\"\n          [options]=\"cities\"\n          [showClear]=\"true\"\n          [style]=\"{ width: '256px' }\"\n          [(ngModel)]=\"selectedCity\"\n        ></hc-select>\n      </div>\n      <div style=\"margin-top: 1.5rem;\">\n        <h6 style=\"margin-bottom: 1rem;\">ngModel Initial Value</h6>\n        <hc-select\n          placeholder=\"Select\"\n          optionLabel=\"name\"\n          [options]=\"cities\"\n          [showClear]=\"true\"\n          [style]=\"{ width: '256px' }\"\n          [(ngModel)]=\"selectedInitialValue\"\n        ></hc-select>\n      </div>\n      <div style=\"margin-top: 1.5rem;\">\n        <h6 style=\"margin-bottom: 1rem;\">formControlName Initial Value</h6>\n        <form [formGroup]=\"form\" (submit)=\"onShow()\">\n          <hc-select\n            placeholder=\"Select\"\n            optionLabel=\"name\"\n            formControlName=\"city\"\n            [options]=\"cities\"\n            [showClear]=\"true\"\n            [style]=\"{ width: '256px' }\"\n          ></hc-select>\n        </form>\n      </div>\n    </hc-card>\n  `,\n  styles: [],\n})\nexport class PageSelectComponent {\n  cities: ICity[]\n  selectedCity!: ICity\n  selectedInitialValue = { name: 'São Paulo', code: 'SP' }\n  form: FormGroup = this.fb.group({\n    city: [{ name: 'São Paulo', code: 'SP' }],\n  })\n\n  constructor(private fb: FormBuilder) {\n    this.cities = [\n      { name: 'New York', code: 'NY' },\n      { name: 'Rome', code: 'RM' },\n      { name: 'London', code: 'EDN' },\n      { name: 'Istanbul', code: 'IST' },\n      { name: 'Paris', code: 'PRS' },\n      { name: 'San Francisco', code: 'SF' },\n      { name: 'São Paulo', code: 'SP' },\n      { name: 'Ceara', code: 'CE' },\n      { name: 'Minas Gerais', code: 'MG' },\n    ]\n  }\n\n  onShow() {\n    console.log(this.selectedInitialValue)\n    console.log(this.form.value)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PageSkeletonComponent",
            "id": "component-PageSkeletonComponent-9e532b01157b970f27a0c5693067a6304f97812380e95bcebf66273ad98c8f21514b932197bb343da4fccdca4abe2e83a363b27ac469a6e9a98986c4510847af",
            "file": "src/app/modules/docs/misc/page-skeleton/page-skeleton.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-skeleton",
            "styleUrls": [],
            "styles": [
                "\n      .hc-skeleton-wrapper {\n        margin: 1rem 0;\n      }\n\n      .hc-content-card-50 {\n        width: 50%;\n      }\n    "
            ],
            "template": "<div class=\"hc-docs-title\">\n  <h2>Skeleton</h2>\n  <p class=\"body1\">Skeleton é um placeholder que é exibido antes do conteudo</p>\n</div>\n<hc-card>\n  <div class=\"hc-content-card-50\">\n    <h5 style=\"margin-bottom: 1.5rem;\">Retangulo</h5>\n    <div class=\"hc-skeleton-wrapper\">\n      <hc-skeleton></hc-skeleton>\n    </div>\n    <div class=\"hc-skeleton-wrapper\">\n      <hc-skeleton width=\"30%\"></hc-skeleton>\n    </div>\n    <div class=\"hc-skeleton-wrapper\">\n      <hc-skeleton width=\"20%\"></hc-skeleton>\n    </div>\n    <div class=\"hc-skeleton-wrapper\">\n      <hc-skeleton width=\"30%\" height=\"2rem\"></hc-skeleton>\n    </div>\n    <div class=\"hc-skeleton-wrapper\">\n      <hc-skeleton width=\"20%\" height=\"3rem\"></hc-skeleton>\n    </div>\n    <h5 style=\"margin-bottom: 1.5rem\">Quadrado</h5>\n    <div style=\"display: flex; align-items: flex-end; gap: 1rem;\">\n      <hc-skeleton size=\"40px\"></hc-skeleton>\n      <hc-skeleton size=\"60px\"></hc-skeleton>\n      <hc-skeleton size=\"80px\"></hc-skeleton>\n    </div>\n  </div>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({\n  selector: 'app-page-skeleton',\n  template: `\n    <div class=\"hc-docs-title\">\n      <h2>Skeleton</h2>\n      <p class=\"body1\">Skeleton é um placeholder que é exibido antes do conteudo</p>\n    </div>\n    <hc-card>\n      <div class=\"hc-content-card-50\">\n        <h5 style=\"margin-bottom: 1.5rem;\">Retangulo</h5>\n        <div class=\"hc-skeleton-wrapper\">\n          <hc-skeleton></hc-skeleton>\n        </div>\n        <div class=\"hc-skeleton-wrapper\">\n          <hc-skeleton width=\"30%\"></hc-skeleton>\n        </div>\n        <div class=\"hc-skeleton-wrapper\">\n          <hc-skeleton width=\"20%\"></hc-skeleton>\n        </div>\n        <div class=\"hc-skeleton-wrapper\">\n          <hc-skeleton width=\"30%\" height=\"2rem\"></hc-skeleton>\n        </div>\n        <div class=\"hc-skeleton-wrapper\">\n          <hc-skeleton width=\"20%\" height=\"3rem\"></hc-skeleton>\n        </div>\n        <h5 style=\"margin-bottom: 1.5rem\">Quadrado</h5>\n        <div style=\"display: flex; align-items: flex-end; gap: 1rem;\">\n          <hc-skeleton size=\"40px\"></hc-skeleton>\n          <hc-skeleton size=\"60px\"></hc-skeleton>\n          <hc-skeleton size=\"80px\"></hc-skeleton>\n        </div>\n      </div>\n    </hc-card>\n  `,\n  styles: [\n    `\n      .hc-skeleton-wrapper {\n        margin: 1rem 0;\n      }\n\n      .hc-content-card-50 {\n        width: 50%;\n      }\n    `,\n  ],\n})\nexport class PageSkeletonComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-skeleton-wrapper {\n        margin: 1rem 0;\n      }\n\n      .hc-content-card-50 {\n        width: 50%;\n      }\n    \n"
        },
        {
            "name": "PageSwitchComponent",
            "id": "component-PageSwitchComponent-62fe9640f777c2bbba9c9ddf3d4d1f60a36de31bf6c0dc2102563d87538acd9b7e7f206f463f8067323d7a7b0579beb5ecc9b097022ca3f805c97d9dec468c2f",
            "file": "src/app/modules/docs/form/page-switch/page-switch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-switch",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"hc-docs-title\">\n  <h2>Switch</h2>\n  <p class=\"body1\">Switch é usado para selecionar um valor boolean</p>\n</div>\n<div class=\"hc-docs-components\">\n  <hc-card>\n    <h5>Basic</h5>\n    <hc-switch\n      [label]=\"label\"\n      [(ngModel)]=\"checked\"\n      (onChange)=\"change($event)\"\n    ></hc-switch>\n  </hc-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checked",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "label",
                    "defaultValue": "'On'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [
                        {
                            "name": "event",
                            "type": "ISwitchOnChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ISwitchOnChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\nimport { ISwitchOnChangeEvent } from './../../../../components/switch/switch.component'\n\n@Component({\n  selector: 'app-page-switch',\n  template: `\n    <div class=\"hc-docs-title\">\n      <h2>Switch</h2>\n      <p class=\"body1\">Switch é usado para selecionar um valor boolean</p>\n    </div>\n    <div class=\"hc-docs-components\">\n      <hc-card>\n        <h5>Basic</h5>\n        <hc-switch\n          [label]=\"label\"\n          [(ngModel)]=\"checked\"\n          (onChange)=\"change($event)\"\n        ></hc-switch>\n      </hc-card>\n    </div>\n  `,\n  styles: [],\n})\nexport class PageSwitchComponent {\n  checked = true\n  label = 'On'\n\n  change(event: ISwitchOnChangeEvent) {\n    if (event.checked) {\n      this.label = 'On'\n    } else {\n      this.label = 'Off'\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "PageTagComponent",
            "id": "component-PageTagComponent-61b8e0681272e993345536b4e22878be6ba5e3552ea71ff97fe498560cacd9387d84359ad3a057576da03c09c490c0505d77c1b31b729642147846dff8bf82f0",
            "file": "src/app/modules/docs/misc/page-tag/page-tag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-tag",
            "styleUrls": [],
            "styles": [
                "\n      .hc-tag-wrapper {\n        display: flex;\n      }\n    "
            ],
            "template": "<div class=\"hc-docs-title\">\n  <h2>Tag</h2>\n  <p class=\"body1\">Tag component é usado para categorizar um conteudo.</p>\n</div>\n<div class=\"hc-docs-components\">\n  <hc-card>\n    <div style=\"margin-bottom: 1.5rem;\">\n      <h5 style=\"margin-bottom: 1rem;\">Tags</h5>\n      <div class=\"hc-tag-wrapper\">\n        <div>\n          <hc-tag severity=\"primary\">Primary</hc-tag>\n        </div>\n        <div style=\"margin-left: 1rem;\">\n          <hc-tag severity=\"success\">Success</hc-tag>\n        </div>\n        <div style=\"margin-left: 1rem;\">\n          <hc-tag severity=\"info\">Info</hc-tag>\n        </div>\n        <div style=\"margin-left: 1rem;\">\n          <hc-tag severity=\"warning\">Warning</hc-tag>\n        </div>\n        <div style=\"margin-left: 1rem;\">\n          <hc-tag severity=\"danger\">Danger</hc-tag>\n        </div>\n      </div>\n    </div>\n    <div style=\"margin-bottom: 1.5rem;\">\n      <h5 style=\"margin-bottom: 1rem;\">Pills</h5>\n      <div class=\"hc-tag-wrapper\">\n        <div>\n          <hc-tag severity=\"primary\" [rounded]=\"true\">Primary</hc-tag>\n        </div>\n        <div style=\"margin-left: 1rem;\">\n          <hc-tag severity=\"success\" [rounded]=\"true\">Success</hc-tag>\n        </div>\n        <div style=\"margin-left: 1rem;\">\n          <hc-tag severity=\"info\" [rounded]=\"true\">Info</hc-tag>\n        </div>\n        <div style=\"margin-left: 1rem;\">\n          <hc-tag severity=\"warning\" [rounded]=\"true\">Warning</hc-tag>\n        </div>\n        <div style=\"margin-left: 1rem;\">\n          <hc-tag severity=\"danger\" [rounded]=\"true\">Danger</hc-tag>\n        </div>\n      </div>\n    </div>\n  </hc-card>\n</div>\n<h4 class=\"hc-docs-documentaion\">Documentação</h4>\n\n<div class=\"hc-docs-section\">\n  <h5>Import</h5>\n  <markdown src=\"/assets/docs/misc/tag/import.ts\"></markdown>\n</div>\n\n<div class=\"hc-docs-section\">\n  <h5>Severity</h5>\n  <p class=\"body1\">\n    Uma <i class=\"hc-docs-value\">severity</i> pode ser usado para exibir o\n    <i class=\"hc-docs-value\">background</i> de uma tag, com diferentes cores\n    <i class=\"hc-docs-value\">success | info | warning | danger</i>\n  </p>\n  <markdown\n    src=\"/assets/docs/misc/tag/tag-severity.html\"\n    ngPreserveWhitespaces\n  ></markdown>\n</div>\n\n<div class=\"hc-docs-section\">\n  <h5>Rounded</h5>\n  <p class=\"body1\">\n    Com o <i class=\"hc-docs-value\">rounded</i> você pode transforma a tag em uma\n    <i class=\"hc-docs-value\">pill</i>\n  </p>\n  <markdown src=\"/assets/docs/misc/tag/tag-pill.html\"></markdown>\n</div>\n\n<div class=\"hc-docs-section\">\n  <h5>Propriedades</h5>\n  <hc-table [value]=\"props\" [columns]=\"cols\" [responsive]=\"true\">\n    <ng-template hcTemplate=\"header\" let-columns>\n      <tr>\n        <th *ngFor=\"let column of columns\">{{ column.header }}</th>\n      </tr>\n    </ng-template>\n    <ng-template hcTemplate=\"body\" let-prop let-columns=\"columns\">\n      <tr>\n        <td *ngFor=\"let col of columns\">{{ prop[col.field] }}</td>\n      </tr>\n    </ng-template>\n  </hc-table>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cols",
                    "defaultValue": "[\n    { header: 'Name', field: 'name' },\n    { header: 'Type', field: 'type' },\n    { header: 'Default', field: 'default' },\n    { header: 'Description', field: 'description' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "props",
                    "defaultValue": "[\n    {\n      name: 'severity',\n      type: 'primary | success | info | warning | danger',\n      default: 'primary',\n      description: 'Severity tipo da tag',\n    },\n    {\n      name: 'rounded',\n      type: 'boolean',\n      default: 'false',\n      description: 'Torna a tag uma pill',\n    },\n    {\n      name: 'style',\n      type: 'object',\n      default: 'null',\n      description: 'Inline estilo do component',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 116
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\nimport { IColumn } from './../../../../components/table/table.component'\n\n@Component({\n  selector: 'app-page-tag',\n  template: `\n    <div class=\"hc-docs-title\">\n      <h2>Tag</h2>\n      <p class=\"body1\">Tag component é usado para categorizar um conteudo.</p>\n    </div>\n    <div class=\"hc-docs-components\">\n      <hc-card>\n        <div style=\"margin-bottom: 1.5rem;\">\n          <h5 style=\"margin-bottom: 1rem;\">Tags</h5>\n          <div class=\"hc-tag-wrapper\">\n            <div>\n              <hc-tag severity=\"primary\">Primary</hc-tag>\n            </div>\n            <div style=\"margin-left: 1rem;\">\n              <hc-tag severity=\"success\">Success</hc-tag>\n            </div>\n            <div style=\"margin-left: 1rem;\">\n              <hc-tag severity=\"info\">Info</hc-tag>\n            </div>\n            <div style=\"margin-left: 1rem;\">\n              <hc-tag severity=\"warning\">Warning</hc-tag>\n            </div>\n            <div style=\"margin-left: 1rem;\">\n              <hc-tag severity=\"danger\">Danger</hc-tag>\n            </div>\n          </div>\n        </div>\n        <div style=\"margin-bottom: 1.5rem;\">\n          <h5 style=\"margin-bottom: 1rem;\">Pills</h5>\n          <div class=\"hc-tag-wrapper\">\n            <div>\n              <hc-tag severity=\"primary\" [rounded]=\"true\">Primary</hc-tag>\n            </div>\n            <div style=\"margin-left: 1rem;\">\n              <hc-tag severity=\"success\" [rounded]=\"true\">Success</hc-tag>\n            </div>\n            <div style=\"margin-left: 1rem;\">\n              <hc-tag severity=\"info\" [rounded]=\"true\">Info</hc-tag>\n            </div>\n            <div style=\"margin-left: 1rem;\">\n              <hc-tag severity=\"warning\" [rounded]=\"true\">Warning</hc-tag>\n            </div>\n            <div style=\"margin-left: 1rem;\">\n              <hc-tag severity=\"danger\" [rounded]=\"true\">Danger</hc-tag>\n            </div>\n          </div>\n        </div>\n      </hc-card>\n    </div>\n    <h4 class=\"hc-docs-documentaion\">Documentação</h4>\n\n    <div class=\"hc-docs-section\">\n      <h5>Import</h5>\n      <markdown src=\"/assets/docs/misc/tag/import.ts\"></markdown>\n    </div>\n\n    <div class=\"hc-docs-section\">\n      <h5>Severity</h5>\n      <p class=\"body1\">\n        Uma <i class=\"hc-docs-value\">severity</i> pode ser usado para exibir o\n        <i class=\"hc-docs-value\">background</i> de uma tag, com diferentes cores\n        <i class=\"hc-docs-value\">success | info | warning | danger</i>\n      </p>\n      <markdown\n        src=\"/assets/docs/misc/tag/tag-severity.html\"\n        ngPreserveWhitespaces\n      ></markdown>\n    </div>\n\n    <div class=\"hc-docs-section\">\n      <h5>Rounded</h5>\n      <p class=\"body1\">\n        Com o <i class=\"hc-docs-value\">rounded</i> você pode transforma a tag em uma\n        <i class=\"hc-docs-value\">pill</i>\n      </p>\n      <markdown src=\"/assets/docs/misc/tag/tag-pill.html\"></markdown>\n    </div>\n\n    <div class=\"hc-docs-section\">\n      <h5>Propriedades</h5>\n      <hc-table [value]=\"props\" [columns]=\"cols\" [responsive]=\"true\">\n        <ng-template hcTemplate=\"header\" let-columns>\n          <tr>\n            <th *ngFor=\"let column of columns\">{{ column.header }}</th>\n          </tr>\n        </ng-template>\n        <ng-template hcTemplate=\"body\" let-prop let-columns=\"columns\">\n          <tr>\n            <td *ngFor=\"let col of columns\">{{ prop[col.field] }}</td>\n          </tr>\n        </ng-template>\n      </hc-table>\n    </div>\n  `,\n  styles: [\n    `\n      .hc-tag-wrapper {\n        display: flex;\n      }\n    `,\n  ],\n})\nexport class PageTagComponent {\n  cols: IColumn[] = [\n    { header: 'Name', field: 'name' },\n    { header: 'Type', field: 'type' },\n    { header: 'Default', field: 'default' },\n    { header: 'Description', field: 'description' },\n  ]\n\n  props = [\n    {\n      name: 'severity',\n      type: 'primary | success | info | warning | danger',\n      default: 'primary',\n      description: 'Severity tipo da tag',\n    },\n    {\n      name: 'rounded',\n      type: 'boolean',\n      default: 'false',\n      description: 'Torna a tag uma pill',\n    },\n    {\n      name: 'style',\n      type: 'object',\n      default: 'null',\n      description: 'Inline estilo do component',\n    },\n  ]\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-tag-wrapper {\n        display: flex;\n      }\n    \n"
        },
        {
            "name": "PageTimelineComponent",
            "id": "component-PageTimelineComponent-c1d121c23723693a31b1fa56b638283f752660da16063bcfe44e45809bcfec1c125c340b1c08246c15319925409cf8b498c2452681262a5a46acad81b44c99a3",
            "file": "src/app/modules/docs/data/page-timeline/page-timeline.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-timeline",
            "styleUrls": [
                "page-timeline.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"hc-docs-title\">\n  <h2>Timeline</h2>\n  <p class=\"body1\">Timeline é a visualização de uma cadeia de eventos</p>\n</div>\n<div class=\"hc-docs-components\">\n  <hc-card>\n    <h5 style=\"margin-bottom: 1rem;\">Horizontal</h5>\n    <hc-timeline [value]=\"eventsYears\" layout=\"horizontal\">\n      <ng-template hcTemplate=\"content\" let-event>{{ event }}</ng-template>\n    </hc-timeline>\n\n    <h5 style=\"margin: 1rem 0\">Customizado</h5>\n    <div class=\"hc-wrapper-timeline\">\n      <hc-timeline\n        styleClass=\"hc-custom-timeline-event\"\n        [value]=\"eventsCustomized\"\n        layout=\"horizontal\"\n      >\n        <ng-template hcTemplate=\"opposite\" let-event>\n          <div class=\"hc-custom-opposite\" *ngIf=\"!isEmpty(event)\">\n            {{ event.status === 'LIGADO' ? 'PEDÁGIO LIGADO' : 'PEDÁGIO DESLIGADO' }}\n          </div>\n        </ng-template>\n        <ng-template hcTemplate=\"marker\" let-event let-last=\"last\">\n          <span\n            *ngIf=\"!last\"\n            class=\"hc-custom-marker\"\n            [style.backgroundColor]=\"event.color\"\n          >\n            <hc-icon [icon]=\"event.icon\" [style]=\"{ color: 'white' }\"></hc-icon>\n          </span>\n          <div *ngIf=\"last\" class=\"hc-custom-marker-last\"></div>\n        </ng-template>\n        <ng-template hcTemplate=\"connector\" let-event let-last=\"last\">\n          <div\n            *ngIf=\"!last\"\n            class=\"hc-timeline-event-connector\"\n            [ngStyle]=\"{\n              'background-color':\n                event.status === 'LIGADO' ? 'var(--primary-default)' : '#c8c8c8'\n            }\"\n          ></div>\n        </ng-template>\n        <ng-template hcTemplate=\"content\" let-event>\n          <div class=\"hc-custom-content\" *ngIf=\"event.description\">\n            <div>{{ event.user }}</div>\n            <div>\n              {{ event.dateInitial | date: 'dd/MM/yyyy' }} até\n              {{ event.dateEnd | date: 'dd/MM/yyyy' }}\n            </div>\n            <div style=\"margin-top: 1rem;\">\n              <span class=\"hc-custom-content-description\">Motivo:</span>\n              {{ event.description }}\n            </div>\n          </div>\n        </ng-template>\n      </hc-timeline>\n    </div>\n  </hc-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "eventsCustomized",
                    "defaultValue": "[\n    {\n      status: 'DESLIGADO',\n      dateInitial: new Date(),\n      dateEnd: new Date(),\n      user: 'Mileide Daiane E. Ribeiro',\n      description:\n        'Preencher com um motivo de no máximo 80 caracteres pra ter noção de espaçamento',\n      icon: 'power_settings_new',\n      color: '#c8c8c8',\n    },\n    {\n      status: 'LIGADO',\n      dateInitial: new Date(),\n      dateEnd: new Date(),\n      user: 'Mileide Daiane E. Ribeiro',\n      description:\n        'Preencher com um motivo de no máximo 80 caracteres pra ter noção de espaçamento',\n      icon: 'power_settings_new',\n      color: 'var(--primary-default)',\n    },\n    {\n      status: 'LIGADO',\n      dateInitial: new Date(),\n      dateEnd: new Date(),\n      user: 'Mileide Daiane E. Ribeiro',\n      description:\n        'Preencher com um motivo de no máximo 80 caracteres pra ter noção de espaçamento',\n      icon: 'power_settings_new',\n      color: 'var(--primary-default)',\n    },\n    {\n      status: 'LIGADO',\n      dateInitial: new Date(),\n      dateEnd: new Date(),\n      user: 'Mileide Daiane E. Ribeiro',\n      description:\n        'Preencher com um motivo de no máximo 80 caracteres pra ter noção de espaçamento',\n      icon: 'power_settings_new',\n      color: 'var(--primary-default)',\n    },\n    {\n      status: 'LIGADO',\n      dateInitial: new Date(),\n      dateEnd: new Date(),\n      user: 'Mileide Daiane E. Ribeiro',\n      description:\n        'Preencher com um motivo de no máximo 80 caracteres pra ter noção de espaçamento',\n      icon: 'power_settings_new',\n      color: 'var(--primary-default)',\n    },\n    {},\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "eventsYears",
                    "defaultValue": "[2020, 2021, 2022, 2023, '']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "isEmpty",
                    "defaultValue": "isEmpty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core'\n\nimport { isEmpty } from 'lodash'\n\n@Component({\n  selector: 'app-page-timeline',\n  template: `\n    <div class=\"hc-docs-title\">\n      <h2>Timeline</h2>\n      <p class=\"body1\">Timeline é a visualização de uma cadeia de eventos</p>\n    </div>\n    <div class=\"hc-docs-components\">\n      <hc-card>\n        <h5 style=\"margin-bottom: 1rem;\">Horizontal</h5>\n        <hc-timeline [value]=\"eventsYears\" layout=\"horizontal\">\n          <ng-template hcTemplate=\"content\" let-event>{{ event }}</ng-template>\n        </hc-timeline>\n\n        <h5 style=\"margin: 1rem 0\">Customizado</h5>\n        <div class=\"hc-wrapper-timeline\">\n          <hc-timeline\n            styleClass=\"hc-custom-timeline-event\"\n            [value]=\"eventsCustomized\"\n            layout=\"horizontal\"\n          >\n            <ng-template hcTemplate=\"opposite\" let-event>\n              <div class=\"hc-custom-opposite\" *ngIf=\"!isEmpty(event)\">\n                {{ event.status === 'LIGADO' ? 'PEDÁGIO LIGADO' : 'PEDÁGIO DESLIGADO' }}\n              </div>\n            </ng-template>\n            <ng-template hcTemplate=\"marker\" let-event let-last=\"last\">\n              <span\n                *ngIf=\"!last\"\n                class=\"hc-custom-marker\"\n                [style.backgroundColor]=\"event.color\"\n              >\n                <hc-icon [icon]=\"event.icon\" [style]=\"{ color: 'white' }\"></hc-icon>\n              </span>\n              <div *ngIf=\"last\" class=\"hc-custom-marker-last\"></div>\n            </ng-template>\n            <ng-template hcTemplate=\"connector\" let-event let-last=\"last\">\n              <div\n                *ngIf=\"!last\"\n                class=\"hc-timeline-event-connector\"\n                [ngStyle]=\"{\n                  'background-color':\n                    event.status === 'LIGADO' ? 'var(--primary-default)' : '#c8c8c8'\n                }\"\n              ></div>\n            </ng-template>\n            <ng-template hcTemplate=\"content\" let-event>\n              <div class=\"hc-custom-content\" *ngIf=\"event.description\">\n                <div>{{ event.user }}</div>\n                <div>\n                  {{ event.dateInitial | date: 'dd/MM/yyyy' }} até\n                  {{ event.dateEnd | date: 'dd/MM/yyyy' }}\n                </div>\n                <div style=\"margin-top: 1rem;\">\n                  <span class=\"hc-custom-content-description\">Motivo:</span>\n                  {{ event.description }}\n                </div>\n              </div>\n            </ng-template>\n          </hc-timeline>\n        </div>\n      </hc-card>\n    </div>\n  `,\n  styleUrls: ['page-timeline.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class PageTimelineComponent {\n  isEmpty = isEmpty\n\n  eventsYears = [2020, 2021, 2022, 2023, '']\n  eventsCustomized = [\n    {\n      status: 'DESLIGADO',\n      dateInitial: new Date(),\n      dateEnd: new Date(),\n      user: 'Mileide Daiane E. Ribeiro',\n      description:\n        'Preencher com um motivo de no máximo 80 caracteres pra ter noção de espaçamento',\n      icon: 'power_settings_new',\n      color: '#c8c8c8',\n    },\n    {\n      status: 'LIGADO',\n      dateInitial: new Date(),\n      dateEnd: new Date(),\n      user: 'Mileide Daiane E. Ribeiro',\n      description:\n        'Preencher com um motivo de no máximo 80 caracteres pra ter noção de espaçamento',\n      icon: 'power_settings_new',\n      color: 'var(--primary-default)',\n    },\n    {\n      status: 'LIGADO',\n      dateInitial: new Date(),\n      dateEnd: new Date(),\n      user: 'Mileide Daiane E. Ribeiro',\n      description:\n        'Preencher com um motivo de no máximo 80 caracteres pra ter noção de espaçamento',\n      icon: 'power_settings_new',\n      color: 'var(--primary-default)',\n    },\n    {\n      status: 'LIGADO',\n      dateInitial: new Date(),\n      dateEnd: new Date(),\n      user: 'Mileide Daiane E. Ribeiro',\n      description:\n        'Preencher com um motivo de no máximo 80 caracteres pra ter noção de espaçamento',\n      icon: 'power_settings_new',\n      color: 'var(--primary-default)',\n    },\n    {\n      status: 'LIGADO',\n      dateInitial: new Date(),\n      dateEnd: new Date(),\n      user: 'Mileide Daiane E. Ribeiro',\n      description:\n        'Preencher com um motivo de no máximo 80 caracteres pra ter noção de espaçamento',\n      icon: 'power_settings_new',\n      color: 'var(--primary-default)',\n    },\n    {},\n  ]\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-custom-timeline-event {\n  .hc-timeline-event {\n    width: 340px;\n    flex: none !important;\n\n    &:last-child {\n      flex: 0 !important;\n    }\n\n    .hc-timeline-event-connector {\n      height: 4px !important;\n      width: 100%;\n      background-color: var(--neutral-divider);\n      flex-grow: 1;\n      position: absolute;\n      z-index: -1;\n    }\n\n    .hc-timeline-event-content {\n      padding: 0 0 1.5rem 0 !important;\n    }\n  }\n}\n\n.hc-custom-opposite {\n  display: flex;\n  flex: 1;\n  justify-content: center;\n  margin-bottom: -8px;\n  font-size: 14px;\n  font-weight: bold;\n}\n\n.hc-custom-marker {\n  display: flex;\n  width: 2.5rem;\n  height: 2.5rem;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  z-index: 1;\n}\n\n.hc-custom-marker-last {\n  display: flex;\n  align-self: baseline;\n  margin-top: 21px;\n  width: 1rem;\n  height: 1rem;\n  border-radius: 50%;\n  background: var(--primary-default);\n}\n\n.hc-custom-content {\n  text-align: left;\n  display: flex;\n  flex-direction: column;\n  font-size: 14px;\n  width: 180px;\n  margin: auto;\n\n  .hc-custom-content-description {\n    font-weight: bold;\n  }\n}\n\n.hc-wrapper-timeline {\n  width: 100%;\n  overflow: auto;\n}\n",
                    "styleUrl": "page-timeline.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageToggleComponent",
            "id": "component-PageToggleComponent-74a86c87c0fea43cadbc441f0743dadf1d64bbf00981e68a2ee7f23b6961186775cf4a887390dd1f7d0c09a3dd0ddc0f63bbe76e0d477da50337a80257f4fa5c",
            "file": "src/app/modules/docs/table/page-toggle/page-toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "BaseTableService"
                }
            ],
            "selector": "app-page-toggle",
            "styleUrls": [],
            "styles": [],
            "template": "<hc-card>\n  <div\n    style=\"display: flex; justify-content: flex-end; width: 100%; margin-bottom: 1rem\"\n  >\n    <hc-button\n      icon=\"more_vert\"\n      theme=\"text\"\n      (click)=\"dropdown.toggle($event)\"\n    ></hc-button>\n    <hc-dropdown #dropdown [style]=\"{ width: '160px' }\">\n      <ng-template hcTemplate>\n        <div *ngFor=\"let col of baseTableService.cols\" style=\"margin: 1rem 1rem;\">\n          <hc-checkbox\n            [(ngModel)]=\"baseTableService.selectedColumns\"\n            name=\"groupproducts\"\n            [value]=\"col\"\n            [label]=\"col.header\"\n          ></hc-checkbox>\n        </div>\n      </ng-template>\n    </hc-dropdown>\n  </div>\n  <hc-table\n    hcData\n    hcPagination\n    hcSort\n    [columns]=\"baseTableService.selectedColumns\"\n    [value]=\"products\"\n    [responsive]=\"true\"\n  >\n    <ng-template hcTemplate=\"header\" let-columns>\n      <tr>\n        <th *ngFor=\"let col of columns\">{{ col.header }}</th>\n      </tr>\n    </ng-template>\n    <ng-template hcTemplate=\"body\" let-product let-columns=\"columns\">\n      <tr>\n        <td *ngFor=\"let col of columns\">{{ product[col.field] }}</td>\n      </tr>\n    </ng-template>\n  </hc-table>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "baseTableService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseTableService",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { IProduct, ProductsService } from './../../products.service'\n\nimport { BaseTableService } from 'src/app/common/base-table/base-table.service'\n\n@Component({\n  selector: 'app-page-toggle',\n  template: `\n    <hc-card>\n      <div\n        style=\"display: flex; justify-content: flex-end; width: 100%; margin-bottom: 1rem\"\n      >\n        <hc-button\n          icon=\"more_vert\"\n          theme=\"text\"\n          (click)=\"dropdown.toggle($event)\"\n        ></hc-button>\n        <hc-dropdown #dropdown [style]=\"{ width: '160px' }\">\n          <ng-template hcTemplate>\n            <div *ngFor=\"let col of baseTableService.cols\" style=\"margin: 1rem 1rem;\">\n              <hc-checkbox\n                [(ngModel)]=\"baseTableService.selectedColumns\"\n                name=\"groupproducts\"\n                [value]=\"col\"\n                [label]=\"col.header\"\n              ></hc-checkbox>\n            </div>\n          </ng-template>\n        </hc-dropdown>\n      </div>\n      <hc-table\n        hcData\n        hcPagination\n        hcSort\n        [columns]=\"baseTableService.selectedColumns\"\n        [value]=\"products\"\n        [responsive]=\"true\"\n      >\n        <ng-template hcTemplate=\"header\" let-columns>\n          <tr>\n            <th *ngFor=\"let col of columns\">{{ col.header }}</th>\n          </tr>\n        </ng-template>\n        <ng-template hcTemplate=\"body\" let-product let-columns=\"columns\">\n          <tr>\n            <td *ngFor=\"let col of columns\">{{ product[col.field] }}</td>\n          </tr>\n        </ng-template>\n      </hc-table>\n    </hc-card>\n  `,\n  providers: [BaseTableService],\n})\nexport class PageToggleComponent implements OnInit {\n  products: IProduct[] = []\n\n  constructor(\n    private productsService: ProductsService,\n    public baseTableService: BaseTableService\n  ) {}\n\n  ngOnInit(): void {\n    this.productsService.getProducts(1, 10).subscribe((response) => {\n      this.products = response.items\n      this.baseTableService.cols = [\n        { header: 'Code', field: 'code' },\n        { header: 'Name', field: 'name' },\n        { header: 'Category', field: 'category' },\n        { header: 'Quantity', field: 'quantity' },\n      ]\n      this.baseTableService._selectedColumns = this.baseTableService.cols\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "baseTableService",
                        "type": "BaseTableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseTableService",
                        "type": "BaseTableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-c82c7e2ecb522b77d213d8f90622691a3b46f77a8af63e079fd40715cff8176f22bb8eb8d8057bade216659bbed2ed27f44df49e8e969141ff863ea6f8dfdb0f",
            "file": "src/app/components/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-pagination",
            "styleUrls": [],
            "styles": [
                "\n      .wrapper-pagination {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      .wrapper-buttons {\n        display: flex;\n\n        button:first-child {\n          margin-left: 0;\n        }\n\n        button {\n          margin: 0 2px;\n        }\n      }\n\n      .current-report {\n        font-size: 14px;\n        color: var(--neutral-gray-dark);\n      }\n\n      .hc-highlight-pagination {\n        background-color: var(--primary-default);\n        color: var(--neutral-white);\n        border: 1px solid var(--primary-default);\n      }\n\n      .icon-size {\n        font-size: 18px;\n      }\n\n      button {\n        width: 32px;\n        height: 32px;\n        background-color: var(--neutral-white);\n        color: var(--neutral-black);\n        border: 1px solid var(--neutral-divider);\n        border-radius: 4px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        font-weight: 700;\n\n        &:disabled {\n          color: var(--neutral-divider);\n          cursor: default;\n          opacity: 0.7;\n        }\n      }\n    "
            ],
            "template": "<div class=\"wrapper-pagination\" aria-label=\"pagination\">\n  <div class=\"wrapper-buttons\">\n    <button\n      [disabled]=\"isFirstPage() || empty()\"\n      (click)=\"changePageToFirst($event)\"\n      aria-label=\"Button First Page\"\n      type=\"button\"\n    >\n      <span class=\"material-symbols-outlined icon-size\">\n        keyboard_double_arrow_left\n      </span>\n    </button>\n    <button\n      [disabled]=\"isFirstPage() || empty()\"\n      (click)=\"changePageToPrev($event)\"\n      aria-label=\"Button Page To Prev\"\n      type=\"button\"\n    >\n      <span class=\"material-symbols-outlined icon-size\">chevron_left</span>\n    </button>\n    <button\n      *ngFor=\"let pageLink of pageLinks\"\n      [ngClass]=\"{ 'hc-highlight-pagination': pageLink - 1 === getPage() }\"\n      (click)=\"onPageLinkClick($event, pageLink - 1)\"\n      [attr.aria-label]=\"'Page ' + pageLink\"\n      type=\"button\"\n    >\n      {{ pageLink }}\n    </button>\n    <button\n      [disabled]=\"isLastPage() || empty()\"\n      (click)=\"changePageToNext($event)\"\n      type=\"button\"\n      aria-label=\"Button Page To Next\"\n    >\n      <span class=\"material-symbols-outlined icon-size\">chevron_right</span>\n    </button>\n    <button\n      [disabled]=\"isLastPage() || empty()\"\n      (click)=\"changePageToLast($event)\"\n      type=\"button\"\n      aria-label=\"Button Last Page\"\n    >\n      <span class=\"material-symbols-outlined icon-size\">\n        keyboard_double_arrow_right\n      </span>\n    </button>\n  </div>\n  <div\n    *ngIf=\"showCurrentPageReport\"\n    class=\"current-report\"\n    aria-label=\"Current Report\"\n  >\n    {{ currentPageReport }}\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentPageReportTemplate",
                    "defaultValue": "'{showCurrentPage} of {totalPages}'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 162,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 192,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageLinkSize",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 158,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 157,
                    "type": "IPagination",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 159,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "showCurrentPageReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 161,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 160,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChangeEvent",
                    "defaultValue": "new EventEmitter<IPageChange>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 164,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_first",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "pageLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "paginationState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPaginationState",
                    "optional": false,
                    "description": "",
                    "line": 154
                }
            ],
            "methodsClass": [
                {
                    "name": "calculatePageLinkBoundaries",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePageToFirst",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePageToLast",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePageToNext",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changePageToPrev",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "empty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPage",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPageCount",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isFirstPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isLastPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 252,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageLinkClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showCurrentPage",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 323,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePageLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePaginationState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core'\n\nexport interface IPagination {\n  currentPage: number\n  itemCount: number\n  itemsPerPage: number\n  totalItems: number\n  totalPages: number\n}\n\ninterface IPaginationState {\n  page: number\n  pageCount: number\n  rows: number\n  first: number\n  totalRecords: number\n}\n\nexport interface IPageChange {\n  page: number\n  pageCount: number\n  first: number\n  rows: number\n}\n\n@Component({\n  selector: 'hc-pagination',\n  template: `\n    <div class=\"wrapper-pagination\" aria-label=\"pagination\">\n      <div class=\"wrapper-buttons\">\n        <button\n          [disabled]=\"isFirstPage() || empty()\"\n          (click)=\"changePageToFirst($event)\"\n          aria-label=\"Button First Page\"\n          type=\"button\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">\n            keyboard_double_arrow_left\n          </span>\n        </button>\n        <button\n          [disabled]=\"isFirstPage() || empty()\"\n          (click)=\"changePageToPrev($event)\"\n          aria-label=\"Button Page To Prev\"\n          type=\"button\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">chevron_left</span>\n        </button>\n        <button\n          *ngFor=\"let pageLink of pageLinks\"\n          [ngClass]=\"{ 'hc-highlight-pagination': pageLink - 1 === getPage() }\"\n          (click)=\"onPageLinkClick($event, pageLink - 1)\"\n          [attr.aria-label]=\"'Page ' + pageLink\"\n          type=\"button\"\n        >\n          {{ pageLink }}\n        </button>\n        <button\n          [disabled]=\"isLastPage() || empty()\"\n          (click)=\"changePageToNext($event)\"\n          type=\"button\"\n          aria-label=\"Button Page To Next\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">chevron_right</span>\n        </button>\n        <button\n          [disabled]=\"isLastPage() || empty()\"\n          (click)=\"changePageToLast($event)\"\n          type=\"button\"\n          aria-label=\"Button Last Page\"\n        >\n          <span class=\"material-symbols-outlined icon-size\">\n            keyboard_double_arrow_right\n          </span>\n        </button>\n      </div>\n      <div\n        *ngIf=\"showCurrentPageReport\"\n        class=\"current-report\"\n        aria-label=\"Current Report\"\n      >\n        {{ currentPageReport }}\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .wrapper-pagination {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      .wrapper-buttons {\n        display: flex;\n\n        button:first-child {\n          margin-left: 0;\n        }\n\n        button {\n          margin: 0 2px;\n        }\n      }\n\n      .current-report {\n        font-size: 14px;\n        color: var(--neutral-gray-dark);\n      }\n\n      .hc-highlight-pagination {\n        background-color: var(--primary-default);\n        color: var(--neutral-white);\n        border: 1px solid var(--primary-default);\n      }\n\n      .icon-size {\n        font-size: 18px;\n      }\n\n      button {\n        width: 32px;\n        height: 32px;\n        background-color: var(--neutral-white);\n        color: var(--neutral-black);\n        border: 1px solid var(--neutral-divider);\n        border-radius: 4px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        font-weight: 700;\n\n        &:disabled {\n          color: var(--neutral-divider);\n          cursor: default;\n          opacity: 0.7;\n        }\n      }\n    `,\n  ],\n})\nexport class PaginationComponent implements OnInit, OnChanges {\n  _first = 0\n\n  paginationState!: IPaginationState\n  pageLinks!: number[]\n\n  @Input() pagination?: IPagination\n  @Input() pageLinkSize = 5\n  @Input() rows = 0\n  @Input() totalRecords = 0\n  @Input() showCurrentPageReport!: boolean\n  @Input() currentPageReportTemplate = '{showCurrentPage} of {totalPages}'\n\n  @Output() pageChangeEvent = new EventEmitter<IPageChange>()\n\n  ngOnInit(): void {\n    this.updatePaginationState()\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['totalRecords']) {\n      this.updatePageLinks()\n      this.updatePaginationState()\n    }\n\n    if (changes['rows']) {\n      this.updatePageLinks()\n      this.updatePaginationState()\n    }\n\n    if (changes['pagination']) {\n      if (this.pagination) {\n        this.totalRecords = this.pagination.totalItems\n        this.rows = this.pagination.itemsPerPage\n      }\n\n      this.updatePageLinks()\n      this.updatePaginationState()\n    }\n  }\n\n  @Input() get first(): number {\n    return this._first\n  }\n\n  calculatePageLinkBoundaries(): number[] {\n    const numberOfPages = this.getPageCount()\n    const visiblePages = Math.min(this.pageLinkSize, numberOfPages)\n\n    // calculate range, keep current in middle if necessary\n    let start = Math.max(0, Math.ceil(this.getPage() - visiblePages / 2))\n    const end = Math.min(numberOfPages - 1, start + visiblePages - 1)\n\n    // check when approaching to last page\n    const delta = this.pageLinkSize - (end - start + 1)\n    start = Math.max(0, start - delta)\n\n    return [start, end]\n  }\n\n  updatePageLinks() {\n    this.pageLinks = []\n    let start: number\n    let end: number\n\n    if (this.pagination) {\n      start = 0\n      end = this.pagination.totalPages - 1\n    } else {\n      const boundaries = this.calculatePageLinkBoundaries()\n      start = boundaries[0]\n      end = boundaries[1]\n    }\n\n    for (let i = start; i <= end; i++) {\n      this.pageLinks.push(i + 1)\n    }\n  }\n\n  changePage(page: number) {\n    const pageCount = this.getPageCount()\n\n    if (page >= 0 && page < pageCount) {\n      this._first = this.rows * page\n      const state = {\n        page: page + 1,\n        pageCount,\n        first: this._first,\n        rows: this.rows,\n      }\n\n      this.updatePageLinks()\n      this.pageChangeEvent.emit(state)\n      this.updatePaginationState()\n    }\n  }\n\n  isFirstPage(): boolean {\n    return this.getPage() === 0\n  }\n\n  isLastPage(): boolean {\n    return this.getPage() === this.getPageCount() - 1\n  }\n\n  getPage(): number {\n    if (this.pagination) {\n      return this.pagination.currentPage - 1\n    } else {\n      return Math.floor(this.first / this.rows)\n    }\n  }\n\n  getPageCount() {\n    return Math.ceil(this.totalRecords / this.rows)\n  }\n\n  onPageLinkClick(event: MouseEvent, page: number) {\n    this.changePage(page)\n    event.preventDefault()\n  }\n\n  changePageToFirst(event: MouseEvent) {\n    if (!this.isFirstPage()) {\n      this.changePage(0)\n    }\n\n    event.preventDefault()\n  }\n\n  changePageToPrev(event: MouseEvent) {\n    this.changePage(this.getPage() - 1)\n    event.preventDefault()\n  }\n\n  changePageToNext(event: MouseEvent) {\n    this.changePage(this.getPage() + 1)\n    event.preventDefault()\n  }\n\n  changePageToLast(event: MouseEvent) {\n    if (!this.isLastPage()) {\n      this.changePage(this.getPageCount() - 1)\n    }\n\n    event.preventDefault()\n  }\n\n  updatePaginationState() {\n    this.paginationState = {\n      page: this.getPage(),\n      pageCount: this.getPageCount(),\n      rows: this.rows,\n      first: this.first,\n      totalRecords: this.totalRecords,\n    }\n  }\n\n  empty(): boolean {\n    return this.getPageCount() === 0\n  }\n\n  get currentPageReport() {\n    return this.currentPageReportTemplate\n      .replace('{showCurrentPage}', String(this.showCurrentPage()))\n      .replace('{totalPages}', String(this.getPageCount()))\n      .replace('{first}', String(this.totalRecords > 0 ? this._first + 1 : 0))\n      .replace('{last}', String(Math.min(this._first + this.rows, this.totalRecords)))\n      .replace('{rows}', String(this.rows))\n      .replace('{totalRecords}', String(this.totalRecords))\n  }\n\n  showCurrentPage() {\n    return this.getPageCount() > 0 ? this.getPage() + 1 : 0\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .wrapper-pagination {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n\n      .wrapper-buttons {\n        display: flex;\n\n        button:first-child {\n          margin-left: 0;\n        }\n\n        button {\n          margin: 0 2px;\n        }\n      }\n\n      .current-report {\n        font-size: 14px;\n        color: var(--neutral-gray-dark);\n      }\n\n      .hc-highlight-pagination {\n        background-color: var(--primary-default);\n        color: var(--neutral-white);\n        border: 1px solid var(--primary-default);\n      }\n\n      .icon-size {\n        font-size: 18px;\n      }\n\n      button {\n        width: 32px;\n        height: 32px;\n        background-color: var(--neutral-white);\n        color: var(--neutral-black);\n        border: 1px solid var(--neutral-divider);\n        border-radius: 4px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        font-weight: 700;\n\n        &:disabled {\n          color: var(--neutral-divider);\n          cursor: default;\n          opacity: 0.7;\n        }\n      }\n    \n",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "first": {
                    "name": "first",
                    "getSignature": {
                        "name": "first",
                        "type": "number",
                        "returnType": "number",
                        "line": 192
                    }
                },
                "currentPageReport": {
                    "name": "currentPageReport",
                    "getSignature": {
                        "name": "currentPageReport",
                        "type": "",
                        "returnType": "",
                        "line": 313
                    }
                }
            }
        },
        {
            "name": "PatientsComponent",
            "id": "component-PatientsComponent-20cd6474749fe5aa9d64893197517c1b9c77aee8f0f0c3c61c3a783dbb1113fcb3ad7fc35cf390288aa913f227197e12d6d014685b826e7100672099b0009975",
            "file": "src/app/modules/patients/patients/patients.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-patients",
            "styleUrls": [],
            "styles": [],
            "template": "<!-- <hc-table\n  *ngIf=\"tableBaseService.items.length\"\n  [checkbox]=\"true\"\n  [hcDtOptions]=\"DtOptions\"\n  [sort]=\"true\"\n  (sortColumnEvent)=\"tableBaseService.sort($event)\"\n></hc-table> -->\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "DtOptions",
                    "defaultValue": "{\n    columns: [\n      {\n        title: 'Name',\n        data: 'name',\n        sortableColumn: 'name',\n      },\n      {\n        title: 'Email',\n        data: 'email',\n        sortableColumn: 'email',\n      },\n      {\n        title: 'Age',\n        data: 'age',\n        sortableColumn: 'age',\n      },\n      {\n        title: 'Adress',\n        data: 'address',\n      },\n      {\n        title: 'Phone',\n        data: 'phone',\n      },\n      {\n        title: 'Status',\n        data: 'status',\n      },\n    ],\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({\n  selector: 'app-patients',\n  template: `\n    <!-- <hc-table\n      *ngIf=\"tableBaseService.items.length\"\n      [checkbox]=\"true\"\n      [hcDtOptions]=\"DtOptions\"\n      [sort]=\"true\"\n      (sortColumnEvent)=\"tableBaseService.sort($event)\"\n    ></hc-table> -->\n  `,\n})\nexport class PatientsComponent {\n  DtOptions = {\n    columns: [\n      {\n        title: 'Name',\n        data: 'name',\n        sortableColumn: 'name',\n      },\n      {\n        title: 'Email',\n        data: 'email',\n        sortableColumn: 'email',\n      },\n      {\n        title: 'Age',\n        data: 'age',\n        sortableColumn: 'age',\n      },\n      {\n        title: 'Adress',\n        data: 'address',\n      },\n      {\n        title: 'Phone',\n        data: 'phone',\n      },\n      {\n        title: 'Status',\n        data: 'status',\n      },\n    ],\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ProfileBackgroundComponent",
            "id": "component-ProfileBackgroundComponent-a51c28089f41d8694b77cb530455be07e6be71a4dde42d5291c89675044e81247c37922ae7457f90ea883b844f09fd59b5f9ec5997f173ba18fa59557a74c1dc",
            "file": "src/app/modules/user/components/profile-background/profile-background.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-profile-background",
            "styleUrls": [],
            "styles": [
                "\n      .hc-profile-background {\n        width: 100%;\n        height: 240px;\n        border-top-left-radius: 0.5rem;\n        border-top-right-radius: 0.5rem;\n        background-size: cover;\n      }\n    "
            ],
            "template": "<div\n  class=\"hc-profile-background\"\n  style=\"background-image: url()\"\n  [ngStyle]=\"style\"\n></div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'hc-profile-background',\n  template: `\n    <div\n      class=\"hc-profile-background\"\n      style=\"background-image: url()\"\n      [ngStyle]=\"style\"\n    ></div>\n  `,\n  styles: [\n    `\n      .hc-profile-background {\n        width: 100%;\n        height: 240px;\n        border-top-left-radius: 0.5rem;\n        border-top-right-radius: 0.5rem;\n        background-size: cover;\n      }\n    `,\n  ],\n})\nexport class ProfileBackgroundComponent implements AfterContentInit {\n  style!: { [key: string]: string }\n  @Input() image!: string\n\n  ngAfterContentInit(): void {\n    this.style = { backgroundImage: `url(${this.image})` }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-profile-background {\n        width: 100%;\n        height: 240px;\n        border-top-left-radius: 0.5rem;\n        border-top-right-radius: 0.5rem;\n        background-size: cover;\n      }\n    \n",
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-5a9e9b56ad24cd656862034587d259834b9ae1fd8db8e228a9c01722cef054c6d6248ea5bb3bc575a904faa0a7518e1fe2710a7453702910c6cdfbca05ed9c25",
            "file": "src/app/modules/user/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [
                "./profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfile",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "getProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\n\nimport { IProfile } from './../services/user.service'\nimport { UserService } from '../services/user.service'\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss'],\n})\nexport class ProfileComponent implements OnInit {\n  profile!: IProfile\n\n  constructor(private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.getProfile()\n  }\n\n  getProfile(): void {\n    this.userService.getProfile().subscribe((profile) => {\n      this.profile = profile\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-user-profile-container {\n  margin: 2rem;\n}\n\n.hc-user-profile-wrapper-cards {\n  display: grid;\n  grid-template-columns: 1.5fr 1fr;\n  gap: 2rem;\n}\n\n.hc-profile-link {\n  display: block;\n  text-decoration: none;\n  cursor: pointer;\n  color: var(--primary-default);\n  margin: 1.5rem 0;\n\n  &:hover {\n    color: var(--primary-dark);\n  }\n\n  &:first-child {\n    margin-top: 0;\n  }\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n}\n\n.hc-profile-contact-item {\n  margin: 1.5em 0;\n  display: flex;\n\n  &:first-child {\n    margin-top: 0;\n  }\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n\n  .hc-profile-contact-item-description {\n    margin-left: 0.5rem;\n  }\n}\n",
                    "styleUrl": "./profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"hc-user-profile-container\">\n  <h2 style=\"margin-bottom: 1.5rem\">User profile</h2>\n  <div class=\"hc-user-profile-wrapper-cards\">\n    <div>\n      <hc-card *ngIf=\"profile\">\n        <ng-template hcTemplate=\"header\">\n          <hc-profile-background\n            [image]=\"profile.profileBackgroundImage\"\n          ></hc-profile-background>\n        </ng-template>\n        <hc-avatar\n          [image]=\"profile.photo\"\n          [style]=\"{\n            width: '128px',\n            height: '128px',\n            'margin-top': '-106px',\n            'border': '4px solid var(--neutral-white)'\n          }\"\n          [circle]=\"true\"\n        ></hc-avatar>\n        <h5 style=\"margin-top: 12px; margin-bottom: 1rem\">{{ profile.name }}</h5>\n        <p class=\"body1\">{{ profile.description }}</p>\n      </hc-card>\n\n      <hc-card header=\"Website & social channel\" [style]=\"{ 'margin-top': '2rem' }\">\n        <div *ngIf=\"profile?.socialMedias\">\n          <div>\n            <a\n              [href]=\"profile.socialMedias.facebook\"\n              *ngIf=\"profile.socialMedias?.facebook\"\n              class=\"hc-profile-link\"\n            >\n              {{ profile.socialMedias.facebook | removeHttpUrl }}\n            </a>\n            <a\n              [href]=\"profile.socialMedias.instagram\"\n              *ngIf=\"profile.socialMedias?.instagram\"\n              class=\"hc-profile-link\"\n            >\n              {{ profile.socialMedias.instagram | removeHttpUrl }}\n            </a>\n            <a\n              [href]=\"profile.socialMedias.linkedin\"\n              *ngIf=\"profile.socialMedias?.linkedin\"\n              class=\"hc-profile-link\"\n            >\n              {{ profile.socialMedias.linkedin | removeHttpUrl }}\n            </a>\n            <a\n              [href]=\"profile.socialMedias.twitter\"\n              *ngIf=\"profile.socialMedias?.twitter\"\n              class=\"hc-profile-link\"\n            >\n              {{ profile.socialMedias.twitter | removeHttpUrl }}\n            </a>\n          </div>\n        </div>\n      </hc-card>\n      <hc-card\n        header=\"Contact Information\"\n        [style]=\"{ 'margin-top': '2rem' }\"\n        *ngIf=\"profile?.contact\"\n      >\n        <div class=\"hc-profile-contact-item\" *ngIf=\"profile.contact?.phone\">\n          <hc-icon icon=\"call\"></hc-icon>\n          <span class=\"hc-profile-contact-item-description\">\n            {{ profile.contact.phone | phone }}\n          </span>\n        </div>\n        <div class=\"hc-profile-contact-item\" *ngIf=\"profile.contact?.address\">\n          <hc-icon icon=\"person_pin_circle\"></hc-icon>\n          <span class=\"hc-profile-contact-item-description\">\n            {{ profile.contact.address.street }}, {{ profile.contact.address.number }} -\n            {{ profile.contact.address.city }} / {{ profile.contact.address.state }}\n          </span>\n        </div>\n      </hc-card>\n    </div>\n    <hc-card header=\"Events\"></hc-card>\n  </div>\n</div>\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-ff414e5d76536912e8390f4eab149114f686522acd2d0a8db729b9e56ef0de95f1242519a9690f50383decfbade695bd951d2c5dd75f1f057054c98a4bbfdfa5",
            "file": "src/app/modules/authentication/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "../scss/authentication.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    name: ['', [Validators.required]],\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required, PasswordStrengthValidator]],\n    terms: [true],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isVisiblePassword",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleVisibilityPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { FormBuilder, FormGroup, Validators } from '@angular/forms'\n\nimport { Component } from '@angular/core'\nimport { PasswordStrengthValidator } from 'src/app/utils/validations/password-strength/password-strength.validators'\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['../scss/authentication.scss'],\n})\nexport class RegisterComponent {\n  form: FormGroup = this.fb.group({\n    name: ['', [Validators.required]],\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required, PasswordStrengthValidator]],\n    terms: [true],\n  })\n\n  isVisiblePassword = false\n  submitted = false\n\n  constructor(private fb: FormBuilder) {}\n\n  toggleVisibilityPassword(): void {\n    this.isVisiblePassword = !this.isVisiblePassword\n  }\n\n  onSubmit({ value, valid }: FormGroup): void {\n    this.submitted = true\n    if (valid) {\n      console.log(value)\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n  display: grid;\n  grid-template-columns: 1.5fr 2fr;\n  height: 100vh;\n}\n\n.wrapper-form {\n  padding: 40px 96px;\n}\n\n.wrapper-section-page-not-found {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n}\n\n.title {\n  color: var(--neutral-black);\n}\n\n.description {\n  color: var(--neutral-gray-dark);\n}\n\n@mixin background {\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n}\n\n.background-login {\n  @include background;\n  background-image: url('/assets/imgs/login.jpg');\n}\n\n.background-register {\n  @include background;\n  background-image: url('/assets/imgs/register.jpg');\n}\n\n.background-404 {\n  @include background;\n  background-image: url('/assets/imgs/404.jpg');\n}\n",
                    "styleUrl": "../scss/authentication.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"container\">\n  <div class=\"wrapper-form\">\n    <h1 class=\"title\" style=\"margin-bottom: 12px\">Sign up</h1>\n    <p class=\"body1 description\" style=\"margin-bottom: 40px\">Create your account</p>\n    <form [formGroup]=\"form\" (submit)=\"onSubmit(form)\">\n      <hc-input\n        placeholder=\"Name\"\n        ariaLabel=\"name\"\n        formControlName=\"name\"\n        [submitted]=\"submitted\"\n      ></hc-input>\n      <hc-input\n        placeholder=\"Email address\"\n        ariaLabel=\"email\"\n        formControlName=\"email\"\n        type=\"email\"\n        [submitted]=\"submitted\"\n      ></hc-input>\n      <hc-input\n        placeholder=\"Password\"\n        ariaLabel=\"password\"\n        formControlName=\"password\"\n        [submitted]=\"submitted\"\n        [type]=\"isVisiblePassword ? 'text' : 'password'\"\n        [appendIcon]=\"isVisiblePassword ? 'visibility' : 'visibility_off'\"\n        (appendIconClickEvent)=\"toggleVisibilityPassword()\"\n      ></hc-input>\n      <hc-switch\n        ariaLabel=\"terms\"\n        formControlName=\"terms\"\n        label=\"I agree to the Terms and Policy\"\n      ></hc-switch>\n      <div style=\"margin-top: 40px; margin-bottom: 50px\">\n        <hc-button type=\"submit\" color=\"primary\" ariaLabel=\"sign up\">\n          <hc-icon\n            icon=\"login\"\n            [style]=\"{ 'margin-top': '4px', 'margin-right': '8px' }\"\n          ></hc-icon>\n          Sign up\n        </hc-button>\n      </div>\n    </form>\n    <div>\n      <span class=\"body2\">Have an account?</span>\n      <hc-link router=\"/auth/login\"> Sign in!</hc-link>\n    </div>\n  </div>\n  <div class=\"background-register\"></div>\n</div>\n"
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-b648e5b74abd2dee54b35481bb5e11ae635f318a8a988ef5cc3b746b46d3d3220e086ee66c76492008f616dc365b0a3c42dfad18fed3bc0475941f1810b6b6fb",
            "file": "src/app/components/search/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-search",
            "styleUrls": [],
            "styles": [
                "\n      .wrapper-input {\n        display: flex;\n        border: 1px solid var(--neutral-background);\n        border-radius: 2rem;\n        background-color: var(--neutral-white);\n        width: 100%;\n        padding: 0.8rem 1rem;\n      }\n\n      .hc-search-icon {\n        color: var(--neutral-gray-light);\n        margin-right: 0.5rem;\n      }\n\n      .hc-search-focus {\n        border: 1px solid var(--primary-default);\n      }\n\n      input {\n        width: 100%;\n        border: none;\n        font-size: 1rem;\n        color: var(--neutral-black);\n        outline: 0;\n\n        &::placeholder {\n          font-size: 1rem;\n          color: var(--neutral-gray-light);\n        }\n      }\n    "
            ],
            "template": "<form\n  class=\"wrapper-input\"\n  data-testid=\"search\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"style\"\n  [formGroup]=\"form\"\n>\n  <span class=\"material-symbols-outlined append-icon hc-search-icon\"> search </span>\n  <input\n    type=\"text\"\n    formControlName=\"search\"\n    role=\"search\"\n    [attr.placeholder]=\"placeholder\"\n    (focus)=\"onFocus()\"\n    (blur)=\"onBlur()\"\n  />\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "debounceTime",
                    "defaultValue": "400",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "IStyle",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onSearch",
                    "defaultValue": "new EventEmitter<string | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    search: [''],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "isFocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "searchSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 68
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core'\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms'\nimport { Subscription, debounceTime } from 'rxjs'\n\nimport { IStyle } from './../../common/models/style.model'\n\n@Component({\n  selector: 'hc-search',\n  template: `\n    <form\n      class=\"wrapper-input\"\n      data-testid=\"search\"\n      [ngClass]=\"classes\"\n      [ngStyle]=\"style\"\n      [formGroup]=\"form\"\n    >\n      <span class=\"material-symbols-outlined append-icon hc-search-icon\"> search </span>\n      <input\n        type=\"text\"\n        formControlName=\"search\"\n        role=\"search\"\n        [attr.placeholder]=\"placeholder\"\n        (focus)=\"onFocus()\"\n        (blur)=\"onBlur()\"\n      />\n    </form>\n  `,\n  styles: [\n    `\n      .wrapper-input {\n        display: flex;\n        border: 1px solid var(--neutral-background);\n        border-radius: 2rem;\n        background-color: var(--neutral-white);\n        width: 100%;\n        padding: 0.8rem 1rem;\n      }\n\n      .hc-search-icon {\n        color: var(--neutral-gray-light);\n        margin-right: 0.5rem;\n      }\n\n      .hc-search-focus {\n        border: 1px solid var(--primary-default);\n      }\n\n      input {\n        width: 100%;\n        border: none;\n        font-size: 1rem;\n        color: var(--neutral-black);\n        outline: 0;\n\n        &::placeholder {\n          font-size: 1rem;\n          color: var(--neutral-gray-light);\n        }\n      }\n    `,\n  ],\n})\nexport class SearchComponent implements OnInit, OnDestroy {\n  form: FormGroup = this.fb.group({\n    search: [''],\n  })\n  isFocus = false\n  searchSubscription?: Subscription\n\n  @Input() placeholder?: string\n  @Input() debounceTime = 400\n  @Input() style?: IStyle\n\n  @Output() onSearch = new EventEmitter<string | null>()\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.searchSubscription = this.search.valueChanges\n      .pipe(debounceTime(this.debounceTime))\n      .subscribe((value) => {\n        this.onSearch.emit(value)\n      })\n  }\n\n  get classes(): { [key: string]: boolean } {\n    return {\n      'hc-search-focus': this.isFocus,\n    }\n  }\n\n  get search(): FormControl {\n    return this.form.get('search') as FormControl\n  }\n\n  onFocus(): void {\n    this.isFocus = true\n  }\n\n  onBlur(): void {\n    this.isFocus = false\n  }\n\n  ngOnDestroy(): void {\n    if (this.searchSubscription) {\n      this.searchSubscription.unsubscribe()\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .wrapper-input {\n        display: flex;\n        border: 1px solid var(--neutral-background);\n        border-radius: 2rem;\n        background-color: var(--neutral-white);\n        width: 100%;\n        padding: 0.8rem 1rem;\n      }\n\n      .hc-search-icon {\n        color: var(--neutral-gray-light);\n        margin-right: 0.5rem;\n      }\n\n      .hc-search-focus {\n        border: 1px solid var(--primary-default);\n      }\n\n      input {\n        width: 100%;\n        border: none;\n        font-size: 1rem;\n        color: var(--neutral-black);\n        outline: 0;\n\n        &::placeholder {\n          font-size: 1rem;\n          color: var(--neutral-gray-light);\n        }\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 74,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 86
                    }
                },
                "search": {
                    "name": "search",
                    "getSignature": {
                        "name": "search",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 92
                    }
                }
            }
        },
        {
            "name": "SelectAllComponent",
            "id": "component-SelectAllComponent-84f1022ae50291c13f35721d4184611bf2024b15b32b732bfa2c370f9f793551a6f6cefe69bef5156c2de506e845a06efdf9b52082ea59f7f08bb7e5e76553f8",
            "file": "src/app/components/table/select-all.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-select-all",
            "styleUrls": [],
            "styles": [
                "\n      .wrapper-container {\n        display: flex;\n        align-items: center;\n      }\n\n      .wrapper-select-all {\n        background-color: var(--neutral-divider);\n        padding: 0.7rem;\n      }\n\n      .select-all-text {\n        color: var(--neutral-black);\n      }\n\n      .select-all-select {\n        color: var(--primary-default);\n        cursor: pointer;\n        font-weight: 700;\n        margin-left: 16px;\n      }\n\n      .wrapper-buttons {\n        margin: 0 0.5rem;\n      }\n    "
            ],
            "template": "<div class=\"wrapper-container\">\n  <div class=\"wrapper-select-all\" data-testid=\"Select All Component\">\n    <span\n      class=\"select-all-text\"\n      [attr.aria-label]=\"\n        selected.length || totalItems - deselected.length + ' of ' + totalItems\n      \"\n    >\n      {{ selected.length || totalItems - deselected.length }}\n      rows this page selected.\n    </span>\n    <span\n      class=\"select-all-select\"\n      (click)=\"onClick()\"\n      [attr.aria-label]=\"!selectAll ? 'select all' : 'clear selected'\"\n    >\n      <span *ngIf=\"!selectAll\">Select all the {{ totalItems }} rows</span>\n      <span *ngIf=\"selectAll\">Clear selected</span>\n    </span>\n  </div>\n  <div class=\"wrapper-buttons\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "deselected",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "selectAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean | null",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "totalItems",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core'\n\n@Component({\n  selector: 'hc-select-all',\n  template: `\n    <div class=\"wrapper-container\">\n      <div class=\"wrapper-select-all\" data-testid=\"Select All Component\">\n        <span\n          class=\"select-all-text\"\n          [attr.aria-label]=\"\n            selected.length || totalItems - deselected.length + ' of ' + totalItems\n          \"\n        >\n          {{ selected.length || totalItems - deselected.length }}\n          rows this page selected.\n        </span>\n        <span\n          class=\"select-all-select\"\n          (click)=\"onClick()\"\n          [attr.aria-label]=\"!selectAll ? 'select all' : 'clear selected'\"\n        >\n          <span *ngIf=\"!selectAll\">Select all the {{ totalItems }} rows</span>\n          <span *ngIf=\"selectAll\">Clear selected</span>\n        </span>\n      </div>\n      <div class=\"wrapper-buttons\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .wrapper-container {\n        display: flex;\n        align-items: center;\n      }\n\n      .wrapper-select-all {\n        background-color: var(--neutral-divider);\n        padding: 0.7rem;\n      }\n\n      .select-all-text {\n        color: var(--neutral-black);\n      }\n\n      .select-all-select {\n        color: var(--primary-default);\n        cursor: pointer;\n        font-weight: 700;\n        margin-left: 16px;\n      }\n\n      .wrapper-buttons {\n        margin: 0 0.5rem;\n      }\n    `,\n  ],\n})\nexport class SelectAllComponent {\n  @Input() selected: any[] = []\n  @Input() deselected: any[] = []\n  @Input() totalItems = 0\n  @Input() selectAll!: boolean | null\n\n  @Output() clickEvent = new EventEmitter()\n\n  onClick(): void {\n    this.clickEvent.emit()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .wrapper-container {\n        display: flex;\n        align-items: center;\n      }\n\n      .wrapper-select-all {\n        background-color: var(--neutral-divider);\n        padding: 0.7rem;\n      }\n\n      .select-all-text {\n        color: var(--neutral-black);\n      }\n\n      .select-all-select {\n        color: var(--primary-default);\n        cursor: pointer;\n        font-weight: 700;\n        margin-left: 16px;\n      }\n\n      .wrapper-buttons {\n        margin: 0 0.5rem;\n      }\n    \n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-147f323537a6c02670bd9c3092ca4dbae7063c627bc1ffc72945b358343d5a0e669d96fea6908c743276b0bc48076676aaec80330d9388b1fc74a92a725a470d",
            "file": "src/app/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SELECT_VALUE_ACCESSOR"
                }
            ],
            "selector": "hc-select",
            "styleUrls": [
                "select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ariaLabelledBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autoZIndex",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "baseZIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "dataKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 114,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "editable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideTransitionOptions",
                    "defaultValue": "'0.1s linear'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "T[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "scrollHeight",
                    "defaultValue": "'200px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectIcon",
                    "defaultValue": "'expand_more'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showClear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTransitionOptions",
                    "defaultValue": "'0.12s cubic-bezier(0, 0, 0.2, 1)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "IStyle",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter<{ originalEvent: Event; value: T | null }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "EventEmitter"
                },
                {
                    "name": "onClear",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "EventEmitter"
                },
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "EventEmitter"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "EventEmitter"
                },
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<AnimationEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "EventEmitter"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<AnimationEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "accessibleViewChild",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'in'"
                        }
                    ]
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 145,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HcConfig",
                    "optional": false,
                    "description": "",
                    "line": 146,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "containerViewChild",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container'"
                        }
                    ]
                },
                {
                    "name": "documentClickListener",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "documentResizeListener",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": " | null",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 147,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "focused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "id",
                    "defaultValue": "String(Date.now() + Math.floor(Math.random() * 100))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "itemsWrapper",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | HTMLDivElement | null",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "labelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "onModelTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "optionsToDisplay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "overlay",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLDivElement | null",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "overlayVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "preventDocumentDefault",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "preventModelTouched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 148,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scrollHandler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConnectedOverlayScrollHandler",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "selectedItemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<ISelectItem<T>>",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "selectedOption",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISelectItem<T> | T | null",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "selectedOptionUpdated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "methodsClass": [
                {
                    "name": "alignOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "appendOverlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "bindDocumentClickListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "bindDocumentResizeListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 363,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "bindScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 368,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findOption",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "opts",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T | null",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opts",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findOptionIndex",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "opts",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "opts",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOptionLabel",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOptionValue",
                    "args": [
                        {
                            "name": "option",
                            "type": "ISelectItem<T> | T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "ISelectItem<T> | T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isOutsideClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInputBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputFocus",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onItemClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOverlayAnimationEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 452,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOverlayAnimationStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 405,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOverlayHide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 396,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onWindowResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 357,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectItem",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "option",
                            "type": "ISelectItem<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "option",
                            "type": "ISelectItem<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unbindDocumentClickListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 332,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unbindDocumentResizeListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 383,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unbindScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 390,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSelectedOption",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { TemplateRef, ViewRef } from '@angular/core'\n\nimport { ObjectUtils } from './../../common/object-utils/object-utils'\nimport { AnimationEvent, animate, style, transition, trigger } from '@angular/animations'\nimport {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  Provider,\n  Renderer2,\n  ViewChild,\n  forwardRef,\n} from '@angular/core'\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms'\n\nimport { DomHandler } from './../../common/dom-handler/dom-handler'\nimport { HcConfig } from '../../common/hc-config/hc-config.service'\nimport { IStyle } from './../../common/models/style.model'\nimport { ZIndexUtils } from '../../common/z-index-utils/z-index-utils'\nimport {\n  ConnectedOverlayScrollHandler,\n  IConnectedOverlayScrollHandler,\n} from '../../common/connected-overlay-scroll-handler/connected-overlay-scroll-handler'\nimport { ISelectItem } from './select-item.component'\n\nexport const SELECT_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectComponent),\n  multi: true,\n}\n\n@Component({\n  selector: 'hc-select',\n  templateUrl: 'select.component.html',\n  styleUrls: ['select.component.scss'],\n  providers: [SELECT_VALUE_ACCESSOR],\n  animations: [\n    trigger('overlayAnimation', [\n      transition(':enter', [\n        style({ opacity: 0, transform: 'scaleY(0.8)' }),\n        animate('{{showTransitionParams}}'),\n      ]),\n      transition(':leave', [animate('{{hideTransitionParams}}', style({ opacity: 0 }))]),\n    ]),\n  ],\n})\nexport class SelectComponent<T> implements OnInit, ControlValueAccessor {\n  _options: T[] = []\n  private _disabled = false\n\n  documentClickListener: (() => void) | null = null\n  documentResizeListener: (() => void) | null = null\n  focused = false\n  id = String(Date.now() + Math.floor(Math.random() * 100))\n  itemsWrapper: HTMLElement | HTMLDivElement | null = null\n  labelId?: string\n  listId?: string\n  preventDocumentDefault = false\n  preventModelTouched = false\n  overlayVisible = false\n  overlay: HTMLDivElement | null = null\n  optionsToDisplay!: T[]\n  scrollHandler!: IConnectedOverlayScrollHandler\n  selectedOption: ISelectItem<T> | T | null = null\n  selectedItemTemplate!: TemplateRef<ISelectItem<T>>\n  selectedOptionUpdated = false\n  value: T | null = null\n\n  @Input() autoZIndex = true\n  @Input() appendTo: unknown\n  @Input() ariaLabel?: string\n  @Input() ariaLabelledBy?: string\n  @Input() baseZIndex = 0\n  @Input() dataKey?: string\n  @Input() editable = false\n  @Input() hideTransitionOptions = '0.1s linear'\n  @Input() labelTitle?: string\n  @Input() placeholder?: string\n  @Input() optionValue?: string\n  @Input() optionLabel?: string\n  @Input() showClear = false\n  @Input() showTransitionOptions = '0.12s cubic-bezier(0, 0, 0.2, 1)'\n  @Input() selectIcon = 'expand_more'\n  @Input() scrollHeight = '200px'\n  @Input() style?: IStyle\n\n  @Output() onBlur = new EventEmitter<Event>()\n  @Output() onClick = new EventEmitter<Event>()\n  @Output() onChange = new EventEmitter<{ originalEvent: Event; value: T | null }>()\n  @Output() onClear = new EventEmitter<Event>()\n  @Output() onFocus = new EventEmitter<Event>()\n  @Output() onHide = new EventEmitter<AnimationEvent>()\n  @Output() onShow = new EventEmitter<AnimationEvent>()\n\n  @ViewChild('container') containerViewChild!: ElementRef\n  @ViewChild('in') accessibleViewChild!: ElementRef\n\n  @Input() get options(): T[] {\n    return this._options\n  }\n\n  set options(val: T[]) {\n    this._options = val\n    this.optionsToDisplay = this._options\n    // this.updateSelectedOption(this.value)\n  }\n\n  @Input() get disabled(): boolean {\n    return this._disabled\n  }\n\n  set disabled(isDisabled: boolean) {\n    if (isDisabled) {\n      this.focused = false\n\n      if (this.overlayVisible) {\n        this.hide()\n      }\n    }\n\n    this._disabled = isDisabled\n\n    if (!(this.cd as ViewRef).destroyed) {\n      this.cd.detectChanges()\n    }\n  }\n\n  get isVisibleClearIcon(): boolean {\n    return this.value !== null && this.value !== '' && this.showClear && !this.disabled\n  }\n\n  get label(): string | null {\n    return this.selectedOption ? this.getOptionLabel(this.selectedOption) : null\n  }\n\n  onModelTouched!: () => void\n\n  constructor(\n    public cd: ChangeDetectorRef,\n    public config: HcConfig,\n    public el: ElementRef,\n    public renderer: Renderer2\n  ) {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onModelChange: (value: T | null) => void = () => {}\n\n  ngOnInit(): void {\n    this.optionsToDisplay = this.options\n    this.labelId = this.id + '_label'\n    this.listId = this.id + '_list'\n  }\n\n  writeValue(value: T | null): void {\n    this.value = value\n    if (value) {\n      this.updateSelectedOption(value)\n    }\n    this.cd.markForCheck()\n  }\n\n  registerOnChange(fn: (value: T | null) => void): void {\n    this.onModelChange = fn\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onModelTouched = fn\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled\n    this.cd.markForCheck()\n  }\n\n  getOptionLabel(option: any) {\n    return this.optionLabel\n      ? ObjectUtils.resolveFieldData(option, this.optionLabel)\n      : option && option.label !== undefined\n      ? option.label\n      : option\n  }\n\n  getOptionValue(option: ISelectItem<T> | T) {\n    return this.optionValue\n      ? ObjectUtils.resolveFieldData(option, this.optionValue)\n      : !this.optionLabel && option && (option as ISelectItem<T>).value !== undefined\n      ? (option as ISelectItem<T>).value\n      : option\n  }\n\n  onMouseClick(event: Event): void {\n    if (this.disabled) {\n      return\n    }\n\n    this.onClick.emit(event)\n\n    if (this.overlayVisible) {\n      this.hide()\n    } else {\n      this.show()\n    }\n  }\n\n  onInputFocus(event: Event) {\n    this.focused = true\n    this.onFocus.emit(event)\n  }\n\n  onInputBlur(event: Event): void {\n    this.focused = false\n    this.onBlur.emit(event)\n\n    if (!this.preventModelTouched) {\n      this.onModelTouched()\n    }\n\n    this.preventModelTouched = true\n  }\n\n  onItemClick(event: { originalEvent: Event; option: ISelectItem<T> }): void {\n    const option = event.option\n\n    this.selectItem(event.originalEvent, option)\n    this.accessibleViewChild.nativeElement.focus({ preventScroll: true })\n\n    setTimeout(() => {\n      this.hide()\n    }, 150)\n  }\n\n  selectItem(event: Event, option: ISelectItem<T>): void {\n    if (this.selectedOption !== option) {\n      this.selectedOption = option\n      this.value = this.getOptionValue(option)\n\n      this.onModelChange(this.value)\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.value,\n      })\n    }\n  }\n\n  show(): void {\n    this.overlayVisible = true\n    this.preventDocumentDefault = true\n    this.focused = true\n    this.cd.markForCheck()\n  }\n\n  hide(): void {\n    this.overlayVisible = false\n    this.focused = false\n    this.cd.markForCheck()\n  }\n\n  clear(event: Event): void {\n    this.value = null\n    this.onModelChange(this.value)\n    this.onChange.emit({ originalEvent: event, value: this.value })\n    this.onClear.emit(event)\n  }\n\n  findOptionIndex(value: T, opts: T[]): number {\n    let index = -1\n    if (opts) {\n      for (let i = 0; i < opts.length; i++) {\n        if (\n          (value === null && this.getOptionValue(opts[i]) === null) ||\n          ObjectUtils.equals(value, this.getOptionValue(opts[i]))\n        ) {\n          index = i\n          break\n        }\n      }\n    }\n\n    return index\n  }\n\n  findOption(value: T, opts: T[]): T | null {\n    const index = this.findOptionIndex(value, opts)\n    return index !== -1 ? opts[index] : null\n  }\n\n  updateSelectedOption(value: T): void {\n    this.selectedOption = this.findOption(value, this.optionsToDisplay)\n\n    if (this.selectedOption) {\n      this.value = this.getOptionValue(this.selectedOption)\n      this.onModelChange(this.value)\n    }\n\n    this.selectedOptionUpdated = true\n  }\n\n  appendOverlay(): void {\n    if (this.appendTo && this.overlay) {\n      if (this.appendTo === 'body') {\n        document.body.appendChild(this.overlay)\n      } else {\n        DomHandler.appendChild(this.overlay, this.appendTo as HTMLElement)\n      }\n    }\n  }\n\n  alignOverlay(): void {\n    if (this.overlay) {\n      if (this.appendTo) {\n        DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement)\n      } else {\n        DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement)\n      }\n    }\n  }\n\n  isOutsideClicked(event: Event): boolean {\n    return !(\n      this.el.nativeElement.isSameNode(event.target) ||\n      this.el.nativeElement.contains(event.target) ||\n      (this.overlay && this.overlay.contains(<Node>event.target))\n    )\n  }\n\n  unbindDocumentClickListener(): void {\n    if (this.documentClickListener) {\n      this.documentClickListener()\n      this.documentClickListener = null\n    }\n  }\n\n  bindDocumentClickListener(): void {\n    if (!this.documentClickListener) {\n      const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document'\n\n      this.documentClickListener = this.renderer.listen(\n        documentTarget,\n        'click',\n        (event) => {\n          if (!this.preventDocumentDefault && this.isOutsideClicked(event)) {\n            this.hide()\n            this.unbindDocumentClickListener()\n          }\n          this.preventDocumentDefault = false\n        }\n      )\n    }\n  }\n\n  onWindowResize(): void {\n    if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n      this.hide()\n    }\n  }\n\n  bindDocumentResizeListener(): void {\n    this.documentResizeListener = this.onWindowResize.bind(this)\n    window.addEventListener('resize', this.documentResizeListener)\n  }\n\n  bindScrollListener(): void {\n    if (!this.scrollHandler) {\n      this.scrollHandler = new ConnectedOverlayScrollHandler(\n        this.containerViewChild.nativeElement,\n        () => {\n          if (this.overlayVisible) {\n            this.hide()\n          }\n        }\n      )\n    }\n\n    this.scrollHandler.bindScrollListener()\n  }\n\n  unbindDocumentResizeListener(): void {\n    if (this.documentResizeListener) {\n      window.removeEventListener('resize', this.documentResizeListener)\n      this.documentResizeListener = null\n    }\n  }\n\n  unbindScrollListener(): void {\n    if (this.scrollHandler) {\n      this.scrollHandler.unbindScrollListener()\n    }\n  }\n\n  onOverlayHide(): void {\n    this.unbindDocumentClickListener()\n    this.unbindDocumentResizeListener()\n    this.unbindScrollListener()\n    this.overlay = null\n    this.itemsWrapper = null\n    this.onModelTouched()\n  }\n\n  onOverlayAnimationStart(event: AnimationEvent): void {\n    switch (event.toState) {\n      case 'visible':\n        this.overlay = event.element\n        if (this.overlay) {\n          this.itemsWrapper = DomHandler.findSingleElement(\n            this.overlay,\n            'hc-dropdown-items-wrapper'\n          )\n\n          this.appendOverlay()\n\n          if (this.autoZIndex) {\n            ZIndexUtils.set(\n              'overlay',\n              this.overlay,\n              this.baseZIndex + this.config.zIndex.overlay\n            )\n          }\n\n          this.alignOverlay()\n          this.bindDocumentClickListener()\n          this.bindDocumentResizeListener()\n          this.bindScrollListener()\n\n          if (this.options && this.options.length && this.itemsWrapper) {\n            const selectedListItem = DomHandler.findSingleElement(\n              this.itemsWrapper,\n              '.hc-select-item.hc-select-highlight'\n            )\n\n            if (selectedListItem) {\n              selectedListItem.scrollIntoView({ block: 'nearest', inline: 'center' })\n            }\n          }\n\n          this.onShow.emit(event)\n        }\n        break\n\n      case 'void':\n        this.onOverlayHide()\n        this.onHide.emit(event)\n        break\n    }\n  }\n\n  onOverlayAnimationEnd(event: AnimationEvent): void {\n    switch (event.toState) {\n      case 'void':\n        ZIndexUtils.clear(event.element)\n        break\n    }\n  }\n\n  get containerClasses() {\n    return {\n      ['hc-select']: true,\n      ['hc-select-clearable']: this.showClear && !this.disabled,\n      ['hc-select-open']: this.overlayVisible,\n      ['hc-select-focused']: this.focused,\n      ['hc-select-disabled']: this.disabled,\n    }\n  }\n\n  get placeholderClasses() {\n    return {\n      ['hc-select-label']: true,\n      ['hc-select-inputtext']: true,\n      ['hc-select-placeholder']: true,\n      ['hc-select-placeholder-empty']:\n        this.placeholder === null ||\n        this.placeholder === undefined ||\n        this.placeholder?.length === 0,\n    }\n  }\n\n  get labelClasses() {\n    return {\n      ['hc-select-label']: true,\n      ['hc-select-inputtext']: true,\n    }\n  }\n\n  get labelTitleClasses() {\n    return {\n      ['hc-select-label-title']: true,\n      ['hc-select-label-title-focus']: this.focused,\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-select {\n  display: inline-flex;\n  cursor: pointer;\n  position: relative;\n  user-select: none;\n  background-color: var(--neutral-white);\n  border: 1px solid var(--neutral-gray);\n  transition: background-color 0.2s, color 0.2s, border-color 0.2s, box-shadow 0.2s;\n  border-radius: 6px;\n  color: var(--neutral-black);\n  height: 50px;\n\n  &:not(.hc-select-disabled):hover {\n    border-color: var(--primary-light);\n\n    .hc-select-placeholder {\n      color: var(--primary-hover);\n    }\n\n    .hc-select-trigger {\n      color: var(--primary-hover);\n    }\n  }\n\n  &.hc-select-clearable {\n    .hc-select-label {\n      padding-right: 1.75rem;\n    }\n  }\n\n  .hc-select-label {\n    display: block;\n    white-space: nowrap;\n    overflow: hidden;\n    flex: 1 1 auto;\n    width: 1%;\n    text-overflow: ellipsis;\n    cursor: pointer;\n\n    &.hc-select-placeholder {\n      color: var(--neutral-gray);\n    }\n  }\n\n  .hc-select-panel {\n    min-width: 100%;\n\n    .hc-select-items {\n      padding: 0.75rem 0;\n    }\n  }\n}\n\n.hc-select-placeholder-empty {\n  overflow: hidden;\n  visibility: hidden;\n}\n\n.hc-select-disabled {\n  background: var(--neutral-background);\n  border-color: var(--neutral-divider);\n  cursor: initial;\n\n  .hc-select-label.hc-select-placeholder {\n    color: var(--neutral-gray-lighter);\n    cursor: initial;\n  }\n\n  .hc-select-trigger-icon {\n    color: var(--neutral-divider);\n  }\n}\n\n.hc-select-hidden-accessible {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.hc-select-inputtext {\n  font-size: 1rem;\n  padding: 0.75rem;\n  transition: background-color 0.2s, color 0.2s, border-color 0.2s, box-shadow 0.2s;\n  appearance: none;\n  border-radius: 6px;\n}\n\n.hc-select-trigger {\n  background: transparent;\n  color: var(--neutral-gray);\n  width: 3rem;\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n}\n\n.hc-select-panel {\n  position: absolute;\n  top: 0;\n  left: 0;\n  color: var(--neutral-black);\n  background: var(--neutral-white);\n  border: 0 none;\n  border-radius: 6px;\n  box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%);\n}\n\n.hc-select-items-wrapper {\n  overflow: auto;\n}\n\n.hc-select-items {\n  margin: 0;\n  list-style-type: none;\n}\n\n.hc-select-item {\n  margin: 0;\n  padding: 0.75rem 1.25rem;\n  border: 0 none;\n  background: transparent;\n  transition: box-shadow 0.2s;\n  border-radius: 0;\n  cursor: pointer;\n  white-space: nowrap;\n  position: relative;\n  overflow: hidden;\n\n  &:not(.hc-select-item-highlight):not(.hc-select-disabled):hover {\n    color: var(--primary-default);\n    background: var(--primary-lightest);\n  }\n}\n\n.hc-select-focused {\n  &:not(.hc-select-disabled) {\n    border-color: var(--primary-default) !important;\n\n    .hc-select-placeholder {\n      color: var(--primary-default) !important;\n    }\n\n    .hc-select-trigger {\n      color: var(--primary-default) !important;\n    }\n  }\n}\n\n.hc-select-item-highlight {\n  background-color: var(--primary-default);\n  color: var(--neutral-white);\n}\n\n.hc-select-label-title {\n  display: block;\n  color: var(--neutral-gray);\n  margin-bottom: 6px;\n}\n\n.hc-select-label-title-focus {\n  color: var(--primary-default);\n}\n",
                    "styleUrl": "select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "HcConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 142,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "HcConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "T[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 108,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "T[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "options",
                        "type": "[]",
                        "returnType": "T[]",
                        "line": 104
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "isDisabled",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 118,
                        "jsdoctags": [
                            {
                                "name": "isDisabled",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 114
                    }
                },
                "isVisibleClearIcon": {
                    "name": "isVisibleClearIcon",
                    "getSignature": {
                        "name": "isVisibleClearIcon",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 134
                    }
                },
                "label": {
                    "name": "label",
                    "getSignature": {
                        "name": "label",
                        "type": "",
                        "returnType": "string | null",
                        "line": 138
                    }
                },
                "containerClasses": {
                    "name": "containerClasses",
                    "getSignature": {
                        "name": "containerClasses",
                        "type": "",
                        "returnType": "",
                        "line": 460
                    }
                },
                "placeholderClasses": {
                    "name": "placeholderClasses",
                    "getSignature": {
                        "name": "placeholderClasses",
                        "type": "",
                        "returnType": "",
                        "line": 470
                    }
                },
                "labelClasses": {
                    "name": "labelClasses",
                    "getSignature": {
                        "name": "labelClasses",
                        "type": "",
                        "returnType": "",
                        "line": 482
                    }
                },
                "labelTitleClasses": {
                    "name": "labelTitleClasses",
                    "getSignature": {
                        "name": "labelTitleClasses",
                        "type": "",
                        "returnType": "",
                        "line": 489
                    }
                }
            },
            "templateData": "<div style=\"display: flex; flex-direction: column\">\n  <label [ngClass]=\"labelTitleClasses\" [attr.for]=\"id\" *ngIf=\"labelTitle\">\n    {{ labelTitle }}\n  </label>\n  <div\n    #container\n    [ngClass]=\"containerClasses\"\n    (click)=\"onMouseClick($event)\"\n    [style]=\"style\"\n  >\n    <div class=\"hc-select-hidden-accessible\">\n      <input\n        #in\n        type=\"text\"\n        readonly\n        role=\"combobox\"\n        aria-haspopup=\"listbox\"\n        [attr.id]=\"id\"\n        [disabled]=\"disabled\"\n        [attr.placeholder]=\"placeholder\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.aria-expanded]=\"false\"\n        [attr.aria-labelledby]=\"ariaLabelledBy\"\n        [attr.aria-activedescendant]=\"overlayVisible ? labelId : null\"\n        (blur)=\"onInputBlur($event)\"\n        (focus)=\"onInputFocus($event)\"\n      />\n    </div>\n    <span [attr.id]=\"labelId\" *ngIf=\"label !== null\" [ngClass]=\"labelClasses\">\n      <ng-container *ngIf=\"!selectedItemTemplate\">{{ label || 'empty' }}</ng-container>\n      <ng-container\n        *ngTemplateOutlet=\"selectedItemTemplate; context: { $implicit: selectedOption }\"\n      ></ng-container>\n    </span>\n    <span [ngClass]=\"placeholderClasses\" *ngIf=\"!editable && label === null\">\n      {{ placeholder || 'empty' }}\n    </span>\n    <i\n      class=\"hc-select-clear-icon\"\n      (click)=\"clear($event)\"\n      *ngIf=\"isVisibleClearIcon\"\n    ></i>\n    <div\n      role=\"button\"\n      class=\"hc-select-trigger\"\n      aria-label=\"select trigger\"\n      aria-haspopup=\"listbox\"\n      [attr.aria-expanded]=\"overlayVisible\"\n    >\n      <span class=\"hc-select-trigger-icon material-symbols-outlined\">\n        {{ selectIcon }}\n      </span>\n    </div>\n    <div\n      *ngIf=\"overlayVisible\"\n      class=\"hc-select-panel\"\n      [@overlayAnimation]=\"{\n        value: 'visible',\n        params: {\n          showTransitionParams: showTransitionOptions,\n          hideTransitionParams: hideTransitionOptions\n        }\n      }\"\n      (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\"\n      (@overlayAnimation.done)=\"onOverlayAnimationEnd($event)\"\n    >\n      <div class=\"hc-select-items-wrapper\" [style.max-height]=\"scrollHeight || 'auto'\">\n        <ng-container>\n          <ng-container\n            *ngTemplateOutlet=\"\n              buildInItems;\n              context: { $implicit: optionsToDisplay, options: {} }\n            \"\n          ></ng-container>\n        </ng-container>\n\n        <ng-template #buildInItems let-items let-scrollerOptions=\"options\">\n          <ul\n            #items\n            class=\"hc-select-items\"\n            role=\"listbox\"\n            [attr.id]=\"listId\"\n            [ngClass]=\"scrollerOptions.contentStyleClass\"\n            [style]=\"scrollerOptions.contentStyle\"\n          >\n            <ng-container\n              *ngTemplateOutlet=\"\n                itemslist;\n                context: { $implicit: items, selectedOption: selectedOption }\n              \"\n            ></ng-container>\n            <ng-template #itemslist let-options let-selectedOption=\"selectedOption\">\n              <ng-template ngFor let-option let-i=\"index\" [ngForOf]=\"options\">\n                <hc-select-item\n                  [option]=\"option\"\n                  [label]=\"getOptionLabel(option)\"\n                  [selected]=\"selectedOption === option\"\n                  (onClick)=\"onItemClick($event)\"\n                ></hc-select-item>\n              </ng-template>\n            </ng-template>\n          </ul>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SelectionComponent",
            "id": "component-SelectionComponent-550dab445303c7099102839c512272dea45b10a1853bcdd8e0e71d9c991a3e6ccafff6059169094c55802b3537a97289102e706cf1e9317e45a5c8187de532fb",
            "file": "src/app/modules/docs/table/selection/selection.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "BaseTableService"
                }
            ],
            "selector": "app-selection",
            "styleUrls": [],
            "styles": [],
            "template": "<hc-card>\n  <hc-table\n    hcSelect\n    hcData\n    hcPagination\n    dataKey=\"code\"\n    [value]=\"products\"\n    [responsive]=\"true\"\n    [(selection)]=\"selectedProducts\"\n    [rowSelectable]=\"isRowSelectable\"\n    [selectionPageOnly]=\"true\"\n    [paginator]=\"true\"\n    [pagination]=\"pagination\"\n    (pageEvent)=\"baseTableService.changePage($event)\"\n  >\n    <ng-template hcTemplate=\"header\">\n      <tr>\n        <th>\n          <hc-table-header-checkbox\n            ariaLabel=\"checkbox header\"\n          ></hc-table-header-checkbox>\n        </th>\n        <th>Code</th>\n        <th>Name</th>\n        <th>Category</th>\n        <th>Quantity</th>\n      </tr>\n    </ng-template>\n    <ng-template hcTemplate=\"body\" let-product>\n      <tr>\n        <td>\n          <hc-table-check-box\n            [value]=\"product\"\n            [disabled]=\"isInStock(product)\"\n            [ariaLabel]=\"'checkbox-' + product.id\"\n          ></hc-table-check-box>\n        </td>\n        <td>{{ product.code }}</td>\n        <td>{{ product.name }}</td>\n        <td>{{ product.category }}</td>\n        <td>{{ product.quantity }}</td>\n      </tr>\n    </ng-template>\n  </hc-table>\n</hc-card>\n<button (click)=\"onShow()\">show</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "baseTableService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseTableService",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMeta",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "selectedProducts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isInStock",
                    "args": [
                        {
                            "name": "data",
                            "type": "IProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isRowSelectable",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { IProduct, ProductsService } from '../../products.service'\n\nimport { ActivatedRoute } from '@angular/router'\nimport { BaseTableService } from 'src/app/common/base-table/base-table.service'\nimport { IMeta } from 'src/app/models/pagination.model'\n\n@Component({\n  selector: 'app-selection',\n  template: `\n    <hc-card>\n      <hc-table\n        hcSelect\n        hcData\n        hcPagination\n        dataKey=\"code\"\n        [value]=\"products\"\n        [responsive]=\"true\"\n        [(selection)]=\"selectedProducts\"\n        [rowSelectable]=\"isRowSelectable\"\n        [selectionPageOnly]=\"true\"\n        [paginator]=\"true\"\n        [pagination]=\"pagination\"\n        (pageEvent)=\"baseTableService.changePage($event)\"\n      >\n        <ng-template hcTemplate=\"header\">\n          <tr>\n            <th>\n              <hc-table-header-checkbox\n                ariaLabel=\"checkbox header\"\n              ></hc-table-header-checkbox>\n            </th>\n            <th>Code</th>\n            <th>Name</th>\n            <th>Category</th>\n            <th>Quantity</th>\n          </tr>\n        </ng-template>\n        <ng-template hcTemplate=\"body\" let-product>\n          <tr>\n            <td>\n              <hc-table-check-box\n                [value]=\"product\"\n                [disabled]=\"isInStock(product)\"\n                [ariaLabel]=\"'checkbox-' + product.id\"\n              ></hc-table-check-box>\n            </td>\n            <td>{{ product.code }}</td>\n            <td>{{ product.name }}</td>\n            <td>{{ product.category }}</td>\n            <td>{{ product.quantity }}</td>\n          </tr>\n        </ng-template>\n      </hc-table>\n    </hc-card>\n    <button (click)=\"onShow()\">show</button>\n  `,\n  providers: [BaseTableService],\n})\nexport class SelectionComponent implements OnInit {\n  products: IProduct[] = []\n  pagination!: IMeta\n\n  selectedProducts: IProduct[] = []\n\n  constructor(\n    private productsService: ProductsService,\n    public baseTableService: BaseTableService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(() => {\n      this.getProducts()\n    })\n  }\n\n  getProducts(): void {\n    this.productsService\n      .getProducts(\n        this.baseTableService.page,\n        this.baseTableService.limit,\n        this.baseTableService.sortColumn,\n        this.baseTableService.sortDirection\n      )\n      .subscribe((response) => {\n        this.products = response.items\n        this.pagination = response.meta\n      })\n  }\n\n  onShow() {\n    console.log(this.selectedProducts)\n  }\n\n  isRowSelectable(event: { data: IProduct; index: number }) {\n    if (event.data.quantity < 5) {\n      return false\n    }\n    return true\n  }\n\n  isInStock(data: IProduct): boolean {\n    return data.quantity < 5\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "baseTableService",
                        "type": "BaseTableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseTableService",
                        "type": "BaseTableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SelectItemComponent",
            "id": "component-SelectItemComponent-6eb80cf3d468ddfea7e8a971f195422776f33841abc48fffac6e87c4c416216a7cbe9990e78d28516c17889ee7e6441d6314e72d41175df22cad332053ea2f39",
            "file": "src/app/components/select/select-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-select-item",
            "styleUrls": [
                "select.component.scss"
            ],
            "styles": [],
            "template": "<li\n  role=\"option\"\n  [id]=\"selected ? 'hc-select-highlight-option' : ''\"\n  [attr.aria-label]=\"label\"\n  [attr.aria-selected]=\"selected\"\n  [ngClass]=\"classes\"\n  (click)=\"onOptionClick($event)\"\n>\n  <span *ngIf=\"!template\">{{ label || 'empty' }}</span>\n  <ng-container\n    *ngTemplateOutlet=\"template; context: { $implicit: option }\"\n  ></ng-container>\n</li>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "option",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "ISelectItem<T>",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "TemplateRef<HTMLElement>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<{ originalEvent: Event; option: ISelectItem<T> }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onOptionClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core'\n\nexport interface ISelectItem<T> {\n  label?: string\n  value?: T\n  styleClass?: string\n  icon?: string\n  title?: string\n  disabled?: boolean\n}\n\n@Component({\n  selector: 'hc-select-item',\n  template: `\n    <li\n      role=\"option\"\n      [id]=\"selected ? 'hc-select-highlight-option' : ''\"\n      [attr.aria-label]=\"label\"\n      [attr.aria-selected]=\"selected\"\n      [ngClass]=\"classes\"\n      (click)=\"onOptionClick($event)\"\n    >\n      <span *ngIf=\"!template\">{{ label || 'empty' }}</span>\n      <ng-container\n        *ngTemplateOutlet=\"template; context: { $implicit: option }\"\n      ></ng-container>\n    </li>\n  `,\n  styleUrls: ['select.component.scss'],\n})\nexport class SelectItemComponent<T> {\n  @Input() label?: string\n  @Input() selected = false\n  @Input() option!: ISelectItem<T>\n  @Input() template!: TemplateRef<HTMLElement>\n\n  @Output() onClick = new EventEmitter<{ originalEvent: Event; option: ISelectItem<T> }>()\n\n  onOptionClick(event: Event) {\n    this.onClick.emit({ originalEvent: event, option: this.option })\n  }\n\n  get classes() {\n    return {\n      ['hc-select-item']: true,\n      ['hc-select-item-highlight']: this.selected,\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-select {\n  display: inline-flex;\n  cursor: pointer;\n  position: relative;\n  user-select: none;\n  background-color: var(--neutral-white);\n  border: 1px solid var(--neutral-gray);\n  transition: background-color 0.2s, color 0.2s, border-color 0.2s, box-shadow 0.2s;\n  border-radius: 6px;\n  color: var(--neutral-black);\n  height: 50px;\n\n  &:not(.hc-select-disabled):hover {\n    border-color: var(--primary-light);\n\n    .hc-select-placeholder {\n      color: var(--primary-hover);\n    }\n\n    .hc-select-trigger {\n      color: var(--primary-hover);\n    }\n  }\n\n  &.hc-select-clearable {\n    .hc-select-label {\n      padding-right: 1.75rem;\n    }\n  }\n\n  .hc-select-label {\n    display: block;\n    white-space: nowrap;\n    overflow: hidden;\n    flex: 1 1 auto;\n    width: 1%;\n    text-overflow: ellipsis;\n    cursor: pointer;\n\n    &.hc-select-placeholder {\n      color: var(--neutral-gray);\n    }\n  }\n\n  .hc-select-panel {\n    min-width: 100%;\n\n    .hc-select-items {\n      padding: 0.75rem 0;\n    }\n  }\n}\n\n.hc-select-placeholder-empty {\n  overflow: hidden;\n  visibility: hidden;\n}\n\n.hc-select-disabled {\n  background: var(--neutral-background);\n  border-color: var(--neutral-divider);\n  cursor: initial;\n\n  .hc-select-label.hc-select-placeholder {\n    color: var(--neutral-gray-lighter);\n    cursor: initial;\n  }\n\n  .hc-select-trigger-icon {\n    color: var(--neutral-divider);\n  }\n}\n\n.hc-select-hidden-accessible {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.hc-select-inputtext {\n  font-size: 1rem;\n  padding: 0.75rem;\n  transition: background-color 0.2s, color 0.2s, border-color 0.2s, box-shadow 0.2s;\n  appearance: none;\n  border-radius: 6px;\n}\n\n.hc-select-trigger {\n  background: transparent;\n  color: var(--neutral-gray);\n  width: 3rem;\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n}\n\n.hc-select-panel {\n  position: absolute;\n  top: 0;\n  left: 0;\n  color: var(--neutral-black);\n  background: var(--neutral-white);\n  border: 0 none;\n  border-radius: 6px;\n  box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%);\n}\n\n.hc-select-items-wrapper {\n  overflow: auto;\n}\n\n.hc-select-items {\n  margin: 0;\n  list-style-type: none;\n}\n\n.hc-select-item {\n  margin: 0;\n  padding: 0.75rem 1.25rem;\n  border: 0 none;\n  background: transparent;\n  transition: box-shadow 0.2s;\n  border-radius: 0;\n  cursor: pointer;\n  white-space: nowrap;\n  position: relative;\n  overflow: hidden;\n\n  &:not(.hc-select-item-highlight):not(.hc-select-disabled):hover {\n    color: var(--primary-default);\n    background: var(--primary-lightest);\n  }\n}\n\n.hc-select-focused {\n  &:not(.hc-select-disabled) {\n    border-color: var(--primary-default) !important;\n\n    .hc-select-placeholder {\n      color: var(--primary-default) !important;\n    }\n\n    .hc-select-trigger {\n      color: var(--primary-default) !important;\n    }\n  }\n}\n\n.hc-select-item-highlight {\n  background-color: var(--primary-default);\n  color: var(--neutral-white);\n}\n\n.hc-select-label-title {\n  display: block;\n  color: var(--neutral-gray);\n  margin-bottom: 6px;\n}\n\n.hc-select-label-title-focus {\n  color: var(--primary-default);\n}\n",
                    "styleUrl": "select.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-81e2c54aeb57de289b859d20531d9842a320642d4c3c67b90419fe5a110dce338bba3a5619a2dfe658ee74853412f7c08b50e49f46651c983fe89b3d54d96fe4",
            "file": "src/app/components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-sidebar",
            "styleUrls": [],
            "styles": [
                "\n      .hc-sidebar-content {\n        position: relative;\n        overflow-y: auto;\n      }\n\n      .hc-sidebar {\n        position: sticky;\n        transition: transform 0.3s;\n        display: flex;\n        flex-direction: column;\n        background-color: var(--neutral-white);\n        box-shadow: 4px 0px 16px rgba(16, 30, 115, 0.08);\n      }\n\n      .hc-sidebar-left {\n        top: 0;\n        left: 0;\n        width: 256px;\n        height: 100vh;\n      }\n    "
            ],
            "template": "<div #container class=\"hc-sidebar hc-sidebar-left\">\n  <div class=\"hc-sidebar-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({\n  selector: 'hc-sidebar',\n  template: `\n    <div #container class=\"hc-sidebar hc-sidebar-left\">\n      <div class=\"hc-sidebar-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .hc-sidebar-content {\n        position: relative;\n        overflow-y: auto;\n      }\n\n      .hc-sidebar {\n        position: sticky;\n        transition: transform 0.3s;\n        display: flex;\n        flex-direction: column;\n        background-color: var(--neutral-white);\n        box-shadow: 4px 0px 16px rgba(16, 30, 115, 0.08);\n      }\n\n      .hc-sidebar-left {\n        top: 0;\n        left: 0;\n        width: 256px;\n        height: 100vh;\n      }\n    `,\n  ],\n})\nexport class SidebarComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-sidebar-content {\n        position: relative;\n        overflow-y: auto;\n      }\n\n      .hc-sidebar {\n        position: sticky;\n        transition: transform 0.3s;\n        display: flex;\n        flex-direction: column;\n        background-color: var(--neutral-white);\n        box-shadow: 4px 0px 16px rgba(16, 30, 115, 0.08);\n      }\n\n      .hc-sidebar-left {\n        top: 0;\n        left: 0;\n        width: 256px;\n        height: 100vh;\n      }\n    \n"
        },
        {
            "name": "SkeletonComponent",
            "id": "component-SkeletonComponent-42d56275587499f2bd016e9aa193a75f785313285df28cb9e65064f374f0f212b2f7b854a05d3104543ac1ff0016ee4cd228f69ada44827c653db5baf8e2a66a",
            "file": "src/app/components/skeleton/skeleton.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-skeleton",
            "styleUrls": [],
            "styles": [
                "\n      .hc-skeleton {\n        background-color: var(--neutral-divider);\n        border-radius: 0.5rem;\n        position: relative;\n        overflow: hidden;\n\n        &:after {\n          background: linear-gradient(\n            90deg,\n            rgba(255, 255, 255, 0),\n            rgba(255, 255, 255, 0.4),\n            rgba(255, 255, 255, 0)\n          );\n          content: '';\n          animation: hc-skeleton-animation 1.2s infinite;\n          height: 100%;\n          left: 0;\n          position: absolute;\n          right: 0;\n          top: 0;\n          transform: translateX(-100%);\n          z-index: 1;\n        }\n      }\n\n      @keyframes hc-skeleton-animation {\n        from {\n          transform: translateX(-100%);\n        }\n        to {\n          transform: translateX(100%);\n        }\n      }\n    "
            ],
            "template": "<div [ngClass]=\"classes\" [ngStyle]=\"styles\"></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "borderRadius",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'1rem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'hc-skeleton',\n  template: ` <div [ngClass]=\"classes\" [ngStyle]=\"styles\"></div> `,\n  styles: [\n    `\n      .hc-skeleton {\n        background-color: var(--neutral-divider);\n        border-radius: 0.5rem;\n        position: relative;\n        overflow: hidden;\n\n        &:after {\n          background: linear-gradient(\n            90deg,\n            rgba(255, 255, 255, 0),\n            rgba(255, 255, 255, 0.4),\n            rgba(255, 255, 255, 0)\n          );\n          content: '';\n          animation: hc-skeleton-animation 1.2s infinite;\n          height: 100%;\n          left: 0;\n          position: absolute;\n          right: 0;\n          top: 0;\n          transform: translateX(-100%);\n          z-index: 1;\n        }\n      }\n\n      @keyframes hc-skeleton-animation {\n        from {\n          transform: translateX(-100%);\n        }\n        to {\n          transform: translateX(100%);\n        }\n      }\n    `,\n  ],\n})\nexport class SkeletonComponent {\n  @Input() width = '100%'\n  @Input() height = '1rem'\n  @Input() size: string | null = null\n  @Input() borderRadius: string | null = null\n\n  get classes() {\n    return {\n      ['hc-skeleton']: true,\n    }\n  }\n\n  get styles() {\n    if (this.size) {\n      return { width: this.size, height: this.size, borderRadius: this.borderRadius }\n    } else {\n      return { width: this.width, height: this.height }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-skeleton {\n        background-color: var(--neutral-divider);\n        border-radius: 0.5rem;\n        position: relative;\n        overflow: hidden;\n\n        &:after {\n          background: linear-gradient(\n            90deg,\n            rgba(255, 255, 255, 0),\n            rgba(255, 255, 255, 0.4),\n            rgba(255, 255, 255, 0)\n          );\n          content: '';\n          animation: hc-skeleton-animation 1.2s infinite;\n          height: 100%;\n          left: 0;\n          position: absolute;\n          right: 0;\n          top: 0;\n          transform: translateX(-100%);\n          z-index: 1;\n        }\n      }\n\n      @keyframes hc-skeleton-animation {\n        from {\n          transform: translateX(-100%);\n        }\n        to {\n          transform: translateX(100%);\n        }\n      }\n    \n",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 50
                    }
                },
                "styles": {
                    "name": "styles",
                    "getSignature": {
                        "name": "styles",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                }
            }
        },
        {
            "name": "SortComponent",
            "id": "component-SortComponent-2367db11ab1f3704f57db54be94300cbfcc78b4e507e93bb07a5759d8b3b22acc0576eb753fa4080493fc5ae1d0d441c8a6082ed99a6fbdc644b44bfcb474baf",
            "file": "src/app/modules/docs/table/sort/sort.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "BaseTableService"
                }
            ],
            "selector": "app-sort",
            "styleUrls": [],
            "styles": [],
            "template": "<hc-card>\n  <hc-table\n    hcSort\n    responsiveLayout=\"scroll\"\n    [value]=\"products\"\n    [responsive]=\"true\"\n    (sortEvent)=\"onSort($event)\"\n    [sortField]=\"baseTableService.sortColumn\"\n    [sortOrder]=\"baseTableService.sortDirection\"\n  >\n    <ng-template hcTemplate=\"header\">\n      <tr>\n        <th hcSortableColumn=\"code\">\n          Code <hc-sort-icon field=\"code\"></hc-sort-icon>\n        </th>\n        <th hcSortableColumn=\"name\">\n          Name <hc-sort-icon field=\"name\"></hc-sort-icon>\n        </th>\n        <th hcSortableColumn=\"category\">\n          Category <hc-sort-icon field=\"category\"></hc-sort-icon>\n        </th>\n        <th hcSortableColumn=\"quantity\">\n          Quantity <hc-sort-icon field=\"quantity\"></hc-sort-icon>\n        </th>\n        <th hcSortableColumn=\"price\">\n          Price <hc-sort-icon field=\"price\"></hc-sort-icon>\n        </th>\n      </tr>\n    </ng-template>\n    <ng-template hcTemplate=\"body\" let-product>\n      <tr>\n        <td>{{ product.code }}</td>\n        <td>{{ product.name }}</td>\n        <td>{{ product.category }}</td>\n        <td>{{ product.quantity }}</td>\n        <td>{{ product.price }}</td>\n      </tr>\n    </ng-template>\n  </hc-table>\n</hc-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "baseTableService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BaseTableService",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSort",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { IProduct, ProductsService } from '../../products.service'\n\nimport { BaseTableService } from 'src/app/common/base-table/base-table.service'\n\n@Component({\n  selector: 'app-sort',\n  template: `\n    <hc-card>\n      <hc-table\n        hcSort\n        responsiveLayout=\"scroll\"\n        [value]=\"products\"\n        [responsive]=\"true\"\n        (sortEvent)=\"onSort($event)\"\n        [sortField]=\"baseTableService.sortColumn\"\n        [sortOrder]=\"baseTableService.sortDirection\"\n      >\n        <ng-template hcTemplate=\"header\">\n          <tr>\n            <th hcSortableColumn=\"code\">\n              Code <hc-sort-icon field=\"code\"></hc-sort-icon>\n            </th>\n            <th hcSortableColumn=\"name\">\n              Name <hc-sort-icon field=\"name\"></hc-sort-icon>\n            </th>\n            <th hcSortableColumn=\"category\">\n              Category <hc-sort-icon field=\"category\"></hc-sort-icon>\n            </th>\n            <th hcSortableColumn=\"quantity\">\n              Quantity <hc-sort-icon field=\"quantity\"></hc-sort-icon>\n            </th>\n            <th hcSortableColumn=\"price\">\n              Price <hc-sort-icon field=\"price\"></hc-sort-icon>\n            </th>\n          </tr>\n        </ng-template>\n        <ng-template hcTemplate=\"body\" let-product>\n          <tr>\n            <td>{{ product.code }}</td>\n            <td>{{ product.name }}</td>\n            <td>{{ product.category }}</td>\n            <td>{{ product.quantity }}</td>\n            <td>{{ product.price }}</td>\n          </tr>\n        </ng-template>\n      </hc-table>\n    </hc-card>\n  `,\n  providers: [BaseTableService],\n})\nexport class SortComponent implements OnInit {\n  products: IProduct[] = []\n\n  constructor(\n    private productsService: ProductsService,\n    public baseTableService: BaseTableService\n  ) {}\n\n  ngOnInit(): void {\n    this.getProducts()\n  }\n\n  getProducts() {\n    this.productsService\n      .getProducts(\n        this.baseTableService.page,\n        this.baseTableService.limit,\n        this.baseTableService.sortColumn,\n        this.baseTableService.sortDirection\n      )\n      .subscribe((response) => (this.products = response.items))\n  }\n\n  onSort(event: { field: string; order: number }) {\n    this.baseTableService.sort(event)\n    this.getProducts()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "baseTableService",
                        "type": "BaseTableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseTableService",
                        "type": "BaseTableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SortIconComponent",
            "id": "component-SortIconComponent-d3350e4e7934ad8810b9f1cb6fbc25b6b16f790676c010bdb4320fe391550db38eb2985f4b45bdef10f643dea9b4aa3076cbe89735bfab42c5ebc6fb8b8f6d5f",
            "file": "src/app/components/table/sort-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-sort-icon",
            "styleUrls": [],
            "styles": [
                "\n      i {\n        font-size: 18px;\n        position: absolute;\n        margin-left: 6px;\n      }\n    "
            ],
            "template": "<i class=\"material-symbols-outlined\">\n  {{ getIconState() }}\n</i>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortDirective",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "tableService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getIconState",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSortState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnDestroy, OnInit } from '@angular/core'\n\nimport { SortDirective } from './sort.directive'\nimport { Subscription } from 'rxjs'\nimport { TableService } from './table.service'\n\n@Component({\n  selector: 'hc-sort-icon',\n  template: `\n    <i class=\"material-symbols-outlined\">\n      {{ getIconState() }}\n    </i>\n  `,\n  styles: [\n    `\n      i {\n        font-size: 18px;\n        position: absolute;\n        margin-left: 6px;\n      }\n    `,\n  ],\n})\nexport class SortIconComponent implements OnInit, OnDestroy {\n  @Input() field!: string\n\n  subscription: Subscription\n\n  sortOrder: number | string | undefined\n\n  constructor(\n    public tableService: TableService,\n    public cd: ChangeDetectorRef,\n    public sort: SortDirective\n  ) {\n    this.subscription = this.tableService.sortSource$.subscribe(() => {\n      this.updateSortState()\n    })\n  }\n\n  ngOnInit(): void {\n    this.updateSortState()\n  }\n\n  getIconState(): string {\n    switch (this.sortOrder) {\n      case 1:\n        return 'vertical_align_top'\n      case -1:\n        return 'vertical_align_bottom'\n      default:\n        return 'height'\n    }\n  }\n\n  updateSortState() {\n    this.sortOrder = this.sort.isSorted(this.field) ? this.sort.sortOrder : 0\n\n    this.cd.markForCheck()\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe()\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      i {\n        font-size: 18px;\n        position: absolute;\n        margin-left: 6px;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sort",
                        "type": "SortDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sort",
                        "type": "SortDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "StatusComponent",
            "id": "component-StatusComponent-05425e8cdbcceceae0430dc094507a458ddf4f24700864cd270a6372b2782a7c145f62b303689d1e6bfd9497fc53bb044eb7c8b5b68b47b1475ec4a4b3302bf0",
            "file": "src/app/components/status/status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-status",
            "styleUrls": [],
            "styles": [
                "\n      .status {\n        padding: 6px 16px;\n        border: 1px solid var(--neutral-gray);\n        width: 142px;\n        border-radius: 16px;\n        text-align: center;\n        font-weight: bold;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .status-paid {\n        border-color: var(--green-default);\n        color: var(--green-default);\n      }\n\n      .status-scheduled {\n        border-color: var(--neutral-gray-dark);\n        color: var(--neutral-gray-dark);\n      }\n\n      .status-unpaid {\n        border-color: var(--red-default);\n        color: var(--red-default);\n      }\n    "
            ],
            "template": "<div\n  class=\"status\"\n  [ngClass]=\"{\n    'status-paid': status === 'PAID',\n    'status-scheduled': status === 'SCHEDULED',\n    'status-unpaid': status === 'UNPAID'\n  }\"\n>\n  <span class=\"material-symbols-outlined\" style=\"font-size: 18px; margin-right: 8px\">\n    {{ icon }}\n  </span>\n  <span>{{ status | titlecase }}</span>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "\"PAID\" | \"SCHEDULED\" | \"UNPAID\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "createIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core'\n\n@Component({\n  selector: 'hc-status',\n  template: `\n    <div\n      class=\"status\"\n      [ngClass]=\"{\n        'status-paid': status === 'PAID',\n        'status-scheduled': status === 'SCHEDULED',\n        'status-unpaid': status === 'UNPAID'\n      }\"\n    >\n      <span class=\"material-symbols-outlined\" style=\"font-size: 18px; margin-right: 8px\">\n        {{ icon }}\n      </span>\n      <span>{{ status | titlecase }}</span>\n    </div>\n  `,\n  styles: [\n    `\n      .status {\n        padding: 6px 16px;\n        border: 1px solid var(--neutral-gray);\n        width: 142px;\n        border-radius: 16px;\n        text-align: center;\n        font-weight: bold;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .status-paid {\n        border-color: var(--green-default);\n        color: var(--green-default);\n      }\n\n      .status-scheduled {\n        border-color: var(--neutral-gray-dark);\n        color: var(--neutral-gray-dark);\n      }\n\n      .status-unpaid {\n        border-color: var(--red-default);\n        color: var(--red-default);\n      }\n    `,\n  ],\n})\nexport class StatusComponent implements OnInit {\n  @Input() status!: 'PAID' | 'SCHEDULED' | 'UNPAID'\n  icon?: string\n\n  createIcon(): string | undefined {\n    switch (this.status) {\n      case 'PAID':\n        return 'check_circle'\n      case 'SCHEDULED':\n        return 'history'\n      case 'UNPAID':\n        return 'cancel'\n      default:\n        return undefined\n    }\n  }\n\n  ngOnInit(): void {\n    this.icon = this.createIcon()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .status {\n        padding: 6px 16px;\n        border: 1px solid var(--neutral-gray);\n        width: 142px;\n        border-radius: 16px;\n        text-align: center;\n        font-weight: bold;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .status-paid {\n        border-color: var(--green-default);\n        color: var(--green-default);\n      }\n\n      .status-scheduled {\n        border-color: var(--neutral-gray-dark);\n        color: var(--neutral-gray-dark);\n      }\n\n      .status-unpaid {\n        border-color: var(--red-default);\n        color: var(--red-default);\n      }\n    \n",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SwitchComponent",
            "id": "component-SwitchComponent-64a71aefca1c65ebeaa2c22b11b10c79c34cb05aa4e985bf17a91674f8f3f0920a79878d61e64683b78806a24dc44a0c3751db0babdcef53ae706150cca7d27f",
            "file": "src/app/components/switch/switch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SWITCH_VALUE_ACcESSOR"
                }
            ],
            "selector": "hc-switch",
            "styleUrls": [
                "switch.component.scss"
            ],
            "styles": [],
            "template": "<label [attr.for]=\"id\" [ngClass]=\"labelClasses\">\n  <div [ngClass]=\"classes\" (click)=\"onClick($event, cb)\" role=\"switch\">\n    <div class=\"hc-switch-hidden-accessible\">\n      <input\n        #cb\n        type=\"checkbox\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.id]=\"id\"\n        [attr.name]=\"name\"\n        [attr.tabindex]=\"tabindex\"\n        [attr.aria-checked]=\"checked()\"\n        [attr.aria-labelledby]=\"ariaLabelledBy\"\n        [checked]=\"checked()\"\n        [disabled]=\"disabled\"\n        (focus)=\"onFocus()\"\n        (blur)=\"onBlur()\"\n      />\n    </div>\n    <span class=\"hc-switch-slider\"></span>\n  </div>\n  <span *ngIf=\"label\" class=\"hc-switch-label-text\">{{ label }}</span>\n</label>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ariaLabelledBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter<ISwitchOnChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "falseValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "focused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "modelValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "trueValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methodsClass": [
                {
                    "name": "checked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cb",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cb",
                            "type": "HTMLInputElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateModel",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  Provider,\n  forwardRef,\n} from '@angular/core'\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms'\n\nimport { ChangeDetectorRef } from '@angular/core'\n\nconst SWITCH_VALUE_ACcESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  multi: true,\n  useExisting: forwardRef(() => SwitchComponent),\n}\n\nexport interface ISwitchOnChangeEvent {\n  originalEvent: Event\n  checked: boolean\n}\n\n@Component({\n  selector: 'hc-switch',\n  template: `\n    <label [attr.for]=\"id\" [ngClass]=\"labelClasses\">\n      <div [ngClass]=\"classes\" (click)=\"onClick($event, cb)\" role=\"switch\">\n        <div class=\"hc-switch-hidden-accessible\">\n          <input\n            #cb\n            type=\"checkbox\"\n            [attr.aria-label]=\"ariaLabel\"\n            [attr.id]=\"id\"\n            [attr.name]=\"name\"\n            [attr.tabindex]=\"tabindex\"\n            [attr.aria-checked]=\"checked()\"\n            [attr.aria-labelledby]=\"ariaLabelledBy\"\n            [checked]=\"checked()\"\n            [disabled]=\"disabled\"\n            (focus)=\"onFocus()\"\n            (blur)=\"onBlur()\"\n          />\n        </div>\n        <span class=\"hc-switch-slider\"></span>\n      </div>\n      <span *ngIf=\"label\" class=\"hc-switch-label-text\">{{ label }}</span>\n    </label>\n  `,\n  styleUrls: ['switch.component.scss'],\n  providers: [SWITCH_VALUE_ACcESSOR],\n})\nexport class SwitchComponent implements ControlValueAccessor {\n  modelValue = false\n  trueValue = true\n  falseValue = false\n  focused = false\n\n  @Input() ariaLabel?: string\n  @Input() ariaLabelledBy?: string\n  @Input() name?: string\n  @Input() id?: string\n  @Input() label?: string\n  @Input() readonly = false\n  @Input() tabindex?: number\n  @Input() disabled = false\n\n  @Output() onChange = new EventEmitter<ISwitchOnChangeEvent>()\n\n  constructor(public cd: ChangeDetectorRef) {}\n\n  onModelChange: (value: boolean) => void = () => {}\n  onModelTouched: () => void = () => {}\n\n  writeValue(value: boolean): void {\n    this.modelValue = value\n    this.cd.markForCheck()\n  }\n\n  registerOnChange(fn: (value: boolean) => void): void {\n    this.onModelChange = fn\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onModelTouched = fn\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    this.disabled = isDisabled\n    this.cd.markForCheck()\n  }\n\n  toggle(event: Event): void {\n    this.updateModel(event, !this.checked())\n  }\n\n  onClick(event: Event, cb: HTMLInputElement): void {\n    if (!this.disabled && !this.readonly) {\n      event.preventDefault()\n      this.toggle(event)\n      cb.focus()\n    }\n  }\n\n  updateModel(event: Event, value: boolean): void {\n    this.modelValue = value ? this.trueValue : this.falseValue\n    this.onModelChange(this.modelValue)\n    this.onChange.emit({\n      originalEvent: event,\n      checked: this.modelValue,\n    })\n  }\n\n  onFocus(): void {\n    this.focused = true\n  }\n\n  onBlur(): void {\n    this.focused = false\n    this.onModelTouched()\n  }\n\n  checked(): boolean {\n    return this.modelValue === this.trueValue\n  }\n\n  get classes() {\n    return {\n      ['hc-switch']: true,\n      ['hc-switch-checked']: this.checked(),\n      ['hc-switch-disabled']: this.disabled,\n      ['hc-switch-focus']: this.focused,\n    }\n  }\n\n  get labelClasses() {\n    return {\n      ['hc-switch-label']: true,\n      ['hc-switch-label-disabled']: this.disabled,\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-switch-label {\n  display: flex;\n  align-items: center;\n  font-weight: bold;\n\n  &.hc-switch-label-disabled {\n    color: var(--neutral-gray-lighter);\n  }\n\n  .hc-switch-label-text {\n    margin-left: 0.5rem;\n  }\n}\n\n.hc-switch {\n  position: relative;\n  display: flex;\n  user-select: none;\n  width: 3rem;\n  height: 1.75rem;\n\n  &.hc-switch-focus {\n    outline: 0 none;\n    outline-offset: 0;\n    box-shadow: 0 0 0 0.2rem var(--primary-light);\n    border-radius: 30px;\n  }\n\n  &.hc-switch-disabled {\n    .hc-switch-slider {\n      background: var(--neutral-divider);\n\n      &:before {\n        background: var(--neutral-gray-lighter);\n      }\n    }\n  }\n\n  &.hc-switch-checked {\n    &.hc-switch-disabled {\n      .hc-switch-slider {\n        background: var(--neutral-divider);\n\n        &:before {\n          background: var(--neutral-gray-lighter);\n        }\n      }\n    }\n\n    .hc-switch-slider {\n      background: var(--primary-default);\n\n      &:before {\n        background: var(--neutral-white);\n        transform: translateX(1.25rem);\n      }\n    }\n\n    &:not(.hc-switch-disabled):hover {\n      .hc-switch-slider {\n        background: var(--primary-default);\n      }\n    }\n  }\n}\n\n.hc-switch-hidden-accessible {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.hc-switch-slider {\n  background: var(--neutral-gray);\n  transition: background-color 0.2s, color 0.2s, border-color 0.2s, box-shadow 0.2s;\n  border-radius: 30px;\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n\n  &:before {\n    background: var(--neutral-white);\n    width: 1.25rem;\n    height: 1.25rem;\n    left: 0.25rem;\n    margin-top: -0.625rem;\n    border-radius: 50%;\n    position: absolute;\n    transition-duration: 0.2s;\n    content: '';\n    top: 50%;\n  }\n}\n",
                    "styleUrl": "switch.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 129
                    }
                },
                "labelClasses": {
                    "name": "labelClasses",
                    "getSignature": {
                        "name": "labelClasses",
                        "type": "",
                        "returnType": "",
                        "line": 138
                    }
                }
            }
        },
        {
            "name": "TableBodyComponent",
            "id": "component-TableBodyComponent-9a23f9674910ad1c3f8ffeb56ba4d42adb0432304ecf34a52ed92f732161b97fce15af86fb18b0fcc6d1ad651f0245709c2a0cc806a195eb100be22f1978755b",
            "file": "src/app/components/table/table-body.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[hc-table-body]",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"!expandedRowTemplate\">\n  <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"data.value\">\n    <ng-container\n      *ngTemplateOutlet=\"template; context: { $implicit: rowData, columns }\"\n    ></ng-container>\n  </ng-template>\n</ng-container>\n<ng-container *ngIf=\"expandedRowTemplate\">\n  <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"data.value\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        template;\n        context: {\n          $implicit: rowData,\n          columns: columns,\n          expanded: rowExpand.isRowExpanded(rowData)\n        }\n      \"\n    ></ng-container>\n    <ng-container *ngIf=\"rowExpand.isRowExpanded(rowData)\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          expandedRowTemplate;\n          context: { $implicit: rowData, columns: columns }\n        \"\n      ></ng-container>\n    </ng-container>\n  </ng-template>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expandedRowTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "TemplateRef<TemplateDirective>",
                    "decorators": []
                },
                {
                    "name": "hc-table-body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "IColumn[]",
                    "decorators": []
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "TemplateRef<TemplateDirective>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataService",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rowExpand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RowExpandDirective<any>",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "tableService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableService",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  TemplateRef,\n  ViewEncapsulation,\n} from '@angular/core'\n\nimport { DataService } from './data.service'\nimport { IColumn } from 'src/app/components/table/table.component'\nimport { RowExpandDirective } from './row-expand.directive'\nimport { Subscription } from 'rxjs'\nimport { TableService } from './table.service'\nimport { TemplateDirective } from '../../directives/template/template.directive'\n\n@Component({\n  selector: '[hc-table-body]',\n  template: `\n    <ng-container *ngIf=\"!expandedRowTemplate\">\n      <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"data.value\">\n        <ng-container\n          *ngTemplateOutlet=\"template; context: { $implicit: rowData, columns }\"\n        ></ng-container>\n      </ng-template>\n    </ng-container>\n    <ng-container *ngIf=\"expandedRowTemplate\">\n      <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"data.value\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            template;\n            context: {\n              $implicit: rowData,\n              columns: columns,\n              expanded: rowExpand.isRowExpanded(rowData)\n            }\n          \"\n        ></ng-container>\n        <ng-container *ngIf=\"rowExpand.isRowExpanded(rowData)\">\n          <ng-container\n            *ngTemplateOutlet=\"\n              expandedRowTemplate;\n              context: { $implicit: rowData, columns: columns }\n            \"\n          ></ng-container>\n        </ng-container>\n      </ng-template>\n    </ng-container>\n  `,\n  styles: [],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class TableBodyComponent implements OnDestroy {\n  subscription!: Subscription\n\n  @Input('hc-table-body') columns!: IColumn[]\n  @Input() template!: TemplateRef<TemplateDirective>\n  @Input() expandedRowTemplate?: TemplateRef<TemplateDirective>\n\n  constructor(\n    public data: DataService,\n    public cd: ChangeDetectorRef,\n    public tableService: TableService,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    public rowExpand: RowExpandDirective<any>\n  ) {\n    this.subscription = this.tableService.valueSource$.subscribe(() => {\n      this.cd.detectChanges()\n    })\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe()\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rowExpand",
                        "type": "RowExpandDirective<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rowExpand",
                        "type": "RowExpandDirective<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "TableCheckBoxComponent",
            "id": "component-TableCheckBoxComponent-e7ecb86cee422f97161531e1e2b811b9ee591488d967801b3220662e9d28a06ced14cf4e0d9be06583300d71654e9b54e5f70bfa1b7c94b655ae48010f729379",
            "file": "src/app/components/table/table-check-box.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-table-check-box",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n  class=\"hc-checkbox\"\n  [ngClass]=\"{ 'hc-checkbox-focused': focused, 'hc-checkbox-disabled': disabled }\"\n  (click)=\"onClick($event)\"\n>\n  <div class=\"hc-checkbox-hidden-accessible\">\n    <input\n      type=\"checkbox\"\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n      [attr.id]=\"inputId\"\n      [attr.name]=\"name\"\n      [attr.required]=\"required\"\n      [attr.aria-label]=\"ariaLabel\"\n      (focus)=\"onFocus()\"\n      (blur)=\"onBlur()\"\n    />\n  </div>\n  <div\n    #box\n    role=\"checkbox\"\n    [ngClass]=\"{\n      'hc-checkbox-box': true,\n      'hc-checkbox-highlight': checked,\n      'hc-focus': focused,\n      'hc-disabled': disabled\n    }\"\n    [attr.data-testid]=\"ariaLabel\"\n    [attr.aria-checked]=\"checked\"\n  >\n    <span class=\"material-symbols-outlined hc-checkbox-icon\"> done </span>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "dt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableComponent",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "focused",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectDirective",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "tableService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableService",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnDestroy, OnInit } from '@angular/core'\n\nimport { SelectDirective } from './select.directive'\nimport { Subscription } from 'rxjs'\nimport { TableComponent } from './table.component'\nimport { TableService } from './table.service'\n\n@Component({\n  selector: 'hc-table-check-box',\n  template: `\n    <div\n      class=\"hc-checkbox\"\n      [ngClass]=\"{ 'hc-checkbox-focused': focused, 'hc-checkbox-disabled': disabled }\"\n      (click)=\"onClick($event)\"\n    >\n      <div class=\"hc-checkbox-hidden-accessible\">\n        <input\n          type=\"checkbox\"\n          [checked]=\"checked\"\n          [disabled]=\"disabled\"\n          [attr.id]=\"inputId\"\n          [attr.name]=\"name\"\n          [attr.required]=\"required\"\n          [attr.aria-label]=\"ariaLabel\"\n          (focus)=\"onFocus()\"\n          (blur)=\"onBlur()\"\n        />\n      </div>\n      <div\n        #box\n        role=\"checkbox\"\n        [ngClass]=\"{\n          'hc-checkbox-box': true,\n          'hc-checkbox-highlight': checked,\n          'hc-focus': focused,\n          'hc-disabled': disabled\n        }\"\n        [attr.data-testid]=\"ariaLabel\"\n        [attr.aria-checked]=\"checked\"\n      >\n        <span class=\"material-symbols-outlined hc-checkbox-icon\"> done </span>\n      </div>\n    </div>\n  `,\n  styles: [],\n})\nexport class TableCheckBoxComponent implements OnInit, OnDestroy {\n  @Input() disabled!: boolean\n  @Input() value!: any\n  @Input() name?: string\n  @Input() index!: number\n  @Input() inputId?: string\n  @Input() required?: boolean\n  @Input() ariaLabel?: string\n\n  checked!: boolean\n  focused!: boolean\n  subscription: Subscription\n\n  constructor(\n    public dt: TableComponent,\n    public tableService: TableService,\n    public cd: ChangeDetectorRef,\n    public select: SelectDirective\n  ) {\n    this.subscription = this.tableService.selectionSource$.subscribe(() => {\n      if (this.select.selectAll) {\n        this.checked = !this.select.isDeselected(this.value)\n      } else {\n        this.checked = this.select.isSelected(this.value)\n      }\n\n      this.cd.markForCheck()\n    })\n  }\n\n  ngOnInit(): void {\n    if (this.select.selectAll) {\n      this.checked = !this.select.isDeselected(this.value)\n    } else {\n      this.checked = this.select.isSelected(this.value)\n    }\n  }\n\n  onClick(event: Event) {\n    if (!this.disabled) {\n      this.select.toggleRowWithCheckbox(\n        {\n          originalEvent: event,\n          rowIndex: this.index,\n        },\n        this.value\n      )\n    }\n  }\n\n  onFocus() {\n    this.focused = true\n  }\n\n  onBlur() {\n    this.focused = false\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe()\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dt",
                        "type": "TableComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "select",
                        "type": "SelectDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "dt",
                        "type": "TableComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "select",
                        "type": "SelectDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-a8d6f7ef72eb81baaba784e76cb7bd8c054ffae4d16ac403ac49709f7eac5519a2981f10f04b95c74a9336e6b3dbb79933c1a42d7235b03041e9df8bb481aae3",
            "file": "src/app/components/table/table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DataService"
                }
            ],
            "selector": "hc-table",
            "styleUrls": [
                "table.component.scss"
            ],
            "styles": [],
            "template": "<div [ngClass]=\"containerClasses\">\n  <div\n    *ngIf=\"paginator.paginator\"\n    class=\"hc-table-options-header\"\n    style=\"margin-bottom: 1rem;\"\n  >\n    <div class=\"hc-table-limit\">\n      <ng-select\n        style=\"width: 80px;\"\n        [searchable]=\"false\"\n        [items]=\"paginator.rowsPerPageOptions\"\n        [clearable]=\"false\"\n        [(ngModel)]=\"paginator.selectedLimit\"\n        (change)=\"paginator.onLimitChange.emit($event)\"\n      ></ng-select>\n      <span style=\"margin-left: 0.5rem\">{{ paginator.limitLabel }}</span>\n    </div>\n    <div *ngIf=\"optionsHeaderTemplate\">\n      <ng-container *ngTemplateOutlet=\"optionsHeaderTemplate\"></ng-container>\n    </div>\n  </div>\n  <div class=\"hc-datatable-header\" *ngIf=\"captionTemplate\">\n    <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n  </div>\n\n  <div class=\"hc-datatable-wrapper\" [ngStyle]=\"{ maxHeight: scrollHeight }\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        buildInTable;\n        context: { $implicit: data.processedData, options: { columns } }\n      \"\n    ></ng-container>\n\n    <ng-template #buildInTable let-items let-options=\"options\">\n      <table\n        class=\"hc-datatable-table\"\n        *ngIf=\"data.value\"\n        #table\n        role=\"table\"\n        [ngStyle]=\"style\"\n      >\n        <thead *ngIf=\"headerTemplate\" class=\"hc-datatable-thead\">\n          <ng-container\n            *ngTemplateOutlet=\"\n              headerTemplate;\n              context: { $implicit: options.columns }\n            \"\n          ></ng-container>\n        </thead>\n        <tbody\n          class=\"hc-datatable-tbody\"\n          *ngIf=\"bodyTemplate\"\n          [hc-table-body]=\"options.columns\"\n          [template]=\"bodyTemplate\"\n          [expandedRowTemplate]=\"expandedRowTemplate\"\n        ></tbody>\n      </table>\n    </ng-template>\n  </div>\n\n  <div class=\"hc-datatable-footer\" *ngIf=\"summaryTemplate\">\n    <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n  </div>\n\n  <div style=\"margin-top: 20px\" *ngIf=\"paginator.paginator\">\n    <hc-pagination\n      [rows]=\"paginator.rows\"\n      [pagination]=\"paginator.pagination\"\n      [totalRecords]=\"paginator.totalRecords\"\n      (pageChangeEvent)=\"paginator.onPageChange($event)\"\n      [showCurrentPageReport]=\"paginator.showCurrentPageReport\"\n      [currentPageReportTemplate]=\"paginator.currentPageReportTemplate\"\n    ></hc-pagination>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "IColumn[]",
                    "decorators": []
                },
                {
                    "name": "gridlines",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 124,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "responsive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 123,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "responsiveLayout",
                    "defaultValue": "'stack'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 122,
                    "type": "\"stack\" | \"scroll\"",
                    "decorators": []
                },
                {
                    "name": "scrollable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 126,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "scrollDirection",
                    "defaultValue": "'both'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 127,
                    "type": "\"vertical\" | \"horizontal\" | \"both\"",
                    "decorators": []
                },
                {
                    "name": "scrollHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 128,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 125,
                    "type": "IStyle",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 133,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodyTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "captionTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataService",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "expandedRowTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "headerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "optionsHeaderTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaginationDirective",
                    "optional": false,
                    "description": "",
                    "line": 144,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "summaryTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "tableService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableService",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tableViewChild",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'table'"
                        }
                    ]
                },
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 130,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TemplateDirective"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Input,\n  OnChanges,\n  Optional,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core'\n\nimport { ElementRef } from '@angular/core'\nimport { IStyle } from './../../common/models/style.model'\nimport { PaginationDirective } from './pagination.directive'\nimport { TemplateDirective } from 'src/app/directives/template/template.directive'\nimport { DataService } from './data.service'\nimport { TableService } from 'src/app/components/table/table.service'\nimport { SimpleChanges } from '@angular/core'\n\nexport interface IColumn {\n  header: string\n  field: string\n}\n\n@Component({\n  selector: 'hc-table',\n  template: `\n    <div [ngClass]=\"containerClasses\">\n      <div\n        *ngIf=\"paginator.paginator\"\n        class=\"hc-table-options-header\"\n        style=\"margin-bottom: 1rem;\"\n      >\n        <div class=\"hc-table-limit\">\n          <ng-select\n            style=\"width: 80px;\"\n            [searchable]=\"false\"\n            [items]=\"paginator.rowsPerPageOptions\"\n            [clearable]=\"false\"\n            [(ngModel)]=\"paginator.selectedLimit\"\n            (change)=\"paginator.onLimitChange.emit($event)\"\n          ></ng-select>\n          <span style=\"margin-left: 0.5rem\">{{ paginator.limitLabel }}</span>\n        </div>\n        <div *ngIf=\"optionsHeaderTemplate\">\n          <ng-container *ngTemplateOutlet=\"optionsHeaderTemplate\"></ng-container>\n        </div>\n      </div>\n      <div class=\"hc-datatable-header\" *ngIf=\"captionTemplate\">\n        <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n      </div>\n\n      <div class=\"hc-datatable-wrapper\" [ngStyle]=\"{ maxHeight: scrollHeight }\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            buildInTable;\n            context: { $implicit: data.processedData, options: { columns } }\n          \"\n        ></ng-container>\n\n        <ng-template #buildInTable let-items let-options=\"options\">\n          <table\n            class=\"hc-datatable-table\"\n            *ngIf=\"data.value\"\n            #table\n            role=\"table\"\n            [ngStyle]=\"style\"\n          >\n            <thead *ngIf=\"headerTemplate\" class=\"hc-datatable-thead\">\n              <ng-container\n                *ngTemplateOutlet=\"\n                  headerTemplate;\n                  context: { $implicit: options.columns }\n                \"\n              ></ng-container>\n            </thead>\n            <tbody\n              class=\"hc-datatable-tbody\"\n              *ngIf=\"bodyTemplate\"\n              [hc-table-body]=\"options.columns\"\n              [template]=\"bodyTemplate\"\n              [expandedRowTemplate]=\"expandedRowTemplate\"\n            ></tbody>\n          </table>\n        </ng-template>\n      </div>\n\n      <div class=\"hc-datatable-footer\" *ngIf=\"summaryTemplate\">\n        <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n      </div>\n\n      <div style=\"margin-top: 20px\" *ngIf=\"paginator.paginator\">\n        <hc-pagination\n          [rows]=\"paginator.rows\"\n          [pagination]=\"paginator.pagination\"\n          [totalRecords]=\"paginator.totalRecords\"\n          (pageChangeEvent)=\"paginator.onPageChange($event)\"\n          [showCurrentPageReport]=\"paginator.showCurrentPageReport\"\n          [currentPageReportTemplate]=\"paginator.currentPageReportTemplate\"\n        ></hc-pagination>\n      </div>\n    </div>\n  `,\n  styleUrls: ['table.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [DataService],\n})\nexport class TableComponent implements AfterContentInit, OnChanges {\n  bodyTemplate!: TemplateRef<TemplateDirective>\n  headerTemplate!: TemplateRef<TemplateDirective>\n  captionTemplate!: TemplateRef<TemplateDirective>\n  summaryTemplate!: TemplateRef<TemplateDirective>\n  optionsHeaderTemplate!: TemplateRef<TemplateDirective>\n  expandedRowTemplate!: TemplateRef<TemplateDirective>\n\n  @Input() columns: IColumn[] = []\n  @Input() responsiveLayout: 'stack' | 'scroll' = 'stack'\n  @Input() responsive = false\n  @Input() gridlines = false\n  @Input() style?: IStyle\n  @Input() scrollable = false\n  @Input() scrollDirection: 'vertical' | 'horizontal' | 'both' = 'both'\n  @Input() scrollHeight?: string\n\n  @ContentChildren(TemplateDirective) templates!: QueryList<TemplateDirective>\n  @ViewChild('table') tableViewChild!: ElementRef\n\n  @Input() get value(): any[] {\n    return this.data.value\n  }\n\n  set value(val: any[]) {\n    this.data.value = val\n  }\n\n  constructor(\n    public data: DataService,\n    public tableService: TableService,\n    @Optional() public paginator: PaginationDirective\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['value']) {\n      this.value = changes['value'].currentValue\n\n      this.tableService.onValueChange(changes['value'].currentValue)\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this.templates.forEach((item) => {\n      switch (item.getType()) {\n        case 'body':\n          this.bodyTemplate = item.template\n          break\n        case 'header':\n          this.headerTemplate = item.template\n          break\n        case 'caption':\n          this.captionTemplate = item.template\n          break\n        case 'summary':\n          this.summaryTemplate = item.template\n          break\n        case 'optionsHeader':\n          this.optionsHeaderTemplate = item.template\n          break\n        case 'rowexpansion':\n          this.expandedRowTemplate = item.template\n          break\n      }\n    })\n  }\n\n  get containerClasses() {\n    return {\n      ['hc-datatable']: true,\n      ['hc-datatable-responsive-scroll']: this.responsiveLayout === 'scroll',\n      ['hc-datatable-gridlines']: this.gridlines,\n      ['hc-datatable-scrollable']: this.scrollable,\n      ['hc-datatable-scrollable-horizontal']:\n        this.scrollable && this.scrollDirection === 'horizontal',\n      ['hc-datatable-scrollable-both']:\n        this.scrollable && this.scrollDirection === 'both',\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-datatable-table {\n  border-collapse: collapse;\n  min-width: 100%;\n  table-layout: fixed;\n}\n\n.hc-datable {\n  position: relative;\n  box-sizing: border-box;\n\n  > table {\n    border-collapse: collapse;\n    min-width: 100%;\n    table-layout: fixed;\n  }\n}\n\n.hc-datatable-responsive-scroll {\n  .hc-datatable-wrapper {\n    overflow-x: auto;\n\n    > table {\n      table-layout: auto;\n    }\n  }\n}\n\n.hc-datatable-thead {\n  > tr > th {\n    text-align: left;\n    padding: 1rem;\n    border: 1px solid var(--neutral-gray-lighter);\n    border-width: 0 0 1px 0;\n    font-weight: 700;\n    color: var(--neutral-black);\n    background: var(--neutral-divider);\n    transition: box-shadow 0.2s;\n  }\n}\n\n.hc-datatable-tbody {\n  > tr {\n    background: var(--neutral-white);\n    color: var(--neutral-black);\n    transition: box-shadow 0.2s;\n\n    > td {\n      text-align: left;\n      border: 1px solid var(--neutral-gray-lighter);\n      border-width: 0 0 1px 0;\n      padding: 1rem;\n    }\n  }\n}\n\n.header-and-fotter {\n  width: 100%;\n  background-color: var(--neutral-divider);\n  padding: 1rem;\n  font-weight: 700;\n}\n\n.hc-datatable-header {\n  @extend .header-and-fotter;\n}\n\n.hc-datatable-gridlines {\n  .hc-datatable-thead {\n    tr {\n      th {\n        border: 1px solid var(--neutral-divider);\n      }\n    }\n  }\n\n  .hc-datatable-tbody {\n    tr {\n      td {\n        border: 1px solid var(--neutral-divider);\n      }\n    }\n  }\n}\n\n.hc-datatable-footer {\n  @extend .header-and-fotter;\n}\n\n.hc-sortable-column {\n  cursor: pointer;\n\n  &:hover {\n    background-color: var(--neutral-gray);\n  }\n}\n\n.hc-datatable-highlight {\n  color: var(--primary-default) !important;\n  background-color: var(--neutral-gray-light) !important;\n}\n\n.hc-checkbox {\n  display: inline-flex;\n  cursor: pointer;\n  user-select: none;\n  vertical-align: bottom;\n  position: relative;\n}\n\n.hc-checkbox:not(.hc-checkbox-disabled) .hc-checkbox-box:hover {\n  border-color: var(--primary-default);\n}\n\n.hc-checkbox-hidden-accessible {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.hc-checkbox-box {\n  border: 2px solid var(--neutral-gray-light);\n  background-color: var(--neutral-white);\n  width: 22px;\n  height: 22px;\n  color: var(--neutral-black);\n  border-radius: 6px;\n  transition: background-color 0.2s, color 0.2s, border-color 0.2s, box-shadow 0.2s;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.hc-checkbox-icon {\n  transition-duration: 0.2s;\n  color: var(--neutral-white);\n  font-size: 22px;\n}\n\n.hc-checkbox-highlight {\n  border-color: var(--primary-default);\n  background: var(--primary-default);\n}\n\n.hc-checkbox-disabled {\n  cursor: default;\n  pointer-events: none;\n\n  .hc-disabled {\n    opacity: 0.6;\n  }\n}\n\n.hc-table-limit {\n  display: flex;\n  align-items: center;\n}\n\n.hc-table-options-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n/* Scrollable */\n.hc-datatable-scrollable {\n  .hc-datatable-wrapper {\n    position: relative;\n    overflow: auto;\n  }\n\n  .hc-datatable-thead {\n    > tr {\n      width: 100%;\n      > th {\n        white-space: nowrap;\n      }\n    }\n  }\n\n  .hc-datatable-tbody {\n    margin-bottom: 0.5rem;\n\n    > tr {\n      > td {\n        white-space: nowrap;\n      }\n    }\n  }\n}\n\n.hc-datatable-scrollable-horizontal,\n.hc-datatable-scrollable-both {\n  .hc-datatable-thead {\n    > tr > th {\n      white-space: nowrap;\n    }\n  }\n\n  .hc-datatable-tbody {\n    > tr > td {\n      white-space: nowrap;\n    }\n  }\n}\n",
                    "styleUrl": "table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "paginator",
                        "type": "PaginationDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 139,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "paginator",
                        "type": "PaginationDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterContentInit",
                "OnChanges"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 137,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 133
                    }
                },
                "containerClasses": {
                    "name": "containerClasses",
                    "getSignature": {
                        "name": "containerClasses",
                        "type": "",
                        "returnType": "",
                        "line": 180
                    }
                }
            }
        },
        {
            "name": "TableHeaderCheckboxComponent",
            "id": "component-TableHeaderCheckboxComponent-da2d391a48499562ccd3877799cebfba6a205fb3a3ca6793ebb523f5dc63738f9b2f781db8abd75bf287c5a5d5ff94542ca64c8c77604f7e26f06dcc69ca3643",
            "file": "src/app/components/table/table-header-checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-table-header-checkbox",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n  class=\"hc-checkbox\"\n  [ngClass]=\"{ 'hc-checkbox-focused': focused, 'hc-checkbox-disabled': isDisabled() }\"\n  (click)=\"onClick($event)\"\n>\n  <div class=\"hc-checkbox-hidden-accessible\">\n    <input\n      #checkbox\n      type=\"checkbox\"\n      [checked]=\"checked\"\n      [disabled]=\"isDisabled()\"\n      [attr.id]=\"inputId\"\n      [attr.name]=\"name\"\n      [attr.aria-label]=\"ariaLabel\"\n      (focus)=\"onFocus()\"\n      (blur)=\"onBlur()\"\n    />\n  </div>\n  <div\n    #box\n    role=\"checkbox\"\n    [ngClass]=\"{\n      'hc-checkbox-box': true,\n      'hc-checkbox-highlight': checked,\n      'hc-focus': focused,\n      'hc-disabled': isDisabled()\n    }\"\n    [attr.aria-checked]=\"checked\"\n    [attr.data-testid]=\"ariaLabel\"\n  >\n    <span class=\"material-symbols-outlined hc-checkbox-icon\"> done </span>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataService",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "focused",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectDirective",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectionChangeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "tableService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableService",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "valueChangeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIfAllRowsIsDeselected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "string | boolean",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCheckedState",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core'\n\nimport { DataService } from './data.service'\nimport { ObjectUtils } from 'src/app/common/object-utils/object-utils'\nimport { SelectDirective } from './select.directive'\nimport { Subscription } from 'rxjs'\nimport { TableService } from './table.service'\n\n@Component({\n  selector: 'hc-table-header-checkbox',\n  template: `\n    <div\n      class=\"hc-checkbox\"\n      [ngClass]=\"{ 'hc-checkbox-focused': focused, 'hc-checkbox-disabled': isDisabled() }\"\n      (click)=\"onClick($event)\"\n    >\n      <div class=\"hc-checkbox-hidden-accessible\">\n        <input\n          #checkbox\n          type=\"checkbox\"\n          [checked]=\"checked\"\n          [disabled]=\"isDisabled()\"\n          [attr.id]=\"inputId\"\n          [attr.name]=\"name\"\n          [attr.aria-label]=\"ariaLabel\"\n          (focus)=\"onFocus()\"\n          (blur)=\"onBlur()\"\n        />\n      </div>\n      <div\n        #box\n        role=\"checkbox\"\n        [ngClass]=\"{\n          'hc-checkbox-box': true,\n          'hc-checkbox-highlight': checked,\n          'hc-focus': focused,\n          'hc-disabled': isDisabled()\n        }\"\n        [attr.aria-checked]=\"checked\"\n        [attr.data-testid]=\"ariaLabel\"\n      >\n        <span class=\"material-symbols-outlined hc-checkbox-icon\"> done </span>\n      </div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableHeaderCheckboxComponent implements OnInit, OnDestroy {\n  @Input() disabled?: string\n  @Input() inputId?: string\n  @Input() name?: string\n  @Input() ariaLabel?: string\n\n  checked!: boolean\n  focused!: boolean\n\n  selectionChangeSubscription: Subscription\n  valueChangeSubscription: Subscription\n\n  constructor(\n    public tableService: TableService,\n    public cd: ChangeDetectorRef,\n    public select: SelectDirective,\n    public data: DataService\n  ) {\n    this.valueChangeSubscription = this.tableService.valueSource$.subscribe(() => {\n      this.checked = this.updateCheckedState()\n    })\n\n    this.selectionChangeSubscription = this.tableService.selectionSource$.subscribe(\n      () => {\n        this.checked = this.updateCheckedState()\n      }\n    )\n  }\n\n  ngOnInit(): void {\n    this.checked = this.updateCheckedState()\n  }\n\n  onClick(event: Event) {\n    if (!this.disabled) {\n      if (this.data.value && this.data.value.length > 0) {\n        this.select.toggleRowsWithCheckbox(event, !this.checked)\n      }\n    }\n  }\n\n  onFocus() {\n    this.focused = true\n  }\n\n  onBlur() {\n    this.focused = false\n  }\n\n  isDisabled() {\n    return this.disabled || !this.data.value || !this.data.value.length\n  }\n\n  checkIfAllRowsIsDeselected(): boolean {\n    const data = this.data.processedData\n\n    return (\n      ObjectUtils.isNotEmpty(data) &&\n      ObjectUtils.isNotEmpty(this.select.deselection) &&\n      data.every((v: any) =>\n        this.select.deselection.some((s: any) => this.select.equals(v, s))\n      )\n    )\n  }\n\n  updateCheckedState(): boolean {\n    this.cd.markForCheck()\n\n    if (this.select.selectAll === true) {\n      return !this.checkIfAllRowsIsDeselected()\n    } else {\n      const data = this.select.selectionPageOnly\n        ? this.data.dataToRender(this.data.processedData)\n        : this.data.processedData\n\n      const val = data\n\n      const selectableVal = this.select.rowSelectable\n        ? val.filter((data: any, index: number) =>\n            this.select.rowSelectable({ data, index })\n          )\n        : val\n\n      return (\n        ObjectUtils.isNotEmpty(selectableVal) &&\n        ObjectUtils.isNotEmpty(this.select.selection) &&\n        selectableVal.every((v: any) =>\n          this.select.selection.some((s: any) => this.select.equals(v, s))\n        )\n      )\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.valueChangeSubscription) {\n      this.valueChangeSubscription.unsubscribe()\n    }\n\n    if (this.selectionChangeSubscription) {\n      this.selectionChangeSubscription.unsubscribe()\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "select",
                        "type": "SelectDirective",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "tableService",
                        "type": "TableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "select",
                        "type": "SelectDirective",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "TabPanelComponent",
            "id": "component-TabPanelComponent-2efbd1083098d6ce4cacc63cc499a5b84f4400370a5177b2d495d6851010a7ee4b1f508f22167821048ce8879f345402c285312465caf8b4ede4036ed8a4ab17",
            "file": "src/app/components/tab/tab-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-tab-panel",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n  class=\"hc-tabview-panel\"\n  role=\"tabpanel\"\n  [hidden]=\"!selected\"\n  [attr.aria-hidden]=\"!selected\"\n>\n  <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "_selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'hc-tab-panel',\n  template: `\n    <div\n      class=\"hc-tabview-panel\"\n      role=\"tabpanel\"\n      [hidden]=\"!selected\"\n      [attr.aria-hidden]=\"!selected\"\n    >\n      <ng-content></ng-content>\n    </div>\n  `,\n  styles: [],\n})\nexport class TabPanelComponent {\n  _header!: string\n  _selected!: boolean\n\n  @Input() get header(): string {\n    return this._header\n  }\n\n  set header(header: string) {\n    this._header = header\n  }\n\n  @Input() get selected(): boolean {\n    return this._selected\n  }\n\n  set selected(val: boolean) {\n    this._selected = val\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "header": {
                    "name": "header",
                    "setSignature": {
                        "name": "header",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "header",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "header",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "header",
                        "type": "string",
                        "returnType": "string",
                        "line": 21
                    }
                },
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 29
                    }
                }
            }
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-40676d5d562058ce51b7f8f35a96ae91696ae072f9a9c217b183d99484d74d0082926ce50caccef002b08c037296deb2a0d7af59ed69406c81ff6b1d46e137f8",
            "file": "src/app/components/tab/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-tabs",
            "styleUrls": [
                "tabs.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"hc-tabview\">\n  <div class=\"hc-tabview-nav-container\">\n    <div class=\"hc-tabview-nav-content\">\n      <ul class=\"hc-tabview-nav\" role=\"tablist\">\n        <ng-template ngFor let-tab [ngForOf]=\"tabs\">\n          <li\n            role=\"presentation\"\n            [ngClass]=\"{ 'hc-tabview-highlight': tab.selected }\"\n          >\n            <a\n              role=\"tab\"\n              class=\"hc-tabview-nav-link\"\n              [attr.aria-selected]=\"tab.selected\"\n              (click)=\"open(tab)\"\n            >\n              <span class=\"hc-tabview-title\">{{ tab.header }}</span>\n            </a>\n          </li>\n        </ng-template>\n      </ul>\n    </div>\n  </div>\n  <div class=\"hc-tabview-panels\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tabPanels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabPanelComponent>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabPanelComponent"
                        }
                    ]
                },
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabPanelComponent[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "findSelectedTab",
                    "args": [],
                    "optional": false,
                    "returnType": "TabPanelComponent | null",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initTabs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n} from '@angular/core'\n\nimport { QueryList } from '@angular/core'\nimport { TabPanelComponent } from './tab-panel.component'\n\n@Component({\n  selector: 'hc-tabs',\n  template: `\n    <div class=\"hc-tabview\">\n      <div class=\"hc-tabview-nav-container\">\n        <div class=\"hc-tabview-nav-content\">\n          <ul class=\"hc-tabview-nav\" role=\"tablist\">\n            <ng-template ngFor let-tab [ngForOf]=\"tabs\">\n              <li\n                role=\"presentation\"\n                [ngClass]=\"{ 'hc-tabview-highlight': tab.selected }\"\n              >\n                <a\n                  role=\"tab\"\n                  class=\"hc-tabview-nav-link\"\n                  [attr.aria-selected]=\"tab.selected\"\n                  (click)=\"open(tab)\"\n                >\n                  <span class=\"hc-tabview-title\">{{ tab.header }}</span>\n                </a>\n              </li>\n            </ng-template>\n          </ul>\n        </div>\n      </div>\n      <div class=\"hc-tabview-panels\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  `,\n  styleUrls: ['tabs.component.scss'],\n})\nexport class TabsComponent implements AfterContentInit {\n  tabs!: TabPanelComponent[]\n\n  @ContentChildren(TabPanelComponent) tabPanels!: QueryList<TabPanelComponent>\n\n  constructor(public cd: ChangeDetectorRef) {}\n\n  ngAfterContentInit(): void {\n    this.initTabs()\n  }\n\n  findSelectedTab(): TabPanelComponent | null {\n    const tab = this.tabs.find((tab) => tab.selected)\n\n    if (tab) {\n      return tab\n    }\n\n    return null\n  }\n\n  initTabs(): void {\n    this.tabs = this.tabPanels.toArray()\n    const selectedTab = this.findSelectedTab()\n    if (!selectedTab && this.tabs.length) {\n      this.tabs[0].selected = true\n    }\n\n    this.cd.markForCheck()\n  }\n\n  open(tab: TabPanelComponent) {\n    if (!tab.selected) {\n      const selectedTab = this.findSelectedTab()\n\n      if (selectedTab) {\n        selectedTab.selected = false\n      }\n\n      tab.selected = true\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-tabview {\n  .hc-tabview-nav {\n    background: var(--neutral-white);\n    border: 1px solid var(--neutral-divider);\n    border-width: 0 0 2px 0;\n    display: flex;\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    flex: 1 1 auto;\n\n    li {\n      margin-right: 0;\n\n      .hc-tabview-nav-link {\n        border: solid var(--neutral-divider);\n        border-width: 0 0 2px 0;\n        border-color: transparent transparent var(--neutral-divider) transparent;\n        background: var(--neutral-white);\n        color: var(--neutral-black);\n        padding: 1.25rem;\n        font-weight: 700;\n        border-top-right-radius: 6px;\n        border-top-left-radius: 6px;\n        transition: box-shadow 0.2s;\n        margin: 0 0 -2px 0;\n        cursor: pointer;\n        user-select: none;\n        display: flex;\n        align-items: center;\n        position: relative;\n        text-decoration: none;\n        overflow: hidden;\n      }\n    }\n  }\n}\n\n.hc-tabview .hc-tabview-nav li.hc-tabview-highlight .hc-tabview-nav-link {\n  background: var(--neutral-white);\n  border-color: var(--primary-default);\n  color: var(--primary-default);\n}\n\n.hc-tabview\n  .hc-tabview-nav\n  li:not(.hc-tabview-highlight):not(.hc-tabview-disabled):hover\n  .hc-tabview-nav-link {\n  background: var(--neutral-white);\n  border-color: var(--neutral-gray);\n  color: var(--neutral-gray);\n}\n\n.hc-tabview-nav-container {\n  position: relative;\n}\n\n.hc-tabview-nav-content {\n  overflow-x: auto;\n  overflow-y: hidden;\n  scroll-behavior: smooth;\n  scrollbar-width: none;\n  overscroll-behavior: contain auto;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n}\n\n.hc-tabview-panels {\n  background: var(--neutral-white);\n  padding: 1.25rem;\n  border: 0 none;\n  color: var(--neutral-black);\n  border-bottom-right-radius: 6px;\n  border-bottom-left-radius: 6px;\n}\n",
                    "styleUrl": "tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "TagComponent",
            "id": "component-TagComponent-223fb9104bac55573505b595912ce025b643ec0ea1135af71e905505baff5a41ed658b9fcb2e5e7753222bf12d2dca4330454927cad7b2bad8b369984fc20755",
            "file": "src/app/components/tag/tag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-tag",
            "styleUrls": [],
            "styles": [
                "\n      .hc-tag {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        color: var(--neutral-white);\n        padding: 4px 10px;\n        border-radius: 6px;\n      }\n\n      .hc-tag-primary {\n        background-color: var(--primary-default);\n      }\n\n      .hc-tag-success {\n        background-color: var(--green-default);\n      }\n\n      .hc-tag-info {\n        background-color: var(--primary-default);\n      }\n\n      .hc-tag-warning {\n        background-color: var(--yellow-default);\n      }\n\n      .hc-tag-danger {\n        background-color: var(--red-default);\n      }\n\n      .hc-tag-rounded {\n        border-radius: 10rem;\n      }\n    "
            ],
            "template": "<span class=\"small2\" role=\"tag\" [ngClass]=\"classes\" [style]=\"style\">\n  <ng-content></ng-content>\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "rounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "severity",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "\"success\" | \"info\" | \"warning\" | \"danger\" | \"primary\"",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "IStyle",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nimport { IStyle } from './../../common/models/style.model'\n\n@Component({\n  selector: 'hc-tag',\n  template: `\n    <span class=\"small2\" role=\"tag\" [ngClass]=\"classes\" [style]=\"style\">\n      <ng-content></ng-content>\n    </span>\n  `,\n  styles: [\n    `\n      .hc-tag {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        color: var(--neutral-white);\n        padding: 4px 10px;\n        border-radius: 6px;\n      }\n\n      .hc-tag-primary {\n        background-color: var(--primary-default);\n      }\n\n      .hc-tag-success {\n        background-color: var(--green-default);\n      }\n\n      .hc-tag-info {\n        background-color: var(--primary-default);\n      }\n\n      .hc-tag-warning {\n        background-color: var(--yellow-default);\n      }\n\n      .hc-tag-danger {\n        background-color: var(--red-default);\n      }\n\n      .hc-tag-rounded {\n        border-radius: 10rem;\n      }\n    `,\n  ],\n})\nexport class TagComponent {\n  @Input() severity: 'success' | 'info' | 'warning' | 'danger' | 'primary' = 'primary'\n  @Input() style?: IStyle\n  @Input() rounded = false\n\n  get classes() {\n    return {\n      ['hc-tag']: true,\n      [`hc-tag-${this.severity}`]: true,\n      ['hc-tag-rounded']: this.rounded,\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-tag {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        color: var(--neutral-white);\n        padding: 4px 10px;\n        border-radius: 6px;\n      }\n\n      .hc-tag-primary {\n        background-color: var(--primary-default);\n      }\n\n      .hc-tag-success {\n        background-color: var(--green-default);\n      }\n\n      .hc-tag-info {\n        background-color: var(--primary-default);\n      }\n\n      .hc-tag-warning {\n        background-color: var(--yellow-default);\n      }\n\n      .hc-tag-danger {\n        background-color: var(--red-default);\n      }\n\n      .hc-tag-rounded {\n        border-radius: 10rem;\n      }\n    \n",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 54
                    }
                }
            }
        },
        {
            "name": "TimelineComponent",
            "id": "component-TimelineComponent-70fd71aa562277e7e81bd21229dda76e73f24ccdf45d35f8dca1b38ce51e2e959112f9c8f1ddce4416ef124f87bcf273ceaef3318fd6d9be4e2b208bbe9c4011",
            "file": "src/app/components/timeline/timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-timeline",
            "styleUrls": [
                "timeline.component.scss"
            ],
            "styles": [],
            "template": "<div [ngClass]=\"classes\" [class]=\"styleClass\">\n  <div\n    *ngFor=\"let event of value; let last = last\"\n    class=\"hc-timeline-event\"\n    [style]=\"style\"\n  >\n    <div class=\"hc-timeline-event-opposite\">\n      <ng-container\n        *ngTemplateOutlet=\"oppositeTemplate; context: { $implicit: event }\"\n      ></ng-container>\n    </div>\n    <div class=\"hc-timeline-event-separator\">\n      <ng-container *ngIf=\"markerTemplate; else marker\">\n        <ng-container\n          *ngTemplateOutlet=\"markerTemplate; context: { $implicit: event, last }\"\n        ></ng-container>\n      </ng-container>\n      <ng-template #marker>\n        <div class=\"hc-timeline-event-marker\"></div>\n      </ng-template>\n      <ng-container *ngIf=\"connectorTemplate; else connector\">\n        <ng-container\n          *ngTemplateOutlet=\"connectorTemplate; context: { $implicit: event, last }\"\n        ></ng-container>\n      </ng-container>\n      <ng-template #connector>\n        <div *ngIf=\"!last\" class=\"hc-timeline-event-connector\"></div>\n      </ng-template>\n    </div>\n    <div class=\"hc-timeline-event-content\">\n      <ng-container\n        *ngTemplateOutlet=\"contentTemplate; context: { $implicit: event }\"\n      ></ng-container>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "layout",
                    "defaultValue": "'vertical'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "\"vertical\" | \"horizontal\"",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "IStyle",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "T[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "connectorTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "contentTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "markerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "oppositeTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TemplateDirective"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  Input,\n  QueryList,\n  TemplateRef,\n} from '@angular/core'\n\nimport { IStyle } from './../../common/models/style.model'\nimport { TemplateDirective } from './../../directives/template/template.directive'\n\n@Component({\n  selector: 'hc-timeline',\n  template: `\n    <div [ngClass]=\"classes\" [class]=\"styleClass\">\n      <div\n        *ngFor=\"let event of value; let last = last\"\n        class=\"hc-timeline-event\"\n        [style]=\"style\"\n      >\n        <div class=\"hc-timeline-event-opposite\">\n          <ng-container\n            *ngTemplateOutlet=\"oppositeTemplate; context: { $implicit: event }\"\n          ></ng-container>\n        </div>\n        <div class=\"hc-timeline-event-separator\">\n          <ng-container *ngIf=\"markerTemplate; else marker\">\n            <ng-container\n              *ngTemplateOutlet=\"markerTemplate; context: { $implicit: event, last }\"\n            ></ng-container>\n          </ng-container>\n          <ng-template #marker>\n            <div class=\"hc-timeline-event-marker\"></div>\n          </ng-template>\n          <ng-container *ngIf=\"connectorTemplate; else connector\">\n            <ng-container\n              *ngTemplateOutlet=\"connectorTemplate; context: { $implicit: event, last }\"\n            ></ng-container>\n          </ng-container>\n          <ng-template #connector>\n            <div *ngIf=\"!last\" class=\"hc-timeline-event-connector\"></div>\n          </ng-template>\n        </div>\n        <div class=\"hc-timeline-event-content\">\n          <ng-container\n            *ngTemplateOutlet=\"contentTemplate; context: { $implicit: event }\"\n          ></ng-container>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['timeline.component.scss'],\n})\nexport class TimelineComponent<T> implements AfterContentInit {\n  @Input() value: T[] = []\n  @Input() layout: 'vertical' | 'horizontal' = 'vertical'\n  @Input() style?: IStyle\n  @Input() styleClass!: string\n\n  contentTemplate!: TemplateRef<TemplateDirective>\n  markerTemplate?: TemplateRef<TemplateDirective>\n  connectorTemplate?: TemplateRef<TemplateDirective>\n  oppositeTemplate!: TemplateRef<TemplateDirective>\n\n  @ContentChildren(TemplateDirective) templates!: QueryList<TemplateDirective>\n\n  ngAfterContentInit(): void {\n    this.templates.forEach((item) => {\n      switch (item.getType()) {\n        case 'content':\n          this.contentTemplate = item.template\n          break\n        case 'marker':\n          this.markerTemplate = item.template\n          break\n        case 'connector':\n          this.connectorTemplate = item.template\n          break\n        case 'opposite':\n          this.oppositeTemplate = item.template\n          break\n      }\n    })\n  }\n\n  get classes() {\n    return {\n      'hc-timeline': true,\n      ['hc-timeline-vertical']: this.layout === 'vertical',\n      ['hc-timeline-horizontal']: this.layout === 'horizontal',\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-timeline {\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n\n  &.hc-timeline-vertical {\n    .hc-timeline-event-connector {\n      width: 2px;\n    }\n  }\n\n  .hc-timeline-event-connector {\n    background-color: var(--neutral-divider);\n  }\n}\n\n.hc-timeline-horizontal {\n  flex-direction: row;\n\n  .hc-timeline-event-content {\n    padding: 1rem 0;\n    flex: 1;\n  }\n\n  .hc-timeline-event-separator {\n    flex-direction: row;\n    position: relative;\n  }\n\n  .hc-timeline-event {\n    flex-direction: column;\n    flex: 1;\n    z-index: 1;\n\n    &:last-child {\n      flex: 0;\n    }\n  }\n\n  .hc-timeline-event-connector {\n    height: 2px;\n    width: 100%;\n    background-color: var(--neutral-divider);\n    flex-grow: 1;\n    position: absolute;\n    z-index: -1;\n  }\n}\n\n.hc-timeline-event {\n  display: flex;\n  position: relative;\n  min-height: 70px;\n\n  &:last-child {\n    min-height: 0;\n  }\n}\n\n.hc-timeline-event-separator {\n  flex: 0;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\n\n.hc-timeline-event-marker {\n  display: flex;\n  align-self: baseline;\n  border: 2px solid var(--primary-default);\n  border-radius: 50%;\n  width: 1rem;\n  height: 1rem;\n  background-color: var(--neutral-white);\n}\n\n.hc-timeline-event-connector {\n  flex-grow: 1;\n}\n\n.hc-timeline-event-content {\n  padding: 0 1rem;\n  width: 100%;\n}\n\n.hc-timeline-event:last-child {\n  min-height: 0;\n}\n",
                    "styleUrl": "timeline.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 87
                    }
                }
            }
        },
        {
            "name": "TimelineEventsAndMeetingsComponent",
            "id": "component-TimelineEventsAndMeetingsComponent-be7ccf05c91a129729f214e6b3d08f1574bf31d0ec4bb01579037abd46aaef9a5b48bf6eccb53317666769f097b2d53863d43a13311de6e514b201550a38bd15",
            "file": "src/app/modules/dashboard/components/timeline-events-and-meetings/timeline-events-and-meetings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-timeline-events-and-meetings",
            "styleUrls": [],
            "styles": [
                "\n      .custom-marker {\n        display: flex;\n        width: 2.5rem;\n        height: 2.5rem;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        z-index: 1;\n      }\n\n      .hc-timeline-title {\n        margin-bottom: 1rem;\n      }\n    "
            ],
            "template": "<h5 class=\"hc-timeline-title\">{{ title }}</h5>\n<hc-timeline [value]=\"timeline\">\n  <ng-template hcTemplate=\"marker\" let-event>\n    <span class=\"custom-marker\" [style.backgroundColor]=\"event.color\">\n      <hc-icon\n        [icon]=\"event.icon\"\n        [style]=\"{ color: 'var(--neutral-white)' }\"\n      ></hc-icon>\n    </span>\n  </ng-template>\n  <ng-template hcTemplate=\"content\" let-event>\n    <div style=\"margin-bottom: 2.5rem;\">\n      <div\n        style=\"display: flex; justify-content: space-between; margin-bottom: 0.5rem; width: 100%;\"\n      >\n        <div class=\"subtitle1\" style=\"color: var(--neutral-black);\">\n          {{ event.status }}\n        </div>\n        <div\n          class=\"small2\"\n          style=\"color: var(--neutral-gray); display: flex; align-items: center;\"\n        >\n          {{ event.date | date: 'short' }}\n          <hc-icon\n            size=\"small\"\n            icon=\"schedule\"\n            [style]=\"{ 'margin-left': '0.5rem' }\"\n          ></hc-icon>\n        </div>\n      </div>\n      <div class=\"body2\" style=\"color: var(--neutral-gray-dark)\">\n        {{ event.description }}\n      </div>\n    </div>\n  </ng-template>\n</hc-timeline>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "timeline",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "ITimelineEventsAndMettings[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'\n\nexport interface ITimelineEventsAndMettings {\n  status: string\n  date: Date\n  description: string\n  icon: string\n  color: string\n}\n\n@Component({\n  selector: 'hc-timeline-events-and-meetings',\n  template: `\n    <h5 class=\"hc-timeline-title\">{{ title }}</h5>\n    <hc-timeline [value]=\"timeline\">\n      <ng-template hcTemplate=\"marker\" let-event>\n        <span class=\"custom-marker\" [style.backgroundColor]=\"event.color\">\n          <hc-icon\n            [icon]=\"event.icon\"\n            [style]=\"{ color: 'var(--neutral-white)' }\"\n          ></hc-icon>\n        </span>\n      </ng-template>\n      <ng-template hcTemplate=\"content\" let-event>\n        <div style=\"margin-bottom: 2.5rem;\">\n          <div\n            style=\"display: flex; justify-content: space-between; margin-bottom: 0.5rem; width: 100%;\"\n          >\n            <div class=\"subtitle1\" style=\"color: var(--neutral-black);\">\n              {{ event.status }}\n            </div>\n            <div\n              class=\"small2\"\n              style=\"color: var(--neutral-gray); display: flex; align-items: center;\"\n            >\n              {{ event.date | date: 'short' }}\n              <hc-icon\n                size=\"small\"\n                icon=\"schedule\"\n                [style]=\"{ 'margin-left': '0.5rem' }\"\n              ></hc-icon>\n            </div>\n          </div>\n          <div class=\"body2\" style=\"color: var(--neutral-gray-dark)\">\n            {{ event.description }}\n          </div>\n        </div>\n      </ng-template>\n    </hc-timeline>\n  `,\n  styles: [\n    `\n      .custom-marker {\n        display: flex;\n        width: 2.5rem;\n        height: 2.5rem;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        z-index: 1;\n      }\n\n      .hc-timeline-title {\n        margin-bottom: 1rem;\n      }\n    `,\n  ],\n})\nexport class TimelineEventsAndMeetingsComponent {\n  @Input() title!: string\n  @Input() timeline: ITimelineEventsAndMettings[] = []\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .custom-marker {\n        display: flex;\n        width: 2.5rem;\n        height: 2.5rem;\n        align-items: center;\n        justify-content: center;\n        border-radius: 50%;\n        z-index: 1;\n      }\n\n      .hc-timeline-title {\n        margin-bottom: 1rem;\n      }\n    \n"
        },
        {
            "name": "ToastComponent",
            "id": "component-ToastComponent-874f809749586f95dae4ebb22567f33023a199bb9718e229c2661dffb3a42ee4a51ddc146bebb081ce042fe7de1ff6454b536b060a86bad0613a6eaa13f5fab6",
            "file": "src/app/components/toast/toast.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-toast",
            "styleUrls": [
                "toast.component.scss"
            ],
            "styles": [],
            "template": "<div #container [ngClass]=\"'hc-toast hc-toast-' + position\">\n  <hc-toast-item\n    *ngFor=\"let message of messages; let i = index\"\n    @toastAnimation\n    [message]=\"message\"\n    [index]=\"i\"\n    [showTransformOptions]=\"showTransformOptions\"\n    [showTransitionOptions]=\"showTransitionOptions\"\n    [hideTransformOptions]=\"hideTransformOptions\"\n    [hideTransitionOptions]=\"hideTransitionOptions\"\n    (onClose)=\"onToastClose($event)\"\n    (@toastAnimation.start)=\"onAnimationStart($event)\"\n    (@toastAnimation.done)=\"onAnimationEnd($event)\"\n  ></hc-toast-item>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoZIndex",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "baseZIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "hideTransformOptions",
                    "defaultValue": "'translateY(-100%)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hideTransitionOptions",
                    "defaultValue": "'250ms ease-in'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'top-right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "preventDuplicates",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "preventOpenDuplicates",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTransformOptions",
                    "defaultValue": "'translateY(100%)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showTransitionOptions",
                    "defaultValue": "'300ms ease-out'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter<{ message: IMessage }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HcConfig",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "containerViewChild",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container'"
                        }
                    ]
                },
                {
                    "name": "messages",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMessage[] | null",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "messagesArchieve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMessage[]",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "messageService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MessageService",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messageSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "messages",
                            "type": "IMessage[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "messages",
                            "type": "IMessage[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canAdd",
                    "args": [
                        {
                            "name": "message",
                            "type": "IMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "IMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "containsMessage",
                    "args": [
                        {
                            "name": "collection",
                            "type": "IMessage[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "IMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collection",
                            "type": "IMessage[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "IMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAnimationEnd",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAnimationStart",
                    "args": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onToastClose",
                    "args": [
                        {
                            "name": "event",
                            "type": "IOnClose",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IOnClose",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AnimationEvent,\n  animateChild,\n  query,\n  transition,\n  trigger,\n} from '@angular/animations'\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core'\nimport { IMessage, MessageService } from './message.service'\n\nimport { HcConfig } from '../../common/hc-config/hc-config.service'\nimport { IOnClose } from './toast-item.component'\nimport { ObjectUtils } from './../../common/object-utils/object-utils'\nimport { Subscription } from 'rxjs'\nimport { ZIndexUtils } from '../../common/z-index-utils/z-index-utils'\n\n@Component({\n  selector: 'hc-toast',\n  template: `\n    <div #container [ngClass]=\"'hc-toast hc-toast-' + position\">\n      <hc-toast-item\n        *ngFor=\"let message of messages; let i = index\"\n        @toastAnimation\n        [message]=\"message\"\n        [index]=\"i\"\n        [showTransformOptions]=\"showTransformOptions\"\n        [showTransitionOptions]=\"showTransitionOptions\"\n        [hideTransformOptions]=\"hideTransformOptions\"\n        [hideTransitionOptions]=\"hideTransitionOptions\"\n        (onClose)=\"onToastClose($event)\"\n        (@toastAnimation.start)=\"onAnimationStart($event)\"\n        (@toastAnimation.done)=\"onAnimationEnd($event)\"\n      ></hc-toast-item>\n    </div>\n  `,\n  styleUrls: ['toast.component.scss'],\n  animations: [\n    trigger('toastAnimation', [\n      transition(':enter, :leave', [query('@*', animateChild())]),\n    ]),\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToastComponent implements OnInit, OnDestroy {\n  messages: IMessage[] | null = null\n  messagesArchieve!: IMessage[]\n  messageSubscription!: Subscription\n\n  @Input() autoZIndex = true\n  @Input() baseZIndex = 0\n  @Input() hideTransformOptions = 'translateY(-100%)'\n  @Input() hideTransitionOptions = '250ms ease-in'\n  @Input() key?: string\n  @Input() preventOpenDuplicates = false\n  @Input() preventDuplicates = false\n  @Input() position = 'top-right'\n  @Input() showTransformOptions = 'translateY(100%)'\n  @Input() showTransitionOptions = '300ms ease-out'\n\n  @Output() onClose = new EventEmitter<{ message: IMessage }>()\n\n  @ViewChild('container') containerViewChild!: ElementRef<HTMLDivElement>\n\n  constructor(\n    public messageService: MessageService,\n    public config: HcConfig,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.messageSubscription = this.messageService.messageObserver.subscribe(\n      (messages) => {\n        if (messages) {\n          if (messages instanceof Array) {\n            const filteredMessages = messages.filter((m) => this.canAdd(m))\n            this.add(filteredMessages)\n          } else if (this.canAdd(messages)) {\n            this.add([messages])\n          }\n        }\n      }\n    )\n  }\n\n  add(messages: IMessage[]): void {\n    this.messages = this.messages ? [...this.messages, ...messages] : [...messages]\n\n    if (this.preventDuplicates) {\n      this.messagesArchieve = this.messagesArchieve\n        ? [...this.messagesArchieve, ...messages]\n        : [...messages]\n    }\n\n    this.cd.markForCheck()\n  }\n\n  containsMessage(collection: IMessage[], message: IMessage): boolean {\n    if (!collection) {\n      return false\n    }\n\n    return (\n      collection.find((m) => {\n        return m.detail === message.detail && m.severity === message.severity\n      }) !== null\n    )\n  }\n\n  canAdd(message: IMessage): boolean {\n    let allow = this.key === message.key\n\n    if (allow && this.preventOpenDuplicates && this.messages) {\n      allow = !this.containsMessage(this.messages, message)\n    }\n\n    if (allow && this.preventDuplicates) {\n      allow = !this.containsMessage(this.messagesArchieve, message)\n    }\n\n    return allow\n  }\n\n  onAnimationStart(event: AnimationEvent): void {\n    if (event.fromState === 'void') {\n      if (this.autoZIndex && this.containerViewChild.nativeElement.style.zIndex === '') {\n        ZIndexUtils.set(\n          'modal',\n          this.containerViewChild.nativeElement,\n          this.baseZIndex || this.config.zIndex.modal\n        )\n      }\n    }\n  }\n\n  onAnimationEnd(event: AnimationEvent): void {\n    if (event.toState === 'void') {\n      if (this.autoZIndex && ObjectUtils.isEmpty(this.messages)) {\n        ZIndexUtils.clear(this.containerViewChild.nativeElement)\n      }\n    }\n  }\n\n  onToastClose(event: IOnClose) {\n    this.messages?.splice(event.index, 1)\n\n    this.onClose.emit({\n      message: event.message,\n    })\n\n    this.cd.detectChanges()\n  }\n\n  ngOnDestroy(): void {\n    if (this.messageSubscription) {\n      this.messageSubscription.unsubscribe()\n    }\n\n    if (this.containerViewChild && this.autoZIndex) {\n      ZIndexUtils.clear(this.containerViewChild.nativeElement)\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-toast {\n  opacity: 0.9;\n  position: fixed;\n  width: 25rem;\n}\n\n.hc-toast-message {\n  margin: 0 0 1rem 0;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n  border-radius: 4px;\n}\n\n.hc-toast-message-content {\n  padding: 1rem;\n  border-width: 0 0 0 6px;\n  display: flex;\n  align-items: center;\n\n  .hc-toast-message-icon {\n    font-size: 1.5rem;\n  }\n\n  .hc-toast-message-text {\n    flex: 1 1 auto;\n    margin: 0 0 0 6px;\n  }\n\n  .hc-toast-summary {\n    font-weight: 700;\n  }\n\n  .hc-toast-detail {\n    margin: 0;\n  }\n}\n\n.hc-toast-top-right {\n  top: 20px;\n  right: 20px;\n}\n\n.hc-toast-message-success {\n  background: var(--green-default);\n  color: var(--neutral-black);\n\n  .hc-toast-icon-close {\n    color: var(--neutral-black);\n  }\n}\n\n.hc-toast-message-error {\n  background: var(--red-default);\n  color: var(--neutral-white);\n\n  .hc-toast-icon-close {\n    color: var(--neutral-white);\n  }\n}\n\n.hc-toast-icon-close {\n  width: 1.5rem;\n  height: 1.5rem;\n  border-radius: 50%;\n  background: transparent;\n  transition: background-color 0.2s, color 0.2s, box-shadow 0.2s;\n  border: none;\n  cursor: pointer;\n}\n",
                    "styleUrl": "toast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "HcConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "HcConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ]
        },
        {
            "name": "ToastItemComponent",
            "id": "component-ToastItemComponent-39f71cd172e45da441b9825e8849e5882983178979f0afbcec3fc35b365350d19248ac616e43bb0169c70b6ecff24cbd68b47465a1849dc0351a0b8cb6c34b67",
            "file": "src/app/components/toast/toast-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-toast-item",
            "styleUrls": [
                "toast.component.scss"
            ],
            "styles": [],
            "template": "<div\n  [ngClass]=\"classes\"\n  [@messageState]=\"{\n    value: 'visible',\n    params: {\n      showTransformParams: showTransformOptions,\n      showTransitionParams: showTransitionOptions,\n      hideTransformParams: hideTransformOptions,\n      hideTransitionParams: hideTransitionOptions\n    }\n  }\"\n  (mouseenter)=\"onMouseEnter()\"\n  (mouseleave)=\"onMouseLeave()\"\n>\n  <div\n    class=\"hc-toast-message-content\"\n    role=\"alert\"\n    aria-live=\"assertive\"\n    aric-atomic=\"true\"\n  >\n    <span class=\"hc-toast-message-icon material-symbols-outlined\">info</span>\n    <div class=\"hc-toast-message-text\">\n      <div class=\"hc-toast-detail subtitle2\">{{ message.detail }}</div>\n    </div>\n    <button\n      type=\"button\"\n      class=\"hc-toast-icon-close\"\n      *ngIf=\"message.closable !== false\"\n      (click)=\"onCloseIconClick($event)\"\n    >\n      <span class=\"material-symbols-outlined\">close</span>\n    </button>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hideTransformOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hideTransitionOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "IMessage",
                    "decorators": []
                },
                {
                    "name": "showTransformOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showTransitionOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter<IOnClose>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "timeout",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeJS.Timeout | null",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "zone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearTimeout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initTimeout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseIconClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core'\nimport { animate, state, style, transition, trigger } from '@angular/animations'\n\nimport { IMessage } from './message.service'\n\nexport interface IOnClose {\n  index: number\n  message: IMessage\n}\n\n@Component({\n  selector: 'hc-toast-item',\n  template: `\n    <div\n      [ngClass]=\"classes\"\n      [@messageState]=\"{\n        value: 'visible',\n        params: {\n          showTransformParams: showTransformOptions,\n          showTransitionParams: showTransitionOptions,\n          hideTransformParams: hideTransformOptions,\n          hideTransitionParams: hideTransitionOptions\n        }\n      }\"\n      (mouseenter)=\"onMouseEnter()\"\n      (mouseleave)=\"onMouseLeave()\"\n    >\n      <div\n        class=\"hc-toast-message-content\"\n        role=\"alert\"\n        aria-live=\"assertive\"\n        aric-atomic=\"true\"\n      >\n        <span class=\"hc-toast-message-icon material-symbols-outlined\">info</span>\n        <div class=\"hc-toast-message-text\">\n          <div class=\"hc-toast-detail subtitle2\">{{ message.detail }}</div>\n        </div>\n        <button\n          type=\"button\"\n          class=\"hc-toast-icon-close\"\n          *ngIf=\"message.closable !== false\"\n          (click)=\"onCloseIconClick($event)\"\n        >\n          <span class=\"material-symbols-outlined\">close</span>\n        </button>\n      </div>\n    </div>\n  `,\n  styleUrls: ['toast.component.scss'],\n  animations: [\n    trigger('messageState', [\n      state(\n        'visible',\n        style({\n          transform: 'translateY(0)',\n          opacity: 1,\n        })\n      ),\n      transition('void => *', [\n        style({ transform: '{{showTransformParams}}', opacity: 0 }),\n        animate('{{showTransitionParams}}'),\n      ]),\n      transition('* => void', [\n        animate(\n          '{{hideTransitionParams}}',\n          style({\n            height: 0,\n            opacity: 0,\n            transform: '{{hideTransformParams}}',\n          })\n        ),\n      ]),\n    ]),\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ToastItemComponent implements AfterViewInit, OnDestroy {\n  timeout: NodeJS.Timeout | null = null\n\n  @Input() index!: number\n  @Input() hideTransformOptions!: string\n  @Input() hideTransitionOptions!: string\n  @Input() message!: IMessage\n  @Input() showTransformOptions!: string\n  @Input() showTransitionOptions!: string\n\n  @Output() onClose = new EventEmitter<IOnClose>()\n\n  constructor(public zone: NgZone) {}\n\n  ngAfterViewInit(): void {\n    this.initTimeout()\n  }\n\n  initTimeout() {\n    if (!this.message.sticky) {\n      this.zone.runOutsideAngular(() => {\n        this.timeout = setTimeout(() => {\n          this.onClose.emit({\n            index: this.index,\n            message: this.message,\n          })\n        }, this.message.life || 3000)\n      })\n    }\n  }\n\n  onCloseIconClick(event: Event): void {\n    this.clearTimeout()\n\n    this.onClose.emit({\n      index: this.index,\n      message: this.message,\n    })\n\n    event.preventDefault()\n  }\n\n  clearTimeout() {\n    if (this.timeout) {\n      clearTimeout(this.timeout)\n      this.timeout = null\n    }\n  }\n\n  onMouseEnter(): void {\n    this.clearTimeout()\n  }\n\n  onMouseLeave(): void {\n    this.initTimeout()\n  }\n\n  get classes() {\n    return {\n      [`hc-toast-message-${this.message.severity}`]: true,\n      'hc-toast-message': true,\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.clearTimeout()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hc-toast {\n  opacity: 0.9;\n  position: fixed;\n  width: 25rem;\n}\n\n.hc-toast-message {\n  margin: 0 0 1rem 0;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n  border-radius: 4px;\n}\n\n.hc-toast-message-content {\n  padding: 1rem;\n  border-width: 0 0 0 6px;\n  display: flex;\n  align-items: center;\n\n  .hc-toast-message-icon {\n    font-size: 1.5rem;\n  }\n\n  .hc-toast-message-text {\n    flex: 1 1 auto;\n    margin: 0 0 0 6px;\n  }\n\n  .hc-toast-summary {\n    font-weight: 700;\n  }\n\n  .hc-toast-detail {\n    margin: 0;\n  }\n}\n\n.hc-toast-top-right {\n  top: 20px;\n  right: 20px;\n}\n\n.hc-toast-message-success {\n  background: var(--green-default);\n  color: var(--neutral-black);\n\n  .hc-toast-icon-close {\n    color: var(--neutral-black);\n  }\n}\n\n.hc-toast-message-error {\n  background: var(--red-default);\n  color: var(--neutral-white);\n\n  .hc-toast-icon-close {\n    color: var(--neutral-white);\n  }\n}\n\n.hc-toast-icon-close {\n  width: 1.5rem;\n  height: 1.5rem;\n  border-radius: 50%;\n  background: transparent;\n  transition: background-color 0.2s, color 0.2s, box-shadow 0.2s;\n  border: none;\n  cursor: pointer;\n}\n",
                    "styleUrl": "toast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 98,
                "jsdoctags": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "",
                        "line": 145
                    }
                }
            }
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-88190f44dfe9301a41a64f944f81644d26e62c8e3e64affe3c96d96caab57df9e4a7ceb0be04d0e7f8e53619aa5468be409238a515f7c0e8e6999313f9dbaad4",
            "file": "src/app/components/toolbar/toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hc-toolbar",
            "styleUrls": [],
            "styles": [
                "\n      .hc-toolbar {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        flex-wrap: wrap;\n        background-color: var(--neutral-white);\n        padding: 0.5rem;\n      }\n\n      .hc-toolbar-group-left,\n      .hc-toolbar-group-right {\n        display: flex;\n        aling-item: center;\n      }\n    "
            ],
            "template": "<div class=\"hc-toolbar\" role=\"toolbar\" [ngStyle]=\"style\">\n  <ng-content></ng-content>\n  <div class=\"hc-toolbar-group-left\" *ngIf=\"leftTemplate\">\n    <ng-container *ngTemplateOutlet=\"leftTemplate\"></ng-container>\n  </div>\n  <div class=\"hc-toolbar-group-right\" *ngIf=\"rightTemplate\">\n    <ng-container *ngTemplateOutlet=\"rightTemplate\"></ng-container>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "IStyle",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "leftTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "rightTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TemplateDirective>",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TemplateDirective"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  Input,\n  QueryList,\n  TemplateRef,\n} from '@angular/core'\n\nimport { IStyle } from './../../common/models/style.model'\nimport { TemplateDirective } from './../../directives/template/template.directive'\n\n@Component({\n  selector: 'hc-toolbar',\n  template: `\n    <div class=\"hc-toolbar\" role=\"toolbar\" [ngStyle]=\"style\">\n      <ng-content></ng-content>\n      <div class=\"hc-toolbar-group-left\" *ngIf=\"leftTemplate\">\n        <ng-container *ngTemplateOutlet=\"leftTemplate\"></ng-container>\n      </div>\n      <div class=\"hc-toolbar-group-right\" *ngIf=\"rightTemplate\">\n        <ng-container *ngTemplateOutlet=\"rightTemplate\"></ng-container>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n      .hc-toolbar {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        flex-wrap: wrap;\n        background-color: var(--neutral-white);\n        padding: 0.5rem;\n      }\n\n      .hc-toolbar-group-left,\n      .hc-toolbar-group-right {\n        display: flex;\n        aling-item: center;\n      }\n    `,\n  ],\n})\nexport class ToolbarComponent implements AfterContentInit {\n  leftTemplate!: TemplateRef<TemplateDirective>\n  rightTemplate!: TemplateRef<TemplateDirective>\n\n  @Input() style?: IStyle\n\n  @ContentChildren(TemplateDirective) templates!: QueryList<TemplateDirective>\n\n  ngAfterContentInit(): void {\n    this.templates.forEach((item) => {\n      switch (item.getType()) {\n        case 'left':\n          this.leftTemplate = item.template\n          break\n\n        case 'right':\n          this.rightTemplate = item.template\n          break\n      }\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .hc-toolbar {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        flex-wrap: wrap;\n        background-color: var(--neutral-white);\n        padding: 0.5rem;\n      }\n\n      .hc-toolbar-group-left,\n      .hc-toolbar-group-right {\n        display: flex;\n        aling-item: center;\n      }\n    \n",
            "implements": [
                "AfterContentInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-75e482363843811716c31a78083ccf00223f82c5accf4082e297b262690c7aafcf5d5829eab0345d400570242c8ca3394cbae07c58b0287dbc4c58f690e8da02",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { LOCALE_ID, NgModule } from '@angular/core'\n\nimport { AppComponent } from './app.component'\nimport { AppRoutingModule } from './app-routing.module'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { BrowserModule } from '@angular/platform-browser'\nimport { HttpClientModule } from '@angular/common/http'\nimport { InputMaskModule } from '@ngneat/input-mask'\nimport { MarkdownModule } from 'ngx-markdown'\nimport { MswModule } from './components/msw/msw.module'\nimport localePt from '@angular/common/locales/pt'\nimport { registerLocaleData } from '@angular/common'\n\nregisterLocaleData(localePt, 'pt')\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    MswModule,\n    BrowserAnimationsModule,\n    MarkdownModule.forRoot(),\n    InputMaskModule.forRoot({ inputSelector: 'input', isAsync: false }),\n  ],\n  providers: [\n    {\n      provide: LOCALE_ID,\n      useValue: 'pt',\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "MswModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppointmentsModule",
            "id": "module-AppointmentsModule-b2ce8196f3e3a7ed3043f7b791eeefdce4a1cc9f65531a9051cb361df0b4a876c3219918d3d1a987ccc57495f38b40570f5ab7b9013f968ab1f3849f8e90184f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/appointments/appointments.module.ts",
            "methods": [],
            "sourceCode": "import { AppointmentsRoutingModule } from './appointments-routing.module'\nimport { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, AppointmentsRoutingModule],\n})\nexport class AppointmentsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppointmentsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppointmentsRoutingModule",
            "id": "module-AppointmentsRoutingModule-f2ecc91548ab0baeb29e3b225f826d60561d1e85d09ddf63b04d6d71b91c7579f6ef7e4308d0c7bd77c56b8fe1f4fefb960af806f214d3ef26d65ea5e5033f83",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/appointments/appointments-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { NgModule } from '@angular/core'\n\nconst routes: Routes = []\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AppointmentsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-e01f3cbb8c9c8ed4fad5d4eb3b2fca56d1048021d4cede23be4a135580cd15042d37b530e0d5ae1f6ea855446caa81fbd8d0043a85fac5c00ac85d083de2e7a6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { AuthGuard } from './modules/authentication/auth.guard'\nimport { NgModule } from '@angular/core'\nimport { PageNotFoundComponent } from './modules/authentication/page-not-found/page-not-found.component'\n\nconst routes: Routes = [\n  {\n    path: 'home',\n    canActivate: [AuthGuard],\n    loadChildren: () => \"import('./modules/home/home.module').then((m) => m.HomeModule)\",\n  },\n  {\n    path: 'auth',\n    loadChildren: () =>\n      \"import('./modules/authentication/authentication.module').then(\\\n        (m) => m.AuthenticationModule\\\n      )\",\n  },\n  {\n    path: 'patients',\n    loadChildren: () =>\n      \"import('./modules/patients/patients.module').then((m) => m.PatientsModule)\",\n  },\n  {\n    path: 'invoices',\n    loadChildren: () =>\n      \"import('./modules/invoices/invoices.module').then((m) => m.InvoicesModule)\",\n  },\n  // {\n  //   path: 'docs',\n  //   loadChildren: () => import('./modules/docs/docs.module').then((m) => m.DocsModule),\n  // },\n  {\n    path: '',\n    redirectTo: 'home',\n    pathMatch: 'full',\n  },\n  {\n    path: '**',\n    component: PageNotFoundComponent,\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthenticationModule",
            "id": "module-AuthenticationModule-6027c8cb31286076ad50c4643f71ee385b374459128a9915d222f906716a01cd4675586ed6aaa92ec4b9c9105b822b473cbc8f246306ca8eb6156bd5c0183d24",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/authentication/authentication.module.ts",
            "methods": [],
            "sourceCode": "import { AuthenticationRoutingModule } from './authentication-routing.module'\nimport { ButtonModule } from 'src/app/components/button/button.module'\nimport { CommonModule } from '@angular/common'\nimport { IconModule } from 'src/app/components/icon/icon.module'\nimport { InputModule } from 'src/app/components/input/input.module'\nimport { LinkModule } from 'src/app/components/link/link.module'\nimport { LoginComponent } from './login/login.component'\nimport { NgModule } from '@angular/core'\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component'\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { RegisterComponent } from './register/register.component'\nimport { SwitchModule } from 'src/app/components/switch/switch.module'\n\n@NgModule({\n  declarations: [LoginComponent, RegisterComponent, PageNotFoundComponent],\n  imports: [\n    CommonModule,\n    AuthenticationRoutingModule,\n    InputModule,\n    SwitchModule,\n    ButtonModule,\n    IconModule,\n    LinkModule,\n    ReactiveFormsModule,\n  ],\n})\nexport class AuthenticationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "PageNotFoundComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthenticationRoutingModule"
                        },
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "LinkModule"
                        },
                        {
                            "name": "SwitchModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthenticationRoutingModule",
            "id": "module-AuthenticationRoutingModule-cb79e0b62b625dfd1df69a86cac373bc926a74b4940373e8161f5a7e75d237e1c2ac8f54ec3d0f73036b5edf1d991b1407996b8551c95543b7850063ef42dc1d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/authentication/authentication-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { LoginComponent } from './login/login.component'\nimport { NgModule } from '@angular/core'\nimport { RegisterComponent } from './register/register.component'\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthenticationRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AvatarModule",
            "id": "module-AvatarModule-a6b3ef3cc997653fd8f5f2f7e6b6db8b07d04a419b655eb5b837e229284aa89267a44e319ab23ec94945f5055ccf0ec6c10cc3b4398cc358fbfb03f331fa28ff",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/avatar/avatar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { AvatarComponent } from './avatar.component'\n\n@NgModule({\n  declarations: [AvatarComponent],\n  imports: [CommonModule],\n  exports: [AvatarComponent],\n})\nexport class AvatarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BadgeModule",
            "id": "module-BadgeModule-95c79f73b27a0d8389da08fc62493c1629c898dd696fe15c657cdf8d13174fea38f096aed3f603c6621914c18e1fe52a68ab79bdd3243b2773400f7c5815eb21",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/badge/badge.module.ts",
            "methods": [],
            "sourceCode": "import { BadgeComponent } from './badge.component'\nimport { BadgeDirective } from './badge.directive'\nimport { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\n\n@NgModule({\n  declarations: [BadgeComponent, BadgeDirective],\n  imports: [CommonModule],\n  exports: [BadgeComponent, BadgeDirective],\n})\nexport class BadgeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BadgeComponent"
                        },
                        {
                            "name": "BadgeDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BadgeComponent"
                        },
                        {
                            "name": "BadgeDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BreadcrumbModule",
            "id": "module-BreadcrumbModule-584896e83380345bac4736e37cffd42ea82b8259c1ef48d061fdd96f081574c6b585b5846990de7481c75c3aa3e2cf3a371c0ae576e16fcf3080e1ffd98adec3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/breadcrumb/breadcrumb.module.ts",
            "methods": [],
            "sourceCode": "import { BreadcrumbComponent } from './breadcrumb.component'\nimport { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { RouterModule } from '@angular/router'\n\n@NgModule({\n  declarations: [BreadcrumbComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BreadcrumbComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BreadcrumbComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-56fa910fa0f69ac226a0ba0ed1ba8e681c665629a86f87d327e0a5ca22ccf8e1273011c31da2ab6e3a12759e1bef1704c5ff2544d8335243109805672ba9bb70",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { ButtonComponent } from './button.component'\nimport { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { ButtonDirective } from './button.directive'\n\n@NgModule({\n  declarations: [ButtonComponent, ButtonDirective],\n  imports: [CommonModule],\n  exports: [ButtonComponent],\n})\nexport class ButtonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "ButtonDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CardModule",
            "id": "module-CardModule-620f55031eb957774d5aa8df51ab2502054f2147834785d793bdae3b81230027655e20e4e59306f0dadc7cb670047d3e8cd0f7466dc4597dd1e84818b9e428cd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/card/card.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { CardComponent } from './card.component'\n\n@NgModule({\n  declarations: [CardComponent],\n  imports: [CommonModule],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxModule",
            "id": "module-CheckboxModule-a520d41134a0916dcf3b043f8ef8fc1436be7ccd22ea5b9df1237902606e5776bf4ae12ff1caa480cbace1c040758c9b74ecd06c1f64421902fcb663fd22891c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/checkbox/checkbox.module.ts",
            "methods": [],
            "sourceCode": "import { CheckboxComponent } from './checkbox.component'\nimport { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { ReactiveFormsModule } from '@angular/forms'\n\n@NgModule({\n  declarations: [CheckboxComponent],\n  imports: [CommonModule, ReactiveFormsModule],\n  exports: [CheckboxComponent, ReactiveFormsModule],\n})\nexport class CheckboxModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentsModule",
            "id": "module-ComponentsModule-178ddeee97175c159f32524a34c8d8e566342db00779d686ec2c18b03a6ed2111e5b7b5d0358882bd27843ee08dabd566c10fd4f1ebeb28d36f8a8d3a3f93d17",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/components.module.ts",
            "methods": [],
            "sourceCode": "import { ButtonModule } from './button/button.module'\nimport { IconModule } from './icon/icon.module'\nimport { InputModule } from './input/input.module'\nimport { LinkModule } from './link/link.module'\nimport { NgModule } from '@angular/core'\nimport { SwitchModule } from './switch/switch.module'\n\nconst modules = [InputModule, SwitchModule, ButtonModule, IconModule, LinkModule]\n\n@NgModule({\n  declarations: [],\n  imports: [modules],\n  exports: [modules],\n})\nexport class ComponentsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "LinkModule"
                        },
                        {
                            "name": "SwitchModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "LinkModule"
                        },
                        {
                            "name": "SwitchModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-48c0dd7ce8fcde177e271fb050e9e3c771a65b3ca49535db8f4b6b302e4e2f2d9197a0cdd00e33aafcd9d30cfc387439c1cb44a6a25c44284effc0a0ed31e4d5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { AvatarModule } from './../../components/avatar/avatar.module'\nimport { BreadcrumbModule } from './../../components/breadcrumb/breadcrumb.module'\nimport { CardModule } from './../../components/card/card.module'\nimport { CommonModule } from '@angular/common'\nimport { DashboardComponent } from './dashboard.component'\nimport { DashboardRoutingModule } from './dashboard-routing.module'\nimport { IconModule } from './../../components/icon/icon.module'\nimport { NgModule } from '@angular/core'\nimport { TabModule } from '../../components/tab/tab.module'\nimport { TableModule } from '../../components/table/table.module'\nimport { TagModule } from '../../components/tag/tag.module'\nimport { TemplateModule } from '../../directives/template/template.module'\nimport { TimelineEventsAndMeetingsComponent } from './components/timeline-events-and-meetings/timeline-events-and-meetings.component'\nimport { TimelineModule } from './../../components/timeline/timeline.module'\n\n@NgModule({\n  declarations: [DashboardComponent, TimelineEventsAndMeetingsComponent],\n  imports: [\n    CommonModule,\n    DashboardRoutingModule,\n    CardModule,\n    TimelineModule,\n    TemplateModule,\n    IconModule,\n    TableModule,\n    AvatarModule,\n    TagModule,\n    TabModule,\n    BreadcrumbModule,\n  ],\n})\nexport class DashboardModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "TimelineEventsAndMeetingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "BreadcrumbModule"
                        },
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "DashboardRoutingModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "TabModule"
                        },
                        {
                            "name": "TableModule"
                        },
                        {
                            "name": "TagModule"
                        },
                        {
                            "name": "TemplateModule"
                        },
                        {
                            "name": "TimelineModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "id": "module-DashboardRoutingModule-cda88b61793414e6650944c6acf78606f302103f424a7674cc0e64e4da2022f23628e51e58251a8fadac20f6f65cdb0cf6783152f331b66697a04fddf0fd8374",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/dashboard/dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { DashboardComponent } from './dashboard.component'\nimport { NgModule } from '@angular/core'\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DashboardComponent,\n    data: { breadcrumb: 'Dashboard' },\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DashboardRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DataModule",
            "id": "module-DataModule-8126f2a34dd3eada3896131d7d9e3250bd6c6ee87ac6f0fd1f013b02cf762e678705b404777bae3c8bade0b7f4b6b7032ae38d7666bbbce6b2ebf69f619d7847",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/docs/data/data.module.ts",
            "methods": [],
            "sourceCode": "import { CardModule } from './../../../components/card/card.module'\nimport { CommonModule } from '@angular/common'\nimport { DataRoutingModule } from './data-routing.module'\nimport { IconModule } from './../../../components/icon/icon.module'\nimport { NgModule } from '@angular/core'\nimport { PagePaginationComponent } from './page-pagination/page-pagination.component'\nimport { PageTimelineComponent } from './page-timeline/page-timeline.component'\nimport { PaginationModule } from 'src/app/components/pagination/pagination.module'\nimport { TemplateModule } from '../../../directives/template/template.module'\nimport { TimelineModule } from './../../../components/timeline/timeline.module'\n\n@NgModule({\n  declarations: [PagePaginationComponent, PageTimelineComponent],\n  imports: [\n    CommonModule,\n    DataRoutingModule,\n    PaginationModule,\n    CardModule,\n    TimelineModule,\n    TemplateModule,\n    IconModule,\n  ],\n})\nexport class DataModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PagePaginationComponent"
                        },
                        {
                            "name": "PageTimelineComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "DataRoutingModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "PaginationModule"
                        },
                        {
                            "name": "TemplateModule"
                        },
                        {
                            "name": "TimelineModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DataRoutingModule",
            "id": "module-DataRoutingModule-e1a43c7b2743574dbce5bb8679662d563981fe1edc10d839b5374d8151fe6ddd4c28f5aef868ed741fb38b036e63f64d1cd295814434677fa11868ddbe56084c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/docs/data/data-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { NgModule } from '@angular/core'\nimport { PagePaginationComponent } from './page-pagination/page-pagination.component'\nimport { PageTimelineComponent } from './page-timeline/page-timeline.component'\n\nconst routes: Routes = [\n  {\n    path: 'pagination',\n    component: PagePaginationComponent,\n  },\n  {\n    path: 'timeline',\n    component: PageTimelineComponent,\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DataRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DirectivesModule",
            "id": "module-DirectivesModule-e91ed9d4e7ced19a29722bfec083167c0422732e9da70ae0c1a9e014cdc23b8254978e2d977d228844524531c12861202f81e11ddf3b215dbd46aa7ab871328e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/directives/directives.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n})\nexport class DirectivesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DocsModule",
            "id": "module-DocsModule-303ee7a375cffdf613dbdcae6381d9f1e726e2cf75a9044ad4f85deb8286e400c93859806190caaeee94a7147b6a644b4a4a8228f2c932d720c3be2ed320a71b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/docs/docs.module.ts",
            "methods": [],
            "sourceCode": "import { LogoModule } from './../../components/logo/logo.module'\nimport { SidebarModule } from './../../components/sidebar/sidebar.module'\nimport { CommonModule } from '@angular/common'\nimport { DocsComponent } from './docs/docs.component'\nimport { DocsRoutingModule } from './docs-routing.module'\nimport { NgModule } from '@angular/core'\nimport { TableModule } from './table/table.module'\nimport { TableService } from 'src/app/components/table/table.service'\nimport { MenuModule } from 'src/app/components/menu/menu.module'\n\n@NgModule({\n  declarations: [DocsComponent],\n  imports: [\n    CommonModule,\n    DocsRoutingModule,\n    TableModule,\n    SidebarModule,\n    LogoModule,\n    MenuModule,\n  ],\n  providers: [TableService],\n})\nexport class DocsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "TableService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DocsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DocsRoutingModule"
                        },
                        {
                            "name": "LogoModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "SidebarModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DocsRoutingModule",
            "id": "module-DocsRoutingModule-e72cff8fe095fe8d8ecf0babaf290d6029b0a5cda361c4c874e3e681b3e485f9dcfd0b17c4c6125237b94318093b3d870bea64604944bdfe70300159c1061f6e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/docs/docs-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { DocsComponent } from './docs/docs.component'\nimport { NgModule } from '@angular/core'\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DocsComponent,\n    children: [\n      {\n        path: 'table',\n        loadChildren: () => \"import('./table/table.module').then((m) => m.TableModule)\",\n      },\n      {\n        path: 'form',\n        loadChildren: () => \"import('./form/form.module').then((m) => m.FormModule)\",\n      },\n      {\n        path: 'data',\n        loadChildren: () => \"import('./data/data.module').then((m) => m.DataModule)\",\n      },\n      {\n        path: 'misc',\n        loadChildren: () => \"import('./misc/misc.module').then((m) => m.MiscModule)\",\n      },\n      {\n        path: 'overlay',\n        loadChildren: () =>\n          \"import('./overlay/overlay.module').then((m) => m.OverlayModule)\",\n      },\n    ],\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DocsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DropdownModule",
            "id": "module-DropdownModule-f498edd504b825869f668fd9068c6f41e735e4f7e4b457296050323d495e07e74828b6d29dcf0e63f2fc045f2b8a726ec2b76f6af15d15f3665f0e1dafc16ba7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/dropdown/dropdown.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { DropdownComponent } from './dropdown.component'\n\n@NgModule({\n  declarations: [DropdownComponent],\n  imports: [CommonModule],\n  exports: [DropdownComponent],\n})\nexport class DropdownModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DropdownComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DropdownComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormModule",
            "id": "module-FormModule-62de1bd090f9c86789347d4b803631b0ffe071e763710a32b154c0f1b43a12cff349965ce69b9a1541d284e8a520668066b159a7f41c79cbbb3255b4f29f0994",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/docs/form/form.module.ts",
            "methods": [],
            "sourceCode": "import { FormsModule, ReactiveFormsModule } from '@angular/forms'\n\nimport { CardModule } from './../../../components/card/card.module'\nimport { CheckboxModule } from './../../../components/checkbox/checkbox.module'\nimport { CommonModule } from '@angular/common'\nimport { FormRoutingModule } from './form-routing.module'\nimport { InputModule } from 'src/app/components/input/input.module'\nimport { NgModule } from '@angular/core'\nimport { PageCheckboxComponent } from './page-checkbox/page-checkbox.component'\nimport { PageInputTextComponent } from './page-input-text/page-input-text.component'\nimport { PageSelectComponent } from './page-select/page-select.component'\nimport { PageSwitchComponent } from './page-switch/page-switch.component'\nimport { SelectModule } from '../../../components/select/select.module'\nimport { SwitchModule } from '../../../components/switch/switch.module'\n\n@NgModule({\n  declarations: [\n    PageInputTextComponent,\n    PageCheckboxComponent,\n    PageSelectComponent,\n    PageSwitchComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormRoutingModule,\n    InputModule,\n    ReactiveFormsModule,\n    CardModule,\n    CheckboxModule,\n    FormsModule,\n    SelectModule,\n    SwitchModule,\n  ],\n})\nexport class FormModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PageCheckboxComponent"
                        },
                        {
                            "name": "PageInputTextComponent"
                        },
                        {
                            "name": "PageSelectComponent"
                        },
                        {
                            "name": "PageSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "CheckboxModule"
                        },
                        {
                            "name": "FormRoutingModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "SwitchModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormRoutingModule",
            "id": "module-FormRoutingModule-bf16570f47bcffc73656d8fca9feec7d505925c5d0f8dcbfb181e3a7405474db2c55320f10547fcfed16e616630aad25eb9b1382ca67e3c6a1841fe50f5ff15f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/docs/form/form-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { NgModule } from '@angular/core'\nimport { PageCheckboxComponent } from './page-checkbox/page-checkbox.component'\nimport { PageInputTextComponent } from './page-input-text/page-input-text.component'\nimport { PageSelectComponent } from './page-select/page-select.component'\nimport { PageSwitchComponent } from './page-switch/page-switch.component'\n\nconst routes: Routes = [\n  {\n    path: 'inputtext',\n    component: PageInputTextComponent,\n  },\n  {\n    path: 'checkbox',\n    component: PageCheckboxComponent,\n  },\n  {\n    path: 'switch',\n    component: PageSwitchComponent,\n  },\n  {\n    path: 'select',\n    component: PageSelectComponent,\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class FormRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "id": "module-HomeModule-981454600738f78e3b8ff5cf2a14e6ff270ce9f0f936b6971f0342a89122747a85a85656f961ae4f3883e8445a16926435723b3aa8bb687be93669a4c0c90329",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/home/home.module.ts",
            "methods": [],
            "sourceCode": "import { AvatarModule } from './../../components/avatar/avatar.module'\nimport { BadgeModule } from './../../components/badge/badge.module'\nimport { BreadcrumbModule } from './../../components/breadcrumb/breadcrumb.module'\nimport { ButtonModule } from './../../components/button/button.module'\nimport { CardModule } from './../../components/card/card.module'\nimport { CommonModule } from '@angular/common'\nimport { DropdownModule } from './../../components/dropdown/dropdown.module'\nimport { DropdownNotificationsComponent } from './components/dropdown-notifications/dropdown-notifications.component'\nimport { DropdownProfileComponent } from './components/dropdown-profile/dropdown-profile.component'\nimport { HeaderComponent } from './components/header/header.component'\nimport { HomeComponent } from './home.component'\nimport { HomeRoutingModule } from './home-routing.module'\nimport { IconModule } from 'src/app/components/icon/icon.module'\nimport { LogoModule } from './../../components/logo/logo.module'\nimport { MenuModule } from './../../components/menu/menu.module'\nimport { NgModule } from '@angular/core'\nimport { SearchModule } from './../../components/search/search.module'\nimport { SidebarModule } from './../../components/sidebar/sidebar.module'\nimport { TemplateModule } from './../../directives/template/template.module'\nimport { ToolbarModule } from './../../components/toolbar/toolbar.module'\n\n@NgModule({\n  declarations: [\n    HomeComponent,\n    HeaderComponent,\n    DropdownProfileComponent,\n    DropdownNotificationsComponent,\n  ],\n  imports: [\n    CommonModule,\n    HomeRoutingModule,\n    SidebarModule,\n    MenuModule,\n    LogoModule,\n    DropdownModule,\n    CardModule,\n    AvatarModule,\n    ToolbarModule,\n    TemplateModule,\n    SearchModule,\n    ButtonModule,\n    BadgeModule,\n    IconModule,\n    BreadcrumbModule,\n  ],\n})\nexport class HomeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DropdownNotificationsComponent"
                        },
                        {
                            "name": "DropdownProfileComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "BadgeModule"
                        },
                        {
                            "name": "BreadcrumbModule"
                        },
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "DropdownModule"
                        },
                        {
                            "name": "HomeRoutingModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "LogoModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "SearchModule"
                        },
                        {
                            "name": "SidebarModule"
                        },
                        {
                            "name": "TemplateModule"
                        },
                        {
                            "name": "ToolbarModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "id": "module-HomeRoutingModule-0988aeb9c35b298ef8b098354d92b77d10850d0a3d28c98cbefb3880118193933580ab4d6d65dda0f69e22630cc6c80a6ee0373688d04a56aee8a5e0b6283b0d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/home/home-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { HomeComponent } from './home.component'\nimport { NgModule } from '@angular/core'\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'dashboard',\n    pathMatch: 'full',\n  },\n  {\n    path: '',\n    component: HomeComponent,\n    data: { breadcrumb: 'Home' },\n    children: [\n      {\n        path: 'dashboard',\n        loadChildren: () =>\n          \"import('../dashboard/dashboard.module').then((m) => m.DashboardModule)\",\n      },\n      {\n        path: 'user',\n        loadChildren: () => \"import('../user/user.module').then((m) => m.UserModule)\",\n      },\n    ],\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class HomeRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconModule",
            "id": "module-IconModule-b0c8ddfb31ef502feb9e55bf34efbaef41056efb17a45a99010c0e96558e9a77716440eba34eaabd22b3206a274b62d30ee3670de4a63d49001af4a8f3d90dd2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/icon/icon.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { IconComponent } from './icon.component'\nimport { NgModule } from '@angular/core'\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-a6b76b811759638f2e0a260a0ebf7768a24182df3806c5298b3304a283b770df71ed2814e39d3742a365ce065dab9d63da604b4dd8c1ec44b4c6610d7dddc90d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { InputComponent } from './input.component'\nimport { InputMaskModule } from '@ngneat/input-mask'\nimport { NgModule } from '@angular/core'\n\n@NgModule({\n  declarations: [InputComponent],\n  imports: [CommonModule, InputMaskModule],\n  exports: [InputComponent],\n})\nexport class InputModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InvoicesModule",
            "id": "module-InvoicesModule-e2dcfa105ba4eb3d177095943d5697edad84481e0d662e1e5d21e52b014de4f21c3149c8ce114dcec7858af20d8e6f45a38f115525e3a4f91a371c1179efc667",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/invoices/invoices.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule, CurrencyPipe, DatePipe } from '@angular/common'\n\nimport { InvoicesComponent } from './invoices.component'\nimport { InvoicesRoutingModule } from './invoices-routing.module'\nimport { NgModule } from '@angular/core'\nimport { StatusModule } from 'src/app/components/status/status.module'\nimport { TableModule } from 'src/app/components/table/table.module'\n\n@NgModule({\n  declarations: [InvoicesComponent],\n  imports: [CommonModule, InvoicesRoutingModule, TableModule, StatusModule],\n  providers: [DatePipe, CurrencyPipe],\n})\nexport class InvoicesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InvoicesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "InvoicesRoutingModule"
                        },
                        {
                            "name": "StatusModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InvoicesRoutingModule",
            "id": "module-InvoicesRoutingModule-75b04f54eb995a4d189e951107affacd62a74ed5c7b6bca20f0f4f0552b9e72e4a9bbbc4e4ff7d15d07b01f620dbff536fbc79f45e28ba5ba085da9a077b16f8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/invoices/invoices-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { InvoicesComponent } from './invoices.component'\nimport { NgModule } from '@angular/core'\n\nconst routes: Routes = [{ path: '', component: InvoicesComponent }]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class InvoicesRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LinkModule",
            "id": "module-LinkModule-041e7a2ad6c035e0dafe5871b1f4ccbd9a992d1b8e4cca6bd3a3d2a8366e2a411f99ff70ead1b07e20cf46758413d4a4c919971065a23e33bf274ea4c50786ba",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/link/link.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { LinkComponent } from './link.component'\nimport { NgModule } from '@angular/core'\nimport { RouterModule } from '@angular/router'\n\n@NgModule({\n  declarations: [LinkComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [LinkComponent],\n})\nexport class LinkModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LinkComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LinkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LogoModule",
            "id": "module-LogoModule-fd2ab795dba6f457f98fc72d966f024728e7c2ca6e6d3c9d5aafbec8b94307128ccacd293ed6f717911a983236f3fc35c6a6c817a2e4e4376b9cd639601be9e3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/logo/logo.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { LogoComponent } from './logo.component'\n\n@NgModule({\n  declarations: [LogoComponent],\n  imports: [CommonModule],\n  exports: [LogoComponent],\n})\nexport class LogoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LogoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LogoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MenuModule",
            "id": "module-MenuModule-88f22c6496991d70fc0032766efef37726a9f4d3d9cc876e1b037912d2c43d9089011e5306b6134b75e6cd1a8f130b3fbcc3206a19fcfd2d27466dd2d7b4263e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/menu/menu.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule } from '@angular/router'\nimport { MenuItemComponent } from './menu-item.component'\nimport { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { MenuComponent } from './menu.component'\n\n@NgModule({\n  declarations: [MenuComponent, MenuItemComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [MenuComponent, MenuItemComponent, RouterModule],\n})\nexport class MenuModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MenuItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MenuItemComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MiscModule",
            "id": "module-MiscModule-cd13a925c3b3e2406b043d7639bfb90934ce7f5c5c6f78267515ed3c803112f0b6433b7da1ce52ff33e6c38e03d7ed6cdd60b22505529c5b974c47f38333ab3c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/docs/misc/misc.module.ts",
            "methods": [],
            "sourceCode": "import { CardModule } from './../../../components/card/card.module'\nimport { CommonModule } from '@angular/common'\nimport { MarkdownModule } from 'ngx-markdown'\nimport { MiscRoutingModule } from './misc-routing.module'\nimport { NgModule } from '@angular/core'\nimport { PageSkeletonComponent } from './page-skeleton/page-skeleton.component'\nimport { PageTagComponent } from './page-tag/page-tag.component'\nimport { SkeletonModule } from './../../../components/skeleton/skeleton.module'\nimport { TableModule } from '../../../components/table/table.module'\nimport { TagModule } from '../../../components/tag/tag.module'\nimport { TemplateModule } from '../../../directives/template/template.module'\n\n@NgModule({\n  declarations: [PageTagComponent, PageSkeletonComponent],\n  imports: [\n    CommonModule,\n    MiscRoutingModule,\n    CardModule,\n    TagModule,\n    TableModule,\n    TemplateModule,\n    MarkdownModule.forChild(),\n    SkeletonModule,\n  ],\n})\nexport class MiscModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PageSkeletonComponent"
                        },
                        {
                            "name": "PageTagComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "MiscRoutingModule"
                        },
                        {
                            "name": "SkeletonModule"
                        },
                        {
                            "name": "TableModule"
                        },
                        {
                            "name": "TagModule"
                        },
                        {
                            "name": "TemplateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MiscRoutingModule",
            "id": "module-MiscRoutingModule-55006c0a27614ac4e9e6bd8f31db3d13bf2128f32473f0373af64b90cbf051cfd71a1e26a4b4e21b28511190acbeb3ac8fef28a2eeb1b87e319e8b9bf102871a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/docs/misc/misc-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { NgModule } from '@angular/core'\nimport { PageSkeletonComponent } from './page-skeleton/page-skeleton.component'\nimport { PageTagComponent } from './page-tag/page-tag.component'\n\nconst routes: Routes = [\n  {\n    path: 'skeleton',\n    component: PageSkeletonComponent,\n  },\n  {\n    path: 'tag',\n    component: PageTagComponent,\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MiscRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalModule",
            "id": "module-ModalModule-4259dd8c38c277b3b8d34d15c958b232fa7e15c96102352886d9b489f9f8019eb37a138e03ab60d7aec42062596ab02209c39c588f9bf61fe162327a9d3c37b6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/modal/modal.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { ModalComponent } from './modal.component'\nimport { NgModule } from '@angular/core'\n\n@NgModule({\n  declarations: [ModalComponent],\n  imports: [CommonModule],\n  exports: [ModalComponent],\n})\nexport class ModalModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ModalComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MswModule",
            "id": "module-MswModule-359a3bdd6e0f51d4a6d0eb0c202484bac716fa7498ccb3c51dd06b28cc9c526d849d85f4ab8f99b48fb46ebc641e332c730d79781321361eff3952ff913852b8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/msw/msw.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { MswComponent } from './msw.component'\nimport { NgModule } from '@angular/core'\n\n@NgModule({\n  declarations: [MswComponent],\n  imports: [CommonModule],\n  exports: [MswComponent],\n})\nexport class MswModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MswComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MswComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OverlayModule",
            "id": "module-OverlayModule-b7c5bc6bac664fcc4f5034d2b32f5b22b4c883c207f9e812d824cf2faee0d1b6520bf6ec153b9b827998c0c297889f85cbd2a8d2cbedbf76164a3c39c267ae50",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/docs/overlay/overlay.module.ts",
            "methods": [],
            "sourceCode": "import { ButtonModule } from 'src/app/components/button/button.module'\nimport { CardModule } from '../../../components/card/card.module'\nimport { CommonModule } from '@angular/common'\nimport { ModalModule } from '../../../components/modal/modal.module'\nimport { NgModule } from '@angular/core'\nimport { OverlayRoutingModule } from './overlay-routing.module'\nimport { PageModalComponent } from './page-modal/page-modal.component'\nimport { TemplateModule } from 'src/app/directives/template/template.module'\n\n@NgModule({\n  declarations: [PageModalComponent],\n  imports: [\n    CommonModule,\n    OverlayRoutingModule,\n    CardModule,\n    ButtonModule,\n    ModalModule,\n    TemplateModule,\n  ],\n})\nexport class OverlayModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PageModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "ModalModule"
                        },
                        {
                            "name": "OverlayRoutingModule"
                        },
                        {
                            "name": "TemplateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "OverlayRoutingModule",
            "id": "module-OverlayRoutingModule-30c1ed5700deb1f5964549b0da3ca62b6eda1b2880932b9b5e5dddb28f6107e2a91f862a2f88f99447989dd35ef12ff1a8433a03856ac15b2d3894498b16cae3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/docs/overlay/overlay-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { NgModule } from '@angular/core'\nimport { PageModalComponent } from './page-modal/page-modal.component'\n\nconst routes: Routes = [\n  {\n    path: 'modal',\n    component: PageModalComponent,\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OverlayRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PaginationModule",
            "id": "module-PaginationModule-e9dae196f6a4effcf74aad9bd6d49340f9c37c91dddf9d9aa65671ab6795b0e5104da980f117d571906ce2b8ba94eff034a0a058f61ef0a54a211e3a37e4b374",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/pagination/pagination.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { PaginationComponent } from './pagination.component'\n\n@NgModule({\n  declarations: [PaginationComponent],\n  imports: [CommonModule],\n  providers: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PatientsModule",
            "id": "module-PatientsModule-d743387821ba2dd9ff54aaf6f8e3bed834b839c49bb046c8c70f256ff586ff39811c789e43f0d93683b81a11cec9eb487794729fb1becf95fb76b6fda2df3dfa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/patients/patients.module.ts",
            "methods": [],
            "sourceCode": "import { ButtonModule } from 'src/app/components/button/button.module'\nimport { CommonModule } from '@angular/common'\nimport { CreatePatientComponent } from './create-patient/create-patient.component'\nimport { InputModule } from 'src/app/components/input/input.module'\nimport { NgModule } from '@angular/core'\nimport { PatientsComponent } from './patients/patients.component'\nimport { PatientsRoutingModule } from './patients-routing.module'\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { TableModule } from 'src/app/components/table/table.module'\n\n@NgModule({\n  declarations: [CreatePatientComponent, PatientsComponent],\n  imports: [\n    CommonModule,\n    PatientsRoutingModule,\n    ReactiveFormsModule,\n    InputModule,\n    ButtonModule,\n    TableModule,\n  ],\n})\nexport class PatientsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CreatePatientComponent"
                        },
                        {
                            "name": "PatientsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "PatientsRoutingModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PatientsRoutingModule",
            "id": "module-PatientsRoutingModule-8605285c1e7494d582b74dd245357444508e19324c7cfb8f4228c84638f5a7c4698816425d15b2f30211992342e7008527a2a7a5672558198e8855bb3ce9e0c7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/patients/patients-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { CreatePatientComponent } from './create-patient/create-patient.component'\nimport { NgModule } from '@angular/core'\nimport { PatientsComponent } from './patients/patients.component'\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PatientsComponent,\n  },\n  {\n    path: 'create',\n    component: CreatePatientComponent,\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class PatientsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PhoneModule",
            "id": "module-PhoneModule-7d6794253291f4c10cc7656f1ecefa6ce58cbca1a79a5a077edf35aae834d6197ddd0e632ce0081ac1c30b2c003dbdcd5c1c1c892f772057d2ca14a93ba2d59a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pipes/phone/phone.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { PhonePipe } from './phone.pipe'\n\n@NgModule({\n  declarations: [PhonePipe],\n  imports: [CommonModule],\n  exports: [PhonePipe],\n})\nexport class PhoneModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PhonePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PhonePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RemoveHttpUrlModule",
            "id": "module-RemoveHttpUrlModule-647ce012bf659152a4c712a1714c8771e05f33f5aab516098ce123165452ead44c89f602e9e54f6745149c800c431c879ddecc0c26cf1209327f89c2c407d635",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pipes/remove-http-url/remove-http-url.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { RemoveHttpUrlPipe } from './remove-http-url.pipe'\n\n@NgModule({\n  declarations: [RemoveHttpUrlPipe],\n  imports: [CommonModule],\n  exports: [RemoveHttpUrlPipe],\n})\nexport class RemoveHttpUrlModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RemoveHttpUrlPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RemoveHttpUrlPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SearchModule",
            "id": "module-SearchModule-3b61300cc4431d5bcbb5f88a95490b1da2fabf1a06b0fcefdea235f07db8bc5bcb5fba147aa3adb0a9cd7942cca0d186b53dd57062ee62b8e0a55139cd92a4a5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/search/search.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { SearchComponent } from './search.component'\n\n@NgModule({\n  declarations: [SearchComponent],\n  imports: [CommonModule, ReactiveFormsModule],\n  exports: [SearchComponent, ReactiveFormsModule],\n})\nexport class SearchModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SearchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "id": "module-SelectModule-8ce95407b325149c7493f4838363b0d3c5302d6421db6f7553843809ead659e1a6bb917c956e9490d458df3a3b7efb4a02abefacd6733c8600b953af0a6510d1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/select/select.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { SelectComponent } from './select.component'\nimport { SelectItemComponent } from './select-item.component'\n\n@NgModule({\n  declarations: [SelectComponent, SelectItemComponent],\n  imports: [CommonModule],\n  exports: [SelectComponent],\n})\nexport class SelectModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SelectItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SidebarModule",
            "id": "module-SidebarModule-2146dc84e08c477752fb5620ea2260deb770045fc661a4133e7a76857f1a317cb3b617d4676a8665d354b82b4506f8f7558d6c75ab913023609195b527d40f0a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/sidebar/sidebar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { SidebarComponent } from './sidebar.component'\n\n@NgModule({\n  declarations: [SidebarComponent],\n  imports: [CommonModule],\n  exports: [SidebarComponent],\n})\nexport class SidebarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkeletonModule",
            "id": "module-SkeletonModule-88ca6a61d461641d49ce04b66abb406eb84d328bfacb0dd57e5e889a6e99961682b2d81b453af9052b5ae04b6ea2b652c13b35b60406bbf6748cf9ec92c28ccc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/skeleton/skeleton.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { SkeletonComponent } from './skeleton.component'\n\n@NgModule({\n  declarations: [SkeletonComponent],\n  imports: [CommonModule],\n  exports: [SkeletonComponent],\n})\nexport class SkeletonModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkeletonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SkeletonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatusModule",
            "id": "module-StatusModule-7aabea2aa0c905231a5f249e4710ebb8442b93f8521c45df07dbf32e6120c7a440915f432ef92626853d03209979d6d55b170c2d8dc711317a0dfbfd9f397ac9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/status/status.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { StatusComponent } from './status.component'\n\n@NgModule({\n  declarations: [StatusComponent],\n  imports: [CommonModule],\n  exports: [StatusComponent],\n})\nexport class StatusModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StatusComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StatusComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SwitchModule",
            "id": "module-SwitchModule-2d12e6e98cc48abfb949ca303cf026ef9a525edcd2e5d6a50105a22a8ea487df4a487e9a370f325849f9cad35dd231683ffff9108f683e85ab895625ccbc8f69",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/switch/switch.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { SwitchComponent } from './switch.component'\n\n@NgModule({\n  declarations: [SwitchComponent],\n  imports: [CommonModule],\n  exports: [SwitchComponent],\n})\nexport class SwitchModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SwitchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SwitchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "id": "module-TableModule-a74f96a70e7855b0c666873bee590ec70e50a10aa3aae09dabd7de9c343de6a8233ce3536636ffcb4e3d8f3dcf47532fe39ef8acb7c836b21ff0e07fe207a411",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { FormsModule } from '@angular/forms'\nimport { InjectHTMLDirective } from 'src/app/directives/inject-html/inject-html.directive'\nimport { NgModule } from '@angular/core'\nimport { NgSelectModule } from '@ng-select/ng-select'\nimport { PaginationDirective } from './pagination.directive'\nimport { PaginationModule } from '../pagination/pagination.module'\nimport { RowExpandDirective } from './row-expand.directive'\nimport { RowTogglerDirective } from './row-toggler.directive'\nimport { SelectAllComponent } from './select-all.component'\nimport { SelectDirective } from './select.directive'\nimport { SortDirective } from './sort.directive'\nimport { SortIconComponent } from './sort-icon.component'\nimport { SortableColumnDirective } from './sortable-column.directive'\nimport { TableBodyComponent } from './table-body.component'\nimport { TableCheckBoxComponent } from './table-check-box.component'\nimport { TableComponent } from './table.component'\nimport { TableHeaderCheckboxComponent } from './table-header-checkbox.component'\nimport { TableService } from './table.service'\n\n@NgModule({\n  declarations: [\n    TableComponent,\n    InjectHTMLDirective,\n    SortableColumnDirective,\n    SortIconComponent,\n    TableCheckBoxComponent,\n    TableHeaderCheckboxComponent,\n    SelectDirective,\n    PaginationDirective,\n    SortDirective,\n    SelectAllComponent,\n    TableBodyComponent,\n    RowTogglerDirective,\n    RowExpandDirective,\n  ],\n  imports: [CommonModule, PaginationModule, NgSelectModule, FormsModule],\n  providers: [PaginationDirective, RowExpandDirective, TableService],\n  exports: [\n    TableComponent,\n    SortableColumnDirective,\n    SortIconComponent,\n    TableCheckBoxComponent,\n    TableHeaderCheckboxComponent,\n    SelectDirective,\n    PaginationDirective,\n    SortDirective,\n    SelectAllComponent,\n    NgSelectModule,\n    FormsModule,\n    TableBodyComponent,\n    RowTogglerDirective,\n    RowExpandDirective,\n  ],\n})\nexport class TableModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "TableService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InjectHTMLDirective"
                        },
                        {
                            "name": "PaginationDirective"
                        },
                        {
                            "name": "RowExpandDirective"
                        },
                        {
                            "name": "RowTogglerDirective"
                        },
                        {
                            "name": "SelectAllComponent"
                        },
                        {
                            "name": "SelectDirective"
                        },
                        {
                            "name": "SortDirective"
                        },
                        {
                            "name": "SortIconComponent"
                        },
                        {
                            "name": "SortableColumnDirective"
                        },
                        {
                            "name": "TableBodyComponent"
                        },
                        {
                            "name": "TableCheckBoxComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableHeaderCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PaginationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginationDirective"
                        },
                        {
                            "name": "RowExpandDirective"
                        },
                        {
                            "name": "RowTogglerDirective"
                        },
                        {
                            "name": "SelectAllComponent"
                        },
                        {
                            "name": "SelectDirective"
                        },
                        {
                            "name": "SortDirective"
                        },
                        {
                            "name": "SortIconComponent"
                        },
                        {
                            "name": "SortableColumnDirective"
                        },
                        {
                            "name": "TableBodyComponent"
                        },
                        {
                            "name": "TableCheckBoxComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableHeaderCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "id": "module-TableModule-ecdb432111aaf832b4c8bf7fb379e2aa2b1b057e54d211079fb15348320023b6279d1ea6af0e3371d47a297c89954ec944179464e08cb3cfd5b0031596abc348-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/docs/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { ButtonModule } from 'src/app/components/button/button.module'\nimport { CardModule } from './../../../components/card/card.module'\nimport { CheckboxModule } from './../../../components/checkbox/checkbox.module'\nimport { CommonModule } from '@angular/common'\nimport { DropdownModule } from './../../../components/dropdown/dropdown.module'\nimport { IconModule } from 'src/app/components/icon/icon.module'\nimport { MarkdownModule } from 'ngx-markdown'\nimport { NgModule } from '@angular/core'\nimport { PageBasicComponent } from './page-basic/page-basic.component'\nimport { PageComponent } from './page/page.component'\nimport { PageDynamicComponent } from './page-dynamic/page-dynamic.component'\nimport { PageGridlinesComponent } from './page-gridlines/page-gridlines.component'\nimport { PageLimitComponent } from './page-limit/page-limit.component'\nimport { PageRowExpandComponent } from './page-row-expand/page-row-expand.component'\nimport { PageScrollComponent } from './page-scroll/page-scroll.component'\nimport { PageSelectAllComponent } from './page-select-all/page-select-all.component'\nimport { PageToggleComponent } from './page-toggle/page-toggle.component'\nimport { PaginationModule } from 'src/app/components/pagination/pagination.module'\nimport { SelectionComponent } from './selection/selection.component'\nimport { SortComponent } from './sort/sort.component'\nimport { TableModule as TableModuleComponent } from '../../../components/table/table.module'\nimport { TableRoutingModule } from './table-routing.module'\nimport { TemplateModule } from 'src/app/directives/template/template.module'\n\n@NgModule({\n  declarations: [\n    PageBasicComponent,\n    PageDynamicComponent,\n    PageGridlinesComponent,\n    SortComponent,\n    PageComponent,\n    SelectionComponent,\n    PageSelectAllComponent,\n    PageLimitComponent,\n    PageToggleComponent,\n    PageScrollComponent,\n    PageRowExpandComponent,\n  ],\n  imports: [\n    CommonModule,\n    TableRoutingModule,\n    TableModuleComponent,\n    TemplateModule,\n    PaginationModule,\n    ButtonModule,\n    IconModule,\n    CardModule,\n    DropdownModule,\n    CheckboxModule,\n    MarkdownModule.forChild(),\n  ],\n})\nexport class TableModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PageBasicComponent"
                        },
                        {
                            "name": "PageComponent"
                        },
                        {
                            "name": "PageDynamicComponent"
                        },
                        {
                            "name": "PageGridlinesComponent"
                        },
                        {
                            "name": "PageLimitComponent"
                        },
                        {
                            "name": "PageRowExpandComponent"
                        },
                        {
                            "name": "PageScrollComponent"
                        },
                        {
                            "name": "PageSelectAllComponent"
                        },
                        {
                            "name": "PageToggleComponent"
                        },
                        {
                            "name": "SelectionComponent"
                        },
                        {
                            "name": "SortComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "CheckboxModule"
                        },
                        {
                            "name": "DropdownModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "PaginationModule"
                        },
                        {
                            "name": "TableRoutingModule"
                        },
                        {
                            "name": "TemplateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableRoutingModule",
            "id": "module-TableRoutingModule-86eaed25378dab685a6c6567f0ab18758f3d19293a11a1ae5f117cde38db97d29afaae5b6f43ff92b31ddf2ee38b99ffc218631e81efa9700e9a65b8018c3a41",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/docs/table/table-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { NgModule } from '@angular/core'\nimport { PageBasicComponent } from './page-basic/page-basic.component'\nimport { PageComponent } from './page/page.component'\nimport { PageDynamicComponent } from './page-dynamic/page-dynamic.component'\nimport { PageGridlinesComponent } from './page-gridlines/page-gridlines.component'\nimport { PageLimitComponent } from './page-limit/page-limit.component'\nimport { PageRowExpandComponent } from './page-row-expand/page-row-expand.component'\nimport { PageScrollComponent } from './page-scroll/page-scroll.component'\nimport { PageSelectAllComponent } from './page-select-all/page-select-all.component'\nimport { PageToggleComponent } from './page-toggle/page-toggle.component'\nimport { SelectionComponent } from './selection/selection.component'\nimport { SortComponent } from './sort/sort.component'\n\nconst routes: Routes = [\n  {\n    path: 'basic',\n    component: PageBasicComponent,\n  },\n  {\n    path: 'dynamic',\n    component: PageDynamicComponent,\n  },\n  {\n    path: 'gridlines',\n    component: PageGridlinesComponent,\n  },\n  {\n    path: 'page',\n    component: PageComponent,\n  },\n  {\n    path: 'limit',\n    component: PageLimitComponent,\n  },\n  {\n    path: 'sort',\n    component: SortComponent,\n  },\n  {\n    path: 'selection',\n    component: SelectionComponent,\n  },\n  {\n    path: 'selectall',\n    component: PageSelectAllComponent,\n  },\n  {\n    path: 'scroll',\n    component: PageScrollComponent,\n  },\n  {\n    path: 'rowexpand',\n    component: PageRowExpandComponent,\n  },\n  {\n    path: 'toggle',\n    component: PageToggleComponent,\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TableRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabModule",
            "id": "module-TabModule-623d166f0a540434f25b4134637a3aaa0a25654ff933006914b62dc79941c66efd53fa3b1f670e5ff048f1de78ee57ca62f7033730d87a51a22341dabcf8adbc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/tab/tab.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { TabPanelComponent } from './tab-panel.component'\nimport { TabsComponent } from './tabs.component'\n\n@NgModule({\n  declarations: [TabsComponent, TabPanelComponent],\n  imports: [CommonModule],\n  exports: [TabsComponent, TabPanelComponent],\n})\nexport class TabModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabPanelComponent"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabPanelComponent"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TagModule",
            "id": "module-TagModule-1d014b1fae06f6139df808761e27a4066df29c5337ca4bec6440d45cc755779a7dab5636eb72b92bf65caf8077cb01d9b63031597e211de2b406c63e837554ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/tag/tag.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { TagComponent } from './tag.component'\n\n@NgModule({\n  declarations: [TagComponent],\n  imports: [CommonModule],\n  exports: [TagComponent],\n})\nexport class TagModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TagComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TagComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TemplateModule",
            "id": "module-TemplateModule-09725fea44b8bf8a303855ce8cf6ee4893febc353231a834978fc47da1e078e83079ce0e684113ecc5b40d5d87eaade90284ee88b81365b215156456a59e19e5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/directives/template/template.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { TemplateDirective } from './template.directive'\n\n@NgModule({\n  declarations: [TemplateDirective],\n  imports: [CommonModule],\n  exports: [TemplateDirective],\n})\nexport class TemplateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TemplateDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TemplateDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TimelineModule",
            "id": "module-TimelineModule-20747442024567049e8c702b5c6c7b02390413c671f4c9f2d3d70b8f8d0baddac8473736c39acc9c4217f5db328b81d50516e6950e3bd6c63e6781a587d20fc5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/timeline/timeline.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { TimelineComponent } from './timeline.component'\n\n@NgModule({\n  declarations: [TimelineComponent],\n  imports: [CommonModule],\n  exports: [TimelineComponent],\n})\nexport class TimelineModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TimelineComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TimelineComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToastModule",
            "id": "module-ToastModule-fe88647d6fd3043ba2c1f462efeb2d43dae45eac241c2c73085cba28ef2b7abea82c1a8974937c7b522c68cef548c452b2dc11aceb0363c66f147010952e1547",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/toast/toast.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { MessageService } from './message.service'\nimport { NgModule } from '@angular/core'\nimport { ToastComponent } from './toast.component'\nimport { ToastItemComponent } from './toast-item.component'\n\n@NgModule({\n  declarations: [ToastComponent, ToastItemComponent],\n  imports: [CommonModule],\n  providers: [MessageService],\n  exports: [ToastComponent],\n})\nexport class ToastModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "MessageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToastComponent"
                        },
                        {
                            "name": "ToastItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToastComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToolbarModule",
            "id": "module-ToolbarModule-e6c05fdefe770616caf945c695237aeb4242e410543a31cf925ff175a053d6e3ee94e53c8872c6e2999dade6d5e74cd2f744e780e10e72036723a6000bdbeb59",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/toolbar/toolbar.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { ToolbarComponent } from './toolbar.component'\n\n@NgModule({\n  declarations: [ToolbarComponent],\n  imports: [CommonModule],\n  exports: [ToolbarComponent],\n})\nexport class ToolbarModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserModule",
            "id": "module-UserModule-c1a30972d721fd55796721bd46b58c7a4d22ea8ada2b5b5495b59aee0011eb365dd3d5ce6313af4eb701e551729cb242faab8b0d66a83a7df6b13638ba56ae49",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/user/user.module.ts",
            "methods": [],
            "sourceCode": "import { AvatarModule } from '../../components/avatar/avatar.module'\nimport { ButtonModule } from 'src/app/components/button/button.module'\nimport { CardModule } from './../../components/card/card.module'\nimport { CommonModule } from '@angular/common'\nimport { EditComponent } from './edit/edit.component'\nimport { EditUserAccountComponent } from './components/edit-user-account/edit-user-account.component'\nimport { IconModule } from './../../components/icon/icon.module'\nimport { InputModule } from 'src/app/components/input/input.module'\nimport { NgModule } from '@angular/core'\nimport { PhoneModule } from './../../pipes/phone/phone.module'\nimport { ProfileBackgroundComponent } from './components/profile-background/profile-background.component'\nimport { ProfileComponent } from './profile/profile.component'\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { RemoveHttpUrlModule } from '../../pipes/remove-http-url/remove-http-url.module'\nimport { SelectModule } from '../../components/select/select.module'\nimport { TemplateModule } from '../../directives/template/template.module'\nimport { UserRoutingModule } from './user-routing.module'\n\n@NgModule({\n  declarations: [\n    ProfileComponent,\n    ProfileBackgroundComponent,\n    EditComponent,\n    EditUserAccountComponent,\n  ],\n  imports: [\n    CommonModule,\n    UserRoutingModule,\n    CardModule,\n    AvatarModule,\n    TemplateModule,\n    IconModule,\n    RemoveHttpUrlModule,\n    PhoneModule,\n    InputModule,\n    ReactiveFormsModule,\n    SelectModule,\n    ButtonModule,\n  ],\n})\nexport class UserModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EditComponent"
                        },
                        {
                            "name": "EditUserAccountComponent"
                        },
                        {
                            "name": "ProfileBackgroundComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AvatarModule"
                        },
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "CardModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "PhoneModule"
                        },
                        {
                            "name": "RemoveHttpUrlModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "TemplateModule"
                        },
                        {
                            "name": "UserRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserRoutingModule",
            "id": "module-UserRoutingModule-c9780f5c5935d8a7e4cfa0a98c2b6e04b3055d20d983ea51b8e31273b782d5345f2558ec261f2a253902a7136ad9219d7da6e40c892d3c27c1ae600684a3aaf4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/user/user-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router'\n\nimport { EditComponent } from './edit/edit.component'\nimport { NgModule } from '@angular/core'\nimport { ProfileComponent } from './profile/profile.component'\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProfileComponent,\n    data: { breadcrumb: 'User' },\n  },\n  {\n    path: 'edit',\n    component: EditComponent,\n    data: { breadcrumb: 'Edit' },\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class UserRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  clickEvent: action('clickEvent'),\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CHECKBOX_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/checkbox/checkbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxComponent),\n  multi: true,\n}"
            },
            {
                "name": "COLUMNS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/table/table-data.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    header: 'Code',\n    field: 'code',\n  },\n  { header: 'Name', field: 'name' },\n  { header: 'Category', field: 'category' },\n  { header: 'Quantity', field: 'quantity' },\n]"
            },
            {
                "name": "controlsDisable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  bodyTemplate: {\n    table: {\n      disable: true,\n    },\n  },\n  captionTemplate: {\n    table: {\n      disable: true,\n    },\n  },\n  data: {\n    table: {\n      disable: true,\n    },\n  },\n  expandedRowTemplate: {\n    table: {\n      disable: true,\n    },\n  },\n  headerTemplate: {\n    table: {\n      disable: true,\n    },\n  },\n  optionsHeaderTemplate: {\n    table: {\n      disable: true,\n    },\n  },\n  paginator: {\n    table: {\n      disable: true,\n    },\n  },\n  summaryTemplate: {\n    table: {\n      disable: true,\n    },\n  },\n  tableService: {\n    table: {\n      disable: true,\n    },\n  },\n  columns: {\n    table: {\n      disable: true,\n    },\n  },\n  gridlines: {\n    table: {\n      disable: true,\n    },\n  },\n  responsive: {\n    table: {\n      disable: true,\n    },\n  },\n  responsiveLayout: {\n    table: {\n      disable: true,\n    },\n  },\n  scrollable: {\n    table: {\n      disable: true,\n    },\n  },\n  scrollDirection: {\n    table: {\n      disable: true,\n    },\n  },\n  scrollHeight: {\n    table: {\n      disable: true,\n    },\n  },\n  style: {\n    table: {\n      disable: true,\n    },\n  },\n  value: {\n    table: {\n      disable: true,\n    },\n  },\n  ngAfterContentInit: {\n    table: {\n      disable: true,\n    },\n  },\n  ngOnChanges: {\n    table: {\n      disable: true,\n    },\n  },\n  tableViewChild: {\n    table: {\n      disable: true,\n    },\n  },\n  templates: {\n    table: {\n      disable: true,\n    },\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  BASE_URL: '',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  BASE_URL: 'http://localhost:3000',\n}"
            },
            {
                "name": "getLastPatients",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/last-patitents.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  req: RestRequest,\n  res: ResponseComposition,\n  ctx: RestContext\n) => {\n  return res(ctx.status(200), ctx.json(RESPOSE_LAST_PATIENTS))\n}"
            },
            {
                "name": "getLastPayments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/last-payments.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  req: RestRequest,\n  res: ResponseComposition,\n  ctx: RestContext\n) => {\n  return res(ctx.status(200), ctx.json(RESPOSE_LAST_PAYMENTS))\n}"
            },
            {
                "name": "getProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/products.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  req: RestRequest,\n  res: ResponseComposition,\n  ctx: RestContext\n) => {\n  if (\n    req.url.searchParams.get('page') === '1' &&\n    req.url.searchParams.get('limit') === '5'\n  ) {\n    return res(ctx.status(200), ctx.json(RESPONSE_PRODUCTS_PAGE_1))\n  }\n\n  if (\n    req.url.searchParams.get('page') === '1' &&\n    req.url.searchParams.get('limit') === '10'\n  ) {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        items: [...RESPONSE_PRODUCTS_PAGE_1.items, ...RESPONSE_PRODUCTS_PAGE_2.items],\n        meta: {\n          ...RESPONSE_PRODUCTS_PAGE_1.meta,\n          ...{ itemsPerPage: 10, itemCount: 10, totalPages: 1, currentPage: 1 },\n        },\n      })\n    )\n  }\n\n  if (\n    req.url.searchParams.get('page') === '2' &&\n    req.url.searchParams.get('limit') === '5'\n  ) {\n    return res(ctx.status(200), ctx.json(RESPONSE_PRODUCTS_PAGE_2))\n  }\n\n  return res(\n    ctx.status(200),\n    ctx.json({\n      items: [...RESPONSE_PRODUCTS_PAGE_1.items, ...RESPONSE_PRODUCTS_PAGE_2.items],\n      meta: {\n        ...RESPONSE_PRODUCTS_PAGE_1.meta,\n        ...{\n          itemsPerPage: Number(req.url.searchParams.get('limit')),\n          itemCount: 10,\n          totalPages: 1,\n          currentPage: 1,\n        },\n      },\n    })\n  )\n}"
            },
            {
                "name": "handlers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/handlers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  rest.get(`${environment.BASE_URL}/products`, getProducts),\n  rest.post(`${environment.BASE_URL}/login`, login),\n  rest.get(`${environment.BASE_URL}/last-patients`, getLastPatients),\n  rest.get(`${environment.BASE_URL}/payments/last-payments`, getLastPayments),\n  rest.get(`${environment.BASE_URL}/user/profile`, profile),\n  rest.get(`${environment.BASE_URL}/user/me`, me),\n]"
            },
            {
                "name": "hideAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/modal/modal.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "animation([\n  animate('{{transition}}', style({ transform: '{{transform}}', opacity: 0 })),\n])"
            },
            {
                "name": "injectInjectorToProps",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/inject-injector-to-props/inject-injector-to-props.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "makeDecorator({\n  name: 'injectInjectorToProps',\n  parameterName: 'injectInjectorToProps',\n  skipIfNoParametersOrOptions: true,\n  wrapper: (getStory, context) => {\n    const story = getStory(context) as {\n      props: ICollection\n      moduleMetadata: NgModuleMetadata\n    }\n\n    if (!story.moduleMetadata.providers) {\n      story.moduleMetadata.providers = []\n    }\n\n    story.moduleMetadata.providers.push({\n      provide: APP_INITIALIZER,\n      useFactory: (injector: Injector): void => {\n        Object.assign(story.props, { injector })\n      },\n      deps: [Injector],\n    })\n\n    return story\n  },\n})"
            },
            {
                "name": "lastId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/unique-id/unique-id.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/authentication.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(req: RestRequest, res: ResponseComposition, ctx: RestContext) => {\n  return res(\n    ctx.status(200),\n    ctx.json({\n      token:\n        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijc0MGRkMTBhLTUxNDktNDIwYS05NWE4LWMyMzczMGFjM2ViOCIsIm5hbWUiOiJKb2huIERvZSJ9.eA_rwmjWuNj7NcWOc_fzDSluew8wCWUS6eXNF3-X8y4',\n    })\n  )\n}"
            },
            {
                "name": "me",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/user.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(req: RestRequest, res: ResponseComposition, ctx: RestContext) => {\n  return res(ctx.status(200), ctx.json(ME))\n}"
            },
            {
                "name": "ME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/user.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  name: 'John Doe',\n  email: 'john.doe@gmail.com',\n  photo:\n    'https://userstock.io/data/wp-content/uploads/2020/06/robert-godwin-cdksyTqEXzo-1024x1024.jpg',\n}"
            },
            {
                "name": "modules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/components.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[InputModule, SwitchModule, ButtonModule, IconModule, LinkModule]"
            },
            {
                "name": "PasswordStrengthValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/validations/password-strength/password-strength.validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  control: AbstractControl\n): ValidationErrors | null => {\n  const value = control.value || ''\n\n  if (!value) {\n    return null\n  }\n\n  const eigthCharacters = /(?=.{8,})/g\n  if (eigthCharacters.test(value) === false) {\n    return { passwordStrength: true }\n  }\n\n  const upperCaseCharacters = /(?=.*[A-Z])/g\n  if (upperCaseCharacters.test(value) === false) {\n    return { passwordStrength: true }\n  }\n\n  const lowercaseCharacters = /(?=.*[a-z])/g\n  if (lowercaseCharacters.test(value) === false) {\n    return { passwordStrength: true }\n  }\n\n  const digits = /(?=.*[0-9])/g\n  if (digits.test(value) === false) {\n    return { passwordStrength: true }\n  }\n\n  const specialCharacters = /([^A-Za-z0-9])/g\n  if (specialCharacters.test(value) === false) {\n    return { passwordStrength: true }\n  }\n\n  return null\n}"
            },
            {
                "name": "profile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/user.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(req: RestRequest, res: ResponseComposition, ctx: RestContext) => {\n  return res(ctx.status(200), ctx.json(USER))\n}"
            },
            {
                "name": "RESPONSE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/invoices/invoices.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    company: 'Sterling Cooper Ltd.',\n    date: new Date().toISOString(),\n    recipient: 'Leslie Alexander',\n    status: 'PAID',\n    amount: 293.01,\n  },\n  {\n    company: 'Acme Co.',\n    date: new Date().toISOString(),\n    recipient: 'Ronald Richards',\n    status: 'SCHEDULED',\n    amount: 596.28,\n  },\n  {\n    company: 'Sirius Cybernetics Co.',\n    date: new Date().toISOString(),\n    recipient: 'Jane Cooper',\n    status: 'UNPAID',\n    amount: 219.78,\n  },\n]"
            },
            {
                "name": "RESPONSE_PAGINATION_PAGE_1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/table/table-data.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  'totalItems': 10,\n  'itemCount': 5,\n  'itemsPerPage': 5,\n  'totalPages': 2,\n  'currentPage': 1,\n}"
            },
            {
                "name": "RESPONSE_PRODUCTS_PAGE_1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/products.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  'items': [\n    {\n      'id': '1003',\n      'code': '244wgerg2',\n      'name': 'Blue T-Shirt',\n      'description': 'Product Description',\n      'image': 'blue-t-shirt.jpg',\n      'price': 29,\n      'category': 'Clothing',\n      'quantity': 25,\n      'inventoryStatus': 'INSTOCK',\n      'rating': 5,\n    },\n    {\n      'id': '1008',\n      'code': 'vbb124btr',\n      'name': 'Game Controller',\n      'description': 'Product Description',\n      'image': 'game-controller.jpg',\n      'price': 99,\n      'category': 'Electronics',\n      'quantity': 2,\n      'inventoryStatus': 'LOWSTOCK',\n      'rating': 4,\n    },\n    {\n      'id': '1009',\n      'code': 'cm230f032',\n      'name': 'Gaming Set',\n      'description': 'Product Description',\n      'image': 'gaming-set.jpg',\n      'price': 299,\n      'category': 'Electronics',\n      'quantity': 63,\n      'inventoryStatus': 'INSTOCK',\n      'rating': 3,\n    },\n    {\n      'id': '1001',\n      'code': 'nvklal433',\n      'name': 'Black Watch',\n      'description': 'Product Description',\n      'image': 'black-watch.jpg',\n      'price': 72,\n      'category': 'Accessories',\n      'quantity': 61,\n      'inventoryStatus': 'INSTOCK',\n      'rating': 4,\n    },\n    {\n      'id': '1007',\n      'code': 'mbvjkgip5',\n      'name': 'Galaxy Earrings',\n      'description': 'Product Description',\n      'image': 'galaxy-earrings.jpg',\n      'price': 34,\n      'category': 'Accessories',\n      'quantity': 23,\n      'inventoryStatus': 'INSTOCK',\n      'rating': 5,\n    },\n  ],\n  'meta': {\n    'totalItems': 10,\n    'itemCount': 5,\n    'itemsPerPage': 5,\n    'totalPages': 2,\n    'currentPage': 1,\n  },\n}"
            },
            {
                "name": "RESPONSE_PRODUCTS_PAGE_1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/table/table-data.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'id': '1003',\n    'code': '244wgerg2',\n    'name': 'Blue T-Shirt',\n    'description': 'Product Description',\n    'image': 'blue-t-shirt.jpg',\n    'price': 29,\n    'category': 'Clothing',\n    'quantity': 25,\n    'inventoryStatus': 'INSTOCK',\n    'rating': 5,\n  },\n  {\n    'id': '1008',\n    'code': 'vbb124btr',\n    'name': 'Game Controller',\n    'description': 'Product Description',\n    'image': 'game-controller.jpg',\n    'price': 99,\n    'category': 'Electronics',\n    'quantity': 2,\n    'inventoryStatus': 'LOWSTOCK',\n    'rating': 4,\n  },\n  {\n    'id': '1009',\n    'code': 'cm230f032',\n    'name': 'Gaming Set',\n    'description': 'Product Description',\n    'image': 'gaming-set.jpg',\n    'price': 299,\n    'category': 'Electronics',\n    'quantity': 63,\n    'inventoryStatus': 'INSTOCK',\n    'rating': 3,\n  },\n  {\n    'id': '1001',\n    'code': 'nvklal433',\n    'name': 'Black Watch',\n    'description': 'Product Description',\n    'image': 'black-watch.jpg',\n    'price': 72,\n    'category': 'Accessories',\n    'quantity': 61,\n    'inventoryStatus': 'INSTOCK',\n    'rating': 4,\n  },\n  {\n    'id': '1007',\n    'code': 'mbvjkgip5',\n    'name': 'Galaxy Earrings',\n    'description': 'Product Description',\n    'image': 'galaxy-earrings.jpg',\n    'price': 34,\n    'category': 'Accessories',\n    'quantity': 23,\n    'inventoryStatus': 'INSTOCK',\n    'rating': 5,\n  },\n]"
            },
            {
                "name": "RESPONSE_PRODUCTS_PAGE_2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/products.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  'items': [\n    {\n      'id': '1005',\n      'code': 'av2231fwg',\n      'name': 'Brown Purse',\n      'description': 'Product Description',\n      'image': 'brown-purse.jpg',\n      'price': 120,\n      'category': 'Accessories',\n      'quantity': 0,\n      'inventoryStatus': 'OUTOFSTOCK',\n      'rating': 4,\n    },\n    {\n      'id': '1006',\n      'code': 'bib36pfvm',\n      'name': 'Chakra Bracelet',\n      'description': 'Product Description',\n      'image': 'chakra-bracelet.jpg',\n      'price': 32,\n      'category': 'Accessories',\n      'quantity': 5,\n      'inventoryStatus': 'LOWSTOCK',\n      'rating': 3,\n    },\n    {\n      'id': '1002',\n      'code': 'zz21cz3c1',\n      'name': 'Blue Band',\n      'description': 'Product Description',\n      'image': 'blue-band.jpg',\n      'price': 79,\n      'category': 'Fitness',\n      'quantity': 2,\n      'inventoryStatus': 'LOWSTOCK',\n      'rating': 3,\n    },\n    {\n      'id': '1004',\n      'code': 'h456wer53',\n      'name': 'Bracelet',\n      'description': 'Product Description',\n      'image': 'bracelet.jpg',\n      'price': 15,\n      'category': 'Accessories',\n      'quantity': 73,\n      'inventoryStatus': 'INSTOCK',\n      'rating': 4,\n    },\n    {\n      'id': '1000',\n      'code': 'f230fh0g3',\n      'name': 'Bamboo Watch',\n      'description': 'Product Description',\n      'image': 'bamboo-watch.jpg',\n      'price': 65,\n      'category': 'Accessories',\n      'quantity': 24,\n      'inventoryStatus': 'INSTOCK',\n      'rating': 5,\n    },\n  ],\n  'meta': {\n    'totalItems': 10,\n    'itemCount': 5,\n    'itemsPerPage': 5,\n    'totalPages': 2,\n    'currentPage': 2,\n  },\n}"
            },
            {
                "name": "RESPONSE_PRODUCTS_PAGE_2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/table/table-data.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'id': '1005',\n    'code': 'av2231fwg',\n    'name': 'Brown Purse',\n    'description': 'Product Description',\n    'image': 'brown-purse.jpg',\n    'price': 120,\n    'category': 'Accessories',\n    'quantity': 0,\n    'inventoryStatus': 'OUTOFSTOCK',\n    'rating': 4,\n  },\n  {\n    'id': '1006',\n    'code': 'bib36pfvm',\n    'name': 'Chakra Bracelet',\n    'description': 'Product Description',\n    'image': 'chakra-bracelet.jpg',\n    'price': 32,\n    'category': 'Accessories',\n    'quantity': 5,\n    'inventoryStatus': 'LOWSTOCK',\n    'rating': 3,\n  },\n  {\n    'id': '1002',\n    'code': 'zz21cz3c1',\n    'name': 'Blue Band',\n    'description': 'Product Description',\n    'image': 'blue-band.jpg',\n    'price': 79,\n    'category': 'Fitness',\n    'quantity': 2,\n    'inventoryStatus': 'LOWSTOCK',\n    'rating': 3,\n  },\n  {\n    'id': '1004',\n    'code': 'h456wer53',\n    'name': 'Bracelet',\n    'description': 'Product Description',\n    'image': 'bracelet.jpg',\n    'price': 15,\n    'category': 'Accessories',\n    'quantity': 73,\n    'inventoryStatus': 'INSTOCK',\n    'rating': 4,\n  },\n  {\n    'id': '1000',\n    'code': 'f230fh0g3',\n    'name': 'Bamboo Watch',\n    'description': 'Product Description',\n    'image': 'bamboo-watch.jpg',\n    'price': 65,\n    'category': 'Accessories',\n    'quantity': 24,\n    'inventoryStatus': 'INSTOCK',\n    'rating': 5,\n  },\n]"
            },
            {
                "name": "RESPOSE_LAST_PATIENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/last-patitents.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: '1',\n    name: 'Leslie Alexander',\n    photo: 'https://xsgames.co/randomusers/avatar.php?g=female',\n    visitTime: new Date(),\n    date: new Date(),\n  },\n  {\n    id: '2',\n    name: 'Ronald Richards',\n    photo: 'https://xsgames.co/randomusers/avatar.php?g=male',\n    visitTime: new Date(),\n    date: new Date(),\n  },\n  {\n    id: '3',\n    photo: 'https://xsgames.co/randomusers/avatar.php?g=female',\n    name: 'Jane Cooper',\n    visitTime: new Date(),\n    date: new Date(),\n  },\n  {\n    id: '4',\n    name: 'Robert Fox',\n    photo: 'https://xsgames.co/randomusers/avatar.php?g=male',\n    visitTime: new Date(),\n    date: new Date(),\n  },\n  {\n    id: '5',\n    photo: 'https://xsgames.co/randomusers/avatar.php?g=female',\n    name: 'Jenny Wilson',\n    visitTime: new Date(),\n    date: new Date(),\n  },\n]"
            },
            {
                "name": "RESPOSE_LAST_PAYMENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/last-payments.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: '1',\n    recipient: 'Leslie Alexander',\n    amount: 988,\n    date: new Date(),\n  },\n  {\n    id: '2',\n    recipient: 'Ronald Richards',\n    amount: 778,\n    date: new Date(),\n  },\n  {\n    id: '3',\n    recipient: 'Jane Cooper',\n    amount: 779,\n    date: new Date(),\n  },\n  {\n    id: '4',\n    recipient: 'Robert Fox',\n    amount: 293,\n    date: new Date(),\n  },\n  {\n    id: '5',\n    recipient: 'Jenny Wilson',\n    amount: 739,\n    date: new Date(),\n  },\n]"
            },
            {
                "name": "SELECT_VALUE_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/select/select.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectComponent),\n  multi: true,\n}"
            },
            {
                "name": "server",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "setupServer(...handlers)"
            },
            {
                "name": "Severity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/toast/toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: {\n    ...args,\n    showSuccess: (injector: Injector): void => {\n      injector.get(MessageService).add({ severity: 'success', detail: 'Message content' })\n    },\n    showError: (injector: Injector): void => {\n      injector.get(MessageService).add({ severity: 'error', detail: 'Message content' })\n    },\n  },\n  template: `\n    <div style=\"height: 600px\">\n      <hc-toast></hc-toast>\n      <div style=\"display: flex; gap: 0.5rem\">\n        <button (click)=\"showSuccess(injector)\" style=\"width: 140px; height: 40px; background: var(--green-default); border: none; color: white; cursor: pointer\">Success</button>\n        <button (click)=\"showError(injector)\" style=\"width: 140px; height: 40px; background: var(--red-default); border: none; color: white; cursor: pointer\">Error</button>\n      </div>\n    </div>\n  `,\n})"
            },
            {
                "name": "showAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/modal/modal.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "animation([\n  style({ transform: '{{transform}}', opacity: 0 }),\n  animate('{{transition}}'),\n])"
            },
            {
                "name": "SWITCH_VALUE_ACcESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/switch/switch.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  multi: true,\n  useExisting: forwardRef(() => SwitchComponent),\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  props: {\n    ...args,\n    clickEvent: actionsData.clickEvent,\n  },\n  template: `<hc-button [theme]=\"theme\" [color]=\"color\" [type]=\"type\" [ariaLabel]=\"ariaLabel\" [disabled]=\"disabled\">Button</hc-button>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <hc-table [value]=\"products\" [responsive]=\"true\">\n      <ng-template hcTemplate=\"header\">\n        <tr>\n          <th>Code</th>\n          <th>Name</th>\n          <th>Category</th>\n          <th>Quantity</th>\n        </tr>\n      </ng-template>\n      <ng-template hcTemplate=\"body\" let-product>\n        <tr>\n          <td>{{product.code}}</td>\n          <td>{{product.name}}</td>\n          <td>{{product.category}}</td>\n          <td>{{product.quantity}}</td>\n        </tr>\n      </ng-template>\n    </hc-table>\n  `,\n})"
            },
            {
                "name": "ThemeContained",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ThemeOutlined",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ThemeText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/unique-id/unique-id.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  const prefix = 'pr_id_'\n  lastId++\n  return `${prefix}${lastId}`\n}"
            },
            {
                "name": "USER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/user.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ...ME,\n  age: 33,\n  gender: 'MALE',\n  status: 'APPROVED',\n  profileBackgroundImage:\n    'https://images.unsplash.com/photo-1612521481292-29c419630420?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1464&q=80',\n  description:\n    'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio dolore enim, nemo nihil non omnis temporibus? Blanditiis culpa labore velit.Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dicta, provident.',\n  contact: {\n    phone: '11999609711',\n    address: {\n      number: 71,\n      street: 'Pligrim Avenue Chevy Chase',\n      state: 'MD',\n      city: 'Midway',\n      cep: '13214355',\n    },\n  },\n  socialMedias: {\n    facebook: 'https://facebook.com.br/john-doe',\n    instagram: 'https://instagram.com/john-doe',\n    linkedin: 'https://linkedin.com/john-doe',\n    twitter: 'https://twitter.com/john-doe ',\n  },\n  events: [\n    {\n      title: 'Medication',\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur nam nisi veniam.',\n      date: new Date(),\n    },\n    {\n      title: 'Examination',\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur nam nisi veniam.',\n      date: new Date(),\n    },\n  ],\n  healthProblems: ['rhinitis', 'sinusitis'],\n  history: [\n    {\n      lastVisit: new Date(),\n    },\n  ],\n}"
            },
            {
                "name": "worker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/browser.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "setupWorker(...handlers)"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/components/button/button.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  clickEvent: action('clickEvent'),\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  props: {\n    ...args,\n    clickEvent: actionsData.clickEvent,\n  },\n  template: `<hc-button [theme]=\"theme\" [color]=\"color\" [type]=\"type\" [ariaLabel]=\"ariaLabel\" [disabled]=\"disabled\">Button</hc-button>`,\n})"
                },
                {
                    "name": "ThemeContained",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ThemeOutlined",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ThemeText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/components/table/table.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "controlsDisable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  bodyTemplate: {\n    table: {\n      disable: true,\n    },\n  },\n  captionTemplate: {\n    table: {\n      disable: true,\n    },\n  },\n  data: {\n    table: {\n      disable: true,\n    },\n  },\n  expandedRowTemplate: {\n    table: {\n      disable: true,\n    },\n  },\n  headerTemplate: {\n    table: {\n      disable: true,\n    },\n  },\n  optionsHeaderTemplate: {\n    table: {\n      disable: true,\n    },\n  },\n  paginator: {\n    table: {\n      disable: true,\n    },\n  },\n  summaryTemplate: {\n    table: {\n      disable: true,\n    },\n  },\n  tableService: {\n    table: {\n      disable: true,\n    },\n  },\n  columns: {\n    table: {\n      disable: true,\n    },\n  },\n  gridlines: {\n    table: {\n      disable: true,\n    },\n  },\n  responsive: {\n    table: {\n      disable: true,\n    },\n  },\n  responsiveLayout: {\n    table: {\n      disable: true,\n    },\n  },\n  scrollable: {\n    table: {\n      disable: true,\n    },\n  },\n  scrollDirection: {\n    table: {\n      disable: true,\n    },\n  },\n  scrollHeight: {\n    table: {\n      disable: true,\n    },\n  },\n  style: {\n    table: {\n      disable: true,\n    },\n  },\n  value: {\n    table: {\n      disable: true,\n    },\n  },\n  ngAfterContentInit: {\n    table: {\n      disable: true,\n    },\n  },\n  ngOnChanges: {\n    table: {\n      disable: true,\n    },\n  },\n  tableViewChild: {\n    table: {\n      disable: true,\n    },\n  },\n  templates: {\n    table: {\n      disable: true,\n    },\n  },\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <hc-table [value]=\"products\" [responsive]=\"true\">\n      <ng-template hcTemplate=\"header\">\n        <tr>\n          <th>Code</th>\n          <th>Name</th>\n          <th>Category</th>\n          <th>Quantity</th>\n        </tr>\n      </ng-template>\n      <ng-template hcTemplate=\"body\" let-product>\n        <tr>\n          <td>{{product.code}}</td>\n          <td>{{product.name}}</td>\n          <td>{{product.category}}</td>\n          <td>{{product.quantity}}</td>\n        </tr>\n      </ng-template>\n    </hc-table>\n  `,\n})"
                }
            ],
            "src/app/components/checkbox/checkbox.component.ts": [
                {
                    "name": "CHECKBOX_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/checkbox/checkbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CheckboxComponent),\n  multi: true,\n}"
                }
            ],
            "src/app/components/table/table-data.mock.ts": [
                {
                    "name": "COLUMNS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/table/table-data.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    header: 'Code',\n    field: 'code',\n  },\n  { header: 'Name', field: 'name' },\n  { header: 'Category', field: 'category' },\n  { header: 'Quantity', field: 'quantity' },\n]"
                },
                {
                    "name": "RESPONSE_PAGINATION_PAGE_1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/table/table-data.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  'totalItems': 10,\n  'itemCount': 5,\n  'itemsPerPage': 5,\n  'totalPages': 2,\n  'currentPage': 1,\n}"
                },
                {
                    "name": "RESPONSE_PRODUCTS_PAGE_1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/table/table-data.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'id': '1003',\n    'code': '244wgerg2',\n    'name': 'Blue T-Shirt',\n    'description': 'Product Description',\n    'image': 'blue-t-shirt.jpg',\n    'price': 29,\n    'category': 'Clothing',\n    'quantity': 25,\n    'inventoryStatus': 'INSTOCK',\n    'rating': 5,\n  },\n  {\n    'id': '1008',\n    'code': 'vbb124btr',\n    'name': 'Game Controller',\n    'description': 'Product Description',\n    'image': 'game-controller.jpg',\n    'price': 99,\n    'category': 'Electronics',\n    'quantity': 2,\n    'inventoryStatus': 'LOWSTOCK',\n    'rating': 4,\n  },\n  {\n    'id': '1009',\n    'code': 'cm230f032',\n    'name': 'Gaming Set',\n    'description': 'Product Description',\n    'image': 'gaming-set.jpg',\n    'price': 299,\n    'category': 'Electronics',\n    'quantity': 63,\n    'inventoryStatus': 'INSTOCK',\n    'rating': 3,\n  },\n  {\n    'id': '1001',\n    'code': 'nvklal433',\n    'name': 'Black Watch',\n    'description': 'Product Description',\n    'image': 'black-watch.jpg',\n    'price': 72,\n    'category': 'Accessories',\n    'quantity': 61,\n    'inventoryStatus': 'INSTOCK',\n    'rating': 4,\n  },\n  {\n    'id': '1007',\n    'code': 'mbvjkgip5',\n    'name': 'Galaxy Earrings',\n    'description': 'Product Description',\n    'image': 'galaxy-earrings.jpg',\n    'price': 34,\n    'category': 'Accessories',\n    'quantity': 23,\n    'inventoryStatus': 'INSTOCK',\n    'rating': 5,\n  },\n]"
                },
                {
                    "name": "RESPONSE_PRODUCTS_PAGE_2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/table/table-data.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'id': '1005',\n    'code': 'av2231fwg',\n    'name': 'Brown Purse',\n    'description': 'Product Description',\n    'image': 'brown-purse.jpg',\n    'price': 120,\n    'category': 'Accessories',\n    'quantity': 0,\n    'inventoryStatus': 'OUTOFSTOCK',\n    'rating': 4,\n  },\n  {\n    'id': '1006',\n    'code': 'bib36pfvm',\n    'name': 'Chakra Bracelet',\n    'description': 'Product Description',\n    'image': 'chakra-bracelet.jpg',\n    'price': 32,\n    'category': 'Accessories',\n    'quantity': 5,\n    'inventoryStatus': 'LOWSTOCK',\n    'rating': 3,\n  },\n  {\n    'id': '1002',\n    'code': 'zz21cz3c1',\n    'name': 'Blue Band',\n    'description': 'Product Description',\n    'image': 'blue-band.jpg',\n    'price': 79,\n    'category': 'Fitness',\n    'quantity': 2,\n    'inventoryStatus': 'LOWSTOCK',\n    'rating': 3,\n  },\n  {\n    'id': '1004',\n    'code': 'h456wer53',\n    'name': 'Bracelet',\n    'description': 'Product Description',\n    'image': 'bracelet.jpg',\n    'price': 15,\n    'category': 'Accessories',\n    'quantity': 73,\n    'inventoryStatus': 'INSTOCK',\n    'rating': 4,\n  },\n  {\n    'id': '1000',\n    'code': 'f230fh0g3',\n    'name': 'Bamboo Watch',\n    'description': 'Product Description',\n    'image': 'bamboo-watch.jpg',\n    'price': 65,\n    'category': 'Accessories',\n    'quantity': 24,\n    'inventoryStatus': 'INSTOCK',\n    'rating': 5,\n  },\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  BASE_URL: '',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  BASE_URL: 'http://localhost:3000',\n}"
                }
            ],
            "src/mocks/last-patitents.ts": [
                {
                    "name": "getLastPatients",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/last-patitents.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  req: RestRequest,\n  res: ResponseComposition,\n  ctx: RestContext\n) => {\n  return res(ctx.status(200), ctx.json(RESPOSE_LAST_PATIENTS))\n}"
                },
                {
                    "name": "RESPOSE_LAST_PATIENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/last-patitents.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: '1',\n    name: 'Leslie Alexander',\n    photo: 'https://xsgames.co/randomusers/avatar.php?g=female',\n    visitTime: new Date(),\n    date: new Date(),\n  },\n  {\n    id: '2',\n    name: 'Ronald Richards',\n    photo: 'https://xsgames.co/randomusers/avatar.php?g=male',\n    visitTime: new Date(),\n    date: new Date(),\n  },\n  {\n    id: '3',\n    photo: 'https://xsgames.co/randomusers/avatar.php?g=female',\n    name: 'Jane Cooper',\n    visitTime: new Date(),\n    date: new Date(),\n  },\n  {\n    id: '4',\n    name: 'Robert Fox',\n    photo: 'https://xsgames.co/randomusers/avatar.php?g=male',\n    visitTime: new Date(),\n    date: new Date(),\n  },\n  {\n    id: '5',\n    photo: 'https://xsgames.co/randomusers/avatar.php?g=female',\n    name: 'Jenny Wilson',\n    visitTime: new Date(),\n    date: new Date(),\n  },\n]"
                }
            ],
            "src/mocks/last-payments.ts": [
                {
                    "name": "getLastPayments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/last-payments.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  req: RestRequest,\n  res: ResponseComposition,\n  ctx: RestContext\n) => {\n  return res(ctx.status(200), ctx.json(RESPOSE_LAST_PAYMENTS))\n}"
                },
                {
                    "name": "RESPOSE_LAST_PAYMENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/last-payments.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: '1',\n    recipient: 'Leslie Alexander',\n    amount: 988,\n    date: new Date(),\n  },\n  {\n    id: '2',\n    recipient: 'Ronald Richards',\n    amount: 778,\n    date: new Date(),\n  },\n  {\n    id: '3',\n    recipient: 'Jane Cooper',\n    amount: 779,\n    date: new Date(),\n  },\n  {\n    id: '4',\n    recipient: 'Robert Fox',\n    amount: 293,\n    date: new Date(),\n  },\n  {\n    id: '5',\n    recipient: 'Jenny Wilson',\n    amount: 739,\n    date: new Date(),\n  },\n]"
                }
            ],
            "src/mocks/products.ts": [
                {
                    "name": "getProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/products.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  req: RestRequest,\n  res: ResponseComposition,\n  ctx: RestContext\n) => {\n  if (\n    req.url.searchParams.get('page') === '1' &&\n    req.url.searchParams.get('limit') === '5'\n  ) {\n    return res(ctx.status(200), ctx.json(RESPONSE_PRODUCTS_PAGE_1))\n  }\n\n  if (\n    req.url.searchParams.get('page') === '1' &&\n    req.url.searchParams.get('limit') === '10'\n  ) {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        items: [...RESPONSE_PRODUCTS_PAGE_1.items, ...RESPONSE_PRODUCTS_PAGE_2.items],\n        meta: {\n          ...RESPONSE_PRODUCTS_PAGE_1.meta,\n          ...{ itemsPerPage: 10, itemCount: 10, totalPages: 1, currentPage: 1 },\n        },\n      })\n    )\n  }\n\n  if (\n    req.url.searchParams.get('page') === '2' &&\n    req.url.searchParams.get('limit') === '5'\n  ) {\n    return res(ctx.status(200), ctx.json(RESPONSE_PRODUCTS_PAGE_2))\n  }\n\n  return res(\n    ctx.status(200),\n    ctx.json({\n      items: [...RESPONSE_PRODUCTS_PAGE_1.items, ...RESPONSE_PRODUCTS_PAGE_2.items],\n      meta: {\n        ...RESPONSE_PRODUCTS_PAGE_1.meta,\n        ...{\n          itemsPerPage: Number(req.url.searchParams.get('limit')),\n          itemCount: 10,\n          totalPages: 1,\n          currentPage: 1,\n        },\n      },\n    })\n  )\n}"
                },
                {
                    "name": "RESPONSE_PRODUCTS_PAGE_1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/products.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  'items': [\n    {\n      'id': '1003',\n      'code': '244wgerg2',\n      'name': 'Blue T-Shirt',\n      'description': 'Product Description',\n      'image': 'blue-t-shirt.jpg',\n      'price': 29,\n      'category': 'Clothing',\n      'quantity': 25,\n      'inventoryStatus': 'INSTOCK',\n      'rating': 5,\n    },\n    {\n      'id': '1008',\n      'code': 'vbb124btr',\n      'name': 'Game Controller',\n      'description': 'Product Description',\n      'image': 'game-controller.jpg',\n      'price': 99,\n      'category': 'Electronics',\n      'quantity': 2,\n      'inventoryStatus': 'LOWSTOCK',\n      'rating': 4,\n    },\n    {\n      'id': '1009',\n      'code': 'cm230f032',\n      'name': 'Gaming Set',\n      'description': 'Product Description',\n      'image': 'gaming-set.jpg',\n      'price': 299,\n      'category': 'Electronics',\n      'quantity': 63,\n      'inventoryStatus': 'INSTOCK',\n      'rating': 3,\n    },\n    {\n      'id': '1001',\n      'code': 'nvklal433',\n      'name': 'Black Watch',\n      'description': 'Product Description',\n      'image': 'black-watch.jpg',\n      'price': 72,\n      'category': 'Accessories',\n      'quantity': 61,\n      'inventoryStatus': 'INSTOCK',\n      'rating': 4,\n    },\n    {\n      'id': '1007',\n      'code': 'mbvjkgip5',\n      'name': 'Galaxy Earrings',\n      'description': 'Product Description',\n      'image': 'galaxy-earrings.jpg',\n      'price': 34,\n      'category': 'Accessories',\n      'quantity': 23,\n      'inventoryStatus': 'INSTOCK',\n      'rating': 5,\n    },\n  ],\n  'meta': {\n    'totalItems': 10,\n    'itemCount': 5,\n    'itemsPerPage': 5,\n    'totalPages': 2,\n    'currentPage': 1,\n  },\n}"
                },
                {
                    "name": "RESPONSE_PRODUCTS_PAGE_2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/products.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  'items': [\n    {\n      'id': '1005',\n      'code': 'av2231fwg',\n      'name': 'Brown Purse',\n      'description': 'Product Description',\n      'image': 'brown-purse.jpg',\n      'price': 120,\n      'category': 'Accessories',\n      'quantity': 0,\n      'inventoryStatus': 'OUTOFSTOCK',\n      'rating': 4,\n    },\n    {\n      'id': '1006',\n      'code': 'bib36pfvm',\n      'name': 'Chakra Bracelet',\n      'description': 'Product Description',\n      'image': 'chakra-bracelet.jpg',\n      'price': 32,\n      'category': 'Accessories',\n      'quantity': 5,\n      'inventoryStatus': 'LOWSTOCK',\n      'rating': 3,\n    },\n    {\n      'id': '1002',\n      'code': 'zz21cz3c1',\n      'name': 'Blue Band',\n      'description': 'Product Description',\n      'image': 'blue-band.jpg',\n      'price': 79,\n      'category': 'Fitness',\n      'quantity': 2,\n      'inventoryStatus': 'LOWSTOCK',\n      'rating': 3,\n    },\n    {\n      'id': '1004',\n      'code': 'h456wer53',\n      'name': 'Bracelet',\n      'description': 'Product Description',\n      'image': 'bracelet.jpg',\n      'price': 15,\n      'category': 'Accessories',\n      'quantity': 73,\n      'inventoryStatus': 'INSTOCK',\n      'rating': 4,\n    },\n    {\n      'id': '1000',\n      'code': 'f230fh0g3',\n      'name': 'Bamboo Watch',\n      'description': 'Product Description',\n      'image': 'bamboo-watch.jpg',\n      'price': 65,\n      'category': 'Accessories',\n      'quantity': 24,\n      'inventoryStatus': 'INSTOCK',\n      'rating': 5,\n    },\n  ],\n  'meta': {\n    'totalItems': 10,\n    'itemCount': 5,\n    'itemsPerPage': 5,\n    'totalPages': 2,\n    'currentPage': 2,\n  },\n}"
                }
            ],
            "src/mocks/handlers.ts": [
                {
                    "name": "handlers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/handlers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  rest.get(`${environment.BASE_URL}/products`, getProducts),\n  rest.post(`${environment.BASE_URL}/login`, login),\n  rest.get(`${environment.BASE_URL}/last-patients`, getLastPatients),\n  rest.get(`${environment.BASE_URL}/payments/last-payments`, getLastPayments),\n  rest.get(`${environment.BASE_URL}/user/profile`, profile),\n  rest.get(`${environment.BASE_URL}/user/me`, me),\n]"
                }
            ],
            "src/app/components/modal/modal.component.ts": [
                {
                    "name": "hideAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/modal/modal.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "animation([\n  animate('{{transition}}', style({ transform: '{{transform}}', opacity: 0 })),\n])"
                },
                {
                    "name": "showAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/modal/modal.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "animation([\n  style({ transform: '{{transform}}', opacity: 0 }),\n  animate('{{transition}}'),\n])"
                }
            ],
            "src/app/common/inject-injector-to-props/inject-injector-to-props.decorator.ts": [
                {
                    "name": "injectInjectorToProps",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/inject-injector-to-props/inject-injector-to-props.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "makeDecorator({\n  name: 'injectInjectorToProps',\n  parameterName: 'injectInjectorToProps',\n  skipIfNoParametersOrOptions: true,\n  wrapper: (getStory, context) => {\n    const story = getStory(context) as {\n      props: ICollection\n      moduleMetadata: NgModuleMetadata\n    }\n\n    if (!story.moduleMetadata.providers) {\n      story.moduleMetadata.providers = []\n    }\n\n    story.moduleMetadata.providers.push({\n      provide: APP_INITIALIZER,\n      useFactory: (injector: Injector): void => {\n        Object.assign(story.props, { injector })\n      },\n      deps: [Injector],\n    })\n\n    return story\n  },\n})"
                }
            ],
            "src/app/utils/unique-id/unique-id.ts": [
                {
                    "name": "lastId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/unique-id/unique-id.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/unique-id/unique-id.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  const prefix = 'pr_id_'\n  lastId++\n  return `${prefix}${lastId}`\n}"
                }
            ],
            "src/mocks/authentication.ts": [
                {
                    "name": "login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/authentication.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(req: RestRequest, res: ResponseComposition, ctx: RestContext) => {\n  return res(\n    ctx.status(200),\n    ctx.json({\n      token:\n        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijc0MGRkMTBhLTUxNDktNDIwYS05NWE4LWMyMzczMGFjM2ViOCIsIm5hbWUiOiJKb2huIERvZSJ9.eA_rwmjWuNj7NcWOc_fzDSluew8wCWUS6eXNF3-X8y4',\n    })\n  )\n}"
                }
            ],
            "src/mocks/user.ts": [
                {
                    "name": "me",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/user.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(req: RestRequest, res: ResponseComposition, ctx: RestContext) => {\n  return res(ctx.status(200), ctx.json(ME))\n}"
                },
                {
                    "name": "ME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/user.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  name: 'John Doe',\n  email: 'john.doe@gmail.com',\n  photo:\n    'https://userstock.io/data/wp-content/uploads/2020/06/robert-godwin-cdksyTqEXzo-1024x1024.jpg',\n}"
                },
                {
                    "name": "profile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/user.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(req: RestRequest, res: ResponseComposition, ctx: RestContext) => {\n  return res(ctx.status(200), ctx.json(USER))\n}"
                },
                {
                    "name": "USER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/user.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ...ME,\n  age: 33,\n  gender: 'MALE',\n  status: 'APPROVED',\n  profileBackgroundImage:\n    'https://images.unsplash.com/photo-1612521481292-29c419630420?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1464&q=80',\n  description:\n    'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Distinctio dolore enim, nemo nihil non omnis temporibus? Blanditiis culpa labore velit.Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dicta, provident.',\n  contact: {\n    phone: '11999609711',\n    address: {\n      number: 71,\n      street: 'Pligrim Avenue Chevy Chase',\n      state: 'MD',\n      city: 'Midway',\n      cep: '13214355',\n    },\n  },\n  socialMedias: {\n    facebook: 'https://facebook.com.br/john-doe',\n    instagram: 'https://instagram.com/john-doe',\n    linkedin: 'https://linkedin.com/john-doe',\n    twitter: 'https://twitter.com/john-doe ',\n  },\n  events: [\n    {\n      title: 'Medication',\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur nam nisi veniam.',\n      date: new Date(),\n    },\n    {\n      title: 'Examination',\n      description:\n        'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Consequuntur nam nisi veniam.',\n      date: new Date(),\n    },\n  ],\n  healthProblems: ['rhinitis', 'sinusitis'],\n  history: [\n    {\n      lastVisit: new Date(),\n    },\n  ],\n}"
                }
            ],
            "src/app/components/components.module.ts": [
                {
                    "name": "modules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/components.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[InputModule, SwitchModule, ButtonModule, IconModule, LinkModule]"
                }
            ],
            "src/app/utils/validations/password-strength/password-strength.validators.ts": [
                {
                    "name": "PasswordStrengthValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/validations/password-strength/password-strength.validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  control: AbstractControl\n): ValidationErrors | null => {\n  const value = control.value || ''\n\n  if (!value) {\n    return null\n  }\n\n  const eigthCharacters = /(?=.{8,})/g\n  if (eigthCharacters.test(value) === false) {\n    return { passwordStrength: true }\n  }\n\n  const upperCaseCharacters = /(?=.*[A-Z])/g\n  if (upperCaseCharacters.test(value) === false) {\n    return { passwordStrength: true }\n  }\n\n  const lowercaseCharacters = /(?=.*[a-z])/g\n  if (lowercaseCharacters.test(value) === false) {\n    return { passwordStrength: true }\n  }\n\n  const digits = /(?=.*[0-9])/g\n  if (digits.test(value) === false) {\n    return { passwordStrength: true }\n  }\n\n  const specialCharacters = /([^A-Za-z0-9])/g\n  if (specialCharacters.test(value) === false) {\n    return { passwordStrength: true }\n  }\n\n  return null\n}"
                }
            ],
            "src/app/modules/invoices/invoices.component.ts": [
                {
                    "name": "RESPONSE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/invoices/invoices.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    company: 'Sterling Cooper Ltd.',\n    date: new Date().toISOString(),\n    recipient: 'Leslie Alexander',\n    status: 'PAID',\n    amount: 293.01,\n  },\n  {\n    company: 'Acme Co.',\n    date: new Date().toISOString(),\n    recipient: 'Ronald Richards',\n    status: 'SCHEDULED',\n    amount: 596.28,\n  },\n  {\n    company: 'Sirius Cybernetics Co.',\n    date: new Date().toISOString(),\n    recipient: 'Jane Cooper',\n    status: 'UNPAID',\n    amount: 219.78,\n  },\n]"
                }
            ],
            "src/app/components/select/select.component.ts": [
                {
                    "name": "SELECT_VALUE_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/select/select.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectComponent),\n  multi: true,\n}"
                }
            ],
            "src/mocks/server.ts": [
                {
                    "name": "server",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "setupServer(...handlers)"
                }
            ],
            "src/app/components/toast/toast.stories.ts": [
                {
                    "name": "Severity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/toast/toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: {\n    ...args,\n    showSuccess: (injector: Injector): void => {\n      injector.get(MessageService).add({ severity: 'success', detail: 'Message content' })\n    },\n    showError: (injector: Injector): void => {\n      injector.get(MessageService).add({ severity: 'error', detail: 'Message content' })\n    },\n  },\n  template: `\n    <div style=\"height: 600px\">\n      <hc-toast></hc-toast>\n      <div style=\"display: flex; gap: 0.5rem\">\n        <button (click)=\"showSuccess(injector)\" style=\"width: 140px; height: 40px; background: var(--green-default); border: none; color: white; cursor: pointer\">Success</button>\n        <button (click)=\"showError(injector)\" style=\"width: 140px; height: 40px; background: var(--red-default); border: none; color: white; cursor: pointer\">Error</button>\n      </div>\n    </div>\n  `,\n})"
                }
            ],
            "src/app/components/switch/switch.component.ts": [
                {
                    "name": "SWITCH_VALUE_ACcESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/switch/switch.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: NG_VALUE_ACCESSOR,\n  multi: true,\n  useExisting: forwardRef(() => SwitchComponent),\n}"
                }
            ],
            "src/mocks/browser.ts": [
                {
                    "name": "worker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/browser.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "setupWorker(...handlers)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "home",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "loadChildren": "./modules/home/home.module#HomeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/home/home-routing.module.ts",
                                        "module": "HomeRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "redirectTo": "dashboard",
                                                "pathMatch": "full"
                                            },
                                            {
                                                "path": "",
                                                "component": "HomeComponent",
                                                "data": {
                                                    "breadcrumb": "Home"
                                                },
                                                "children": [
                                                    {
                                                        "path": "dashboard",
                                                        "loadChildren": "../dashboard/dashboard.module#DashboardModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/modules/dashboard/dashboard-routing.module.ts",
                                                                        "module": "DashboardRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "DashboardComponent",
                                                                                "data": {
                                                                                    "breadcrumb": "Dashboard"
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "DashboardModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": "user",
                                                        "loadChildren": "../user/user.module#UserModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/modules/user/user-routing.module.ts",
                                                                        "module": "UserRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "ProfileComponent",
                                                                                "data": {
                                                                                    "breadcrumb": "User"
                                                                                }
                                                                            },
                                                                            {
                                                                                "path": "edit",
                                                                                "component": "EditComponent",
                                                                                "data": {
                                                                                    "breadcrumb": "Edit"
                                                                                }
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "UserModule"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HomeModule"
                            }
                        ]
                    },
                    {
                        "path": "auth",
                        "loadChildren": "./modules/authentication/authentication.module#AuthenticationModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/authentication/authentication-routing.module.ts",
                                        "module": "AuthenticationRoutingModule",
                                        "children": [
                                            {
                                                "path": "login",
                                                "component": "LoginComponent"
                                            },
                                            {
                                                "path": "register",
                                                "component": "RegisterComponent"
                                            },
                                            {
                                                "path": "",
                                                "redirectTo": "login",
                                                "pathMatch": "full"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "AuthenticationModule"
                            }
                        ]
                    },
                    {
                        "path": "patients",
                        "loadChildren": "./modules/patients/patients.module#PatientsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/patients/patients-routing.module.ts",
                                        "module": "PatientsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PatientsComponent"
                                            },
                                            {
                                                "path": "create",
                                                "component": "CreatePatientComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "PatientsModule"
                            }
                        ]
                    },
                    {
                        "path": "invoices",
                        "loadChildren": "./modules/invoices/invoices.module#InvoicesModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/invoices/invoices-routing.module.ts",
                                        "module": "InvoicesRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "InvoicesComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "InvoicesModule"
                            }
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "home",
                        "pathMatch": "full"
                    },
                    {
                        "path": "**",
                        "component": "PageNotFoundComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/base-table/base-table.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BaseTableService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/common/base-table/base-table.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IParams",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/connected-overlay-scroll-handler/connected-overlay-scroll-handler.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConnectedOverlayScrollHandler",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/common/connected-overlay-scroll-handler/connected-overlay-scroll-handler.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConnectedOverlayScrollHandler",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/dom-handler/dom-handler.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DomHandler",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/common/dom-handler/dom-handler.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDimensions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/dom-handler/dom-handler.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOffset",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/dom-handler/dom-handler.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IViewport",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/hc-config/hc-config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HcConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/common/inject-injector-to-props/inject-injector-to-props.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "injectInjectorToProps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/local-storage/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/models/style.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStyle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/object-utils/object-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObjectUtils",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/common/overlay/overlay.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OverlayService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/overlay/overlay.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMessage",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/common/z-index-utils/z-index-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ZIndexUtils",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/badge/badge.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BadgeDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/breadcrumb/breadcrumb.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBreadcrumbItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/breadcrumb/breadcrumb.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BreadcrumbService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ButtonDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThemeContained",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThemeOutlined",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ThemeText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CHECKBOX_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/components.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/54",
                "status": "low"
            },
            {
                "filePath": "src/app/components/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/components/link/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/logo/logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-item.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICommand",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu-item.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/modal.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hideAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/modal/modal.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "showAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/msw/msw.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MswComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/msw/msw.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MswService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pagination/pagination.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPageChange",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pagination/pagination.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPagination",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pagination/pagination.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPaginationState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/select/select-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/select/select-item.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/86",
                "status": "low"
            },
            {
                "filePath": "src/app/components/select/select.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SELECT_VALUE_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/skeleton/skeleton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkeletonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/status/status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/switch/switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/components/switch/switch.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISwitchOnChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/switch/switch.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SWITCH_VALUE_ACcESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tab-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tab/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/pagination.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PaginationDirective",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/row-expand.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RowExpandDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/row-toggler.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RowTogglerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/select-all.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectAllComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/select.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SelectDirective",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/select.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IHeaderCheckboxEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/select.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRowSelectEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/sort-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/sort.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SortDirective",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/sortable-column.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SortableColumnDirective",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table-body.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableBodyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table-check-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableCheckBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table-data.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLUMNS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table-data.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RESPONSE_PAGINATION_PAGE_1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table-data.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RESPONSE_PRODUCTS_PAGE_1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table-data.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RESPONSE_PRODUCTS_PAGE_2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table-header-checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableHeaderCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TableService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISortMeta",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "controlsDisable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tag/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/timeline/timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toast/message.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessageService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toast/message.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMessage",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toast/toast-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toast/toast-item.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOnClose",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toast/toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Severity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/inject-html/inject-html.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "InjectHTMLDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/template/template.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TemplateDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/pagination.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMeta",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/pagination.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPagination",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/appointments/appointments.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppointmentsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/appointments/appointments.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILastPatients",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/authentication/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/authentication/authentication.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/authentication/authentication.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILoginUserDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/authentication/authentication.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToken",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/authentication/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/authentication/page-not-found/page-not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageNotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/authentication/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dashboard/components/timeline-events-and-meetings/timeline-events-and-meetings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineEventsAndMeetingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dashboard/components/timeline-events-and-meetings/timeline-events-and-meetings.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITimelineEventsAndMettings",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dashboard/dashboard.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IIntroduction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/data/page-pagination/page-pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagePaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/data/page-timeline/page-timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageTimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/docs/docs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/form/page-checkbox/page-checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/form/page-input-text/page-input-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageInputTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/form/page-select/page-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/form/page-select/page-select.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICity",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/form/page-switch/page-switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/misc/page-skeleton/page-skeleton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageSkeletonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/misc/page-tag/page-tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageTagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/overlay/page-modal/page-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/products.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/products.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProduct",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/table/page-basic/page-basic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageBasicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/table/page-dynamic/page-dynamic.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageDynamicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/table/page-gridlines/page-gridlines.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageGridlinesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/table/page-limit/page-limit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageLimitComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/table/page-row-expand/page-row-expand.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageRowExpandComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/table/page-scroll/page-scroll.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageScrollComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/table/page-select-all/page-select-all.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageSelectAllComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/table/page-toggle/page-toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/table/page/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/table/selection/selection.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/docs/table/sort/sort.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/home/components/dropdown-notifications/dropdown-notifications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownNotificationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/home/components/dropdown-notifications/dropdown-notifications.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IItemNotification",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/home/components/dropdown-profile/dropdown-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/home/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/invoices/invoices.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvoicesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/invoices/invoices.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInvoice",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/invoices/invoices.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RESPONSE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/patients/create-patient/create-patient.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreatePatientComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/patients/patients.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PatientsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/patients/patients.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPatient",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/patients/patients/patients.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PatientsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/components/edit-user-account/edit-user-account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditUserAccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/components/profile-background/profile-background.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileBackgroundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/edit/edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/services/user.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAddress",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/services/user.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IContact",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/services/user.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEvents",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/services/user.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IHistory",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/services/user.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMe",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/services/user.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProfile",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/services/user.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISocialMedias",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/phone/phone.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PhonePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/remove-http-url/remove-http-url.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RemoveHttpUrlPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/payments/payments.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PaymentsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/payments/payments.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILastPayments",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/unique-id/unique-id.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lastId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/unique-id/unique-id.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/validations/password-strength/password-strength.validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PasswordStrengthValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/authentication.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/browser.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "worker",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/handlers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "handlers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/last-patitents.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getLastPatients",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/last-patitents.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RESPOSE_LAST_PATIENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/last-payments.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getLastPayments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/last-payments.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RESPOSE_LAST_PAYMENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/products.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/products.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RESPONSE_PRODUCTS_PAGE_1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/products.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RESPONSE_PRODUCTS_PAGE_2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "server",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/user.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "me",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/user.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/user.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "profile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/mocks/user.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}